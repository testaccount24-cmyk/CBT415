RPFEDIT  TITLE 'RPF F U L L S C R E E N   EDITOR'
*---------------------------------------------------------------------*
*                                                                     *
*        Module:        RPFEDIT.                                      *
*                                                                     *
*        Attributes:    RENT, REUS                                    *
*                                                                     *
*        Function:      Load the data set specified by DDname RPFWORK *
*                       into the EDIT workspace and allow the user    *
*                       to update the workspace in fullscreen mode    *
*                       a data set or member with a record length     *
*                       from 40 bytes until 255 bytes and with        *
*                       fixed or variable records.                    *
*                                                                     *
*        Note:          If flag $COMVIEW in RPFCOMM is on, VIEW mode  *
*                       is selected. All primary- and line commands   *
*                       are supported, except (AUTO)SAVE.             *
*                                                                     *
*        Primary commands:                                            *
*                        1. =n/=n.n Return to RPFMAIN and execute  @rp1
*                           option 'n' or option 'n.n'             @rp1
*                        2. $DOC: Add date/timestamp after string     *
*                           '// last update: ' (mixed chars allowed)  *
*                        3. APPEND: Append member or data set         *
*                        4. AUTOSAVE ON:  Turn on automatic SAVE.     *
*                           AUTOSAVE OFF: Turn off automatic SAVE.    *
*                        5. BNDS n,m set boundaries to columns n,m    *
*                        6. BOTTOM: Display last screen of workspace  *
*                        7. C /aa/bbb/(A) Change character strings    *
*                        8. C /aa/bbb/n,m Change character strings    *
*                           in range n-m                              *
*                        9. CAN(CEL)Stop EDIT without save            *
*                       10. CAPS ON: Translate lowercase to capitals  *
*                           CAPS OFF: Let workspace in 'Asis' mode    *
*                       11. CO ln1,ln2,ln3: Copy ln1-ln2 after ln3.   *
*                       12. COBOL ON  Align on Cobol (columns 07-72)  *
*                           COBOL OFF Align on std mode (cols 01-xxx) *
*                       13. COLS: Set scale line on or off            *
*                       14. COPY: Copy member or data set after line  *
*                           command 'A'.                              *
*                       15. CREATE: (with CC line commands) create    *
*                           data set/member with copied lines.        *
*                       16. CUT: add range of lines to 'clipboard' @rpb
*                       17. DEL N,M: Delete lines n-m                 *
*                           DEL *,N  Delete n lines starting with     *
*                           current line; If n=99999999 the current   *
*                           until the end of the workspace will be    *
*                           deleted                                   *
*                       18. DOWN:   Scroll forward PAGE/HALF/LINE/CSR *
*                       19. END:    Terminate EDIT and SAVE if        *
*                           workspace is changed (with AUTOSAVE=Y)    *
*                       20. EOF key can be used to delete line        *
*                       21. F 'string': Make the line, which contains *
*                           'string' the first line on the screen     *
*                           F P'.' Fmnd invalid characters.           *
*                           F X'hh..' Find HEX characters.            *
*                       22. FILL /string/ fill editor boundaries with *
*                           'string' starting with current line       *
*                           until the end of the workspace            *
*                       23. FILL /string/n,m Fill cmd for linerange   *
*                       24. HAR xxxxxx n,m,<NOTITLE>,<NOEJECT>,<C=cc> *
*                           Print lines n,m on printer xxxxx If n-m   *
*                           are omitted the screen will be printed    *
*                       25. HELP:   Display HELP screen               *
*                       26. I m,n:  Insert n lines after line m or    *
*                           insert after current line is m='*'        *
*                       27. JCL:    Invoke JCL checker                *
*                       28. L +N:   Skip forward n lines.             *
*                       29. L -N:   Skip backward n lines.            *
*                       30. L N:    Make line 'n' the first line      *
*                           on the screen                             *
*                       31. LC n,m Set lines n,m to asis(within bnds) *
*                       32. LEFT:   Scroll left PAGE/HALF/CSR if the  *
*                                   record does not fit on the screen.*
*                       33. MO ln1,ln2,ln3: Copy ln1-ln2 after ln3    *
*                           and delete the original ln1-ln2           *
*                       34. NULLS ON: remove trailing blanks on the   *
*                                   screen.                           *
*                           NULLS OFF: replace trailing nulls on the  *
*                                   screen by blanks.                 *
*                       35. NUMBER ON: set editor in NUM mode         *
*                                      NUM ON is an alias             *
*                       36. NUMBER OFF:set editor in NONUM mode       *
*                                      NUM OFF is an alias            *
*                       37. OUT:    Invoke output processor           *
*                       38. OVLY ln1,ln2,ln3: Copy overlay ln1 over   *
*                           range ln2-ln3 (or over ln2 only)          *
*                       39. PASTE: copy 'clipboard' after line 'A' @rpb
*                           of before line-1 (TT) or after last    @rpb
*                           record (BB)                            @rpb
*                       40. PFK:    Reset PFK definitions             *
*                       41. PRINT n,m or PRINT *,n                    *
*                           Print lines n-m or print n lines from     *
*                           current line to a data set and invoke     *
*                           Browse (RPFBRO).                          *
*                       42. PROF:   Set PROFILE line ON or OFF.       *
*                       43. R m,n:  Repeat Line m n times or repeat   *
*                           current line if m='*'                     *
*                       44. REN(UM) Renumber workspace and goto 'NUM' *
*                       45. REP(LACE) (with CC line commands) replace *
*                           data set/member with copied lines.        *
*                       46. RES(ET) Reset pending line commands       *
*                       47. RETRIEVE last command from buffer      @rp6
*                       48. RIGHT:  Scroll right PAGE/HALF/CSR if the *
*                                   record does not fit on the screen.*
*                       49. SAVE:   Save EDIT workspace.              *
*                       50. SORT: Sort workspace (set by 'BNDS')      *
*                       51. SUB:    Submit the workspace.             *
*                       52. TOP:    Display 1st screen of workspace   *
*                       53. UC n,m Set lines n,m to caps(within bnds) *
*                       54. UNN(UM) Remove numbers and goto NONUM mode*
*                       55. UP:     Scroll backward PAGE/HALF/LINE/CSR*
*                                                                     *
*        Notes:         The primary commands will be repeated if the  *
*                       command is prefixed with an '&'               *
*                       The current line is always the first data     *
*                       line on your screen.                          *
*                       Line = 0 means before the first line          *
*                                                                     *
*        Line commands:  1. A ...... Destination after this line      *
*                        2. BB ..... Destination after last line      *
*                        3. TT ..... Destination before first line    *
*                        4. C ...... Copy this line                   *
*                        5. CC-CC .. Copy these lines                 *
*                        6. CB ..... Copy from this line until end    *
*                                    including last line              *
*                        7. CT ..... Copy from first line until this  *
*                                    line including this line         *
*                        8. M ...... Move this line                   *
*                        9. MM-MM .. Move these lines                 *
*                       10. MB ..... Move from this line until end    *
*                                    including last line              *
*                       11. MT ..... Move from first line until this  *
*                                    line including this line         *
*                       12. D ...... Delete this line                 *
*                       13. DD-DD .. Delete these lines               *
*                       14. DB ..... Delete this line until and       *
*                                    including last line              *
*                       15. DT ..... Delete first line until and      *
*                                    including this line              *
*                       16. Ix ..... Insert x lines after this line.  *
*                       17. Rx ..... Repeat this line x times         *
*                       18. RR-RR... Repeat a block of lines          *
*                       19. UC...... Translate to captials            *
*                       20. LC...... Translate line to lowercase      *
*                       21. UCC..UCC Translate block of line to       *
*                                    capitals                         *
*                       22. LCC..LCC Translate block of line to       *
*                                    lowercase                        *
*                       23. C..O or C..OO-OO Copy overlay             *
*                       24. RESET... Reset pending line commands      *
*                                                                     *
*        Called by:     RPFMAIN - Option 2                            *
*                       RPFARCH, RPFLIB, RPFPDS, RPFVTOC, RPFVTOC1    *
*                                                                     *
*        Subroutines:   RPFCHNG:  Subroutine for 'C' command          *
*                       RPFC3270: Compress 3270 data stream.          *
*                       RPFEDITL: Load the data set or member         *
*                       RPFFILL:  Subroutine for 'FILL', 'LC', 'UC'   *
*                       RPFFIND:  Subroutine for 'F' command.         *
*                       RPFHCPY:  Subroutine for 'HAR' and 'PRINT'    *
*                                 command.                            *
*                       RPFHELP:  Routine for 'HELP' command.         *
*                       RPFOUT:   Output processor                    *
*                       RPFPFK:   PFK definition module               *
*                       RPFSAVE:  Save the EDIT workspace             *
*                       RPFSUB:   Submit the workspace                *
*                       RPFTSO:   TSO commands                        *
*                                                                     *
*        Registers:     Register 13 points always to the dynamic      *
*                       area, except in SRCHLINE                      *
*                       The first 72 byte in the workarea is the      *
*                       save are of the RPFEDIT mainline.             *
*                       Register 11 points to RPFCOMM in all routines *
*                       Register 12 is the base register all routines *
*                       Registers 10 and 9 are the second and third   *
*                       base registers of the RPFEDIT mainline.       *
*                                                                     *
*        Return codes set in register 15:                             *
*               00. Execution alright                                 *
*               04. Workspace too small (set by RPFEDITL)             *
*               08. Not used anymore.                                 *
*               12. Edit canceled, IO-error (set by RPFEDITL)         *
*               16. Edit canceled, data set/member in use (by RPFEDITL*
*               20. Not saved, exit entered or CANCEL command given.  *
*                                                                     *
*        Change log:                                                  *
*        Jul 17,2002 RPr: add '=n'/'=n.n' command                  @rp1
*        Aug 01,2002 RPr: Preserve empty workspace if all lines       *
*                         are deleted.                             @rp2
*        Aug 05,2002 RPr: Allow editing empty data set or member   @rp3
*        Aug 31,2002 RPr: Positioning problems solved in Delete    @rp5
*        Sep 30,2002 RPr: RETRIEVE command added                   @rp6
*        Oct 20,2002 RPr: AUTOSAVE parm checked if END cmd given   @rp7
*        Oct 27,2002 RPr: Support command 'nnnnn' together with the   *
*                         DOWN or UP pfkey. (nnnnn is 1-5 figures) @rp8
*        Feb 06,2003 RPr: Only MDT of changed lines set.           @rp9
*        Jun 20,2003 RPr: Add End of Data Marker and protect unused   *
*                         fields                                   @rpa
*        Dec 04,2003 RPr: CUT and PASTE primary command added.     @rpb
*        Jan 04,2004 RPr: Abend 0c4 fixed with truncated workspace @rpc
*        Feb 08,2005 RPr: The "F" command    has alias "FIND" now  @rpd
*                         Set only changed flag if 'C' command is  @rpd
*                         succesful                                @rpd
*        Feb 12,2005 RPr: Allow TOP and BOTTOM commands along with @rpd
*                         line commands                            @rpe
*        Mar 16,2006 RPr: Fill end of screen with blanks instead nulls*
*        Sep 29,2006 RPr: Loop solved in PFK routine               @rpg
*        Aug 29,2008 RPr: Loop solved in VIEWCUT if a CUT command  @rph
*                         is given with the "MM" line commands.    @rph
*        Sep 01,2008 RPr: The line commands can be entered in      @rpj
*                         any place in the line number field.      @rpj
*        Dec 14,2018 RPr: Make RPF suitable for MVS/380 and above@rpa01
*        Dec 19,2018 RPr: Routine LCOMMAND changed to CSECT        @rpk
*        Dec 30,2018 RPr: CUT/PASTE pending not always displayed   @rpl
*        Jan 26,2019 RPr: Error solved if the "I" or "R" linecmd   @rpm
*                         is not issued in col 1 of the linenumber @rpm
*        Mar 02,2019 RPr: Lines with unprintables blocked for      @rpn
*                         editing.                                 @rpn
*        Mar 03,2019 RPr: ABEND0C4 resolved if SUBMIT command is   @rpo
*                         issued from EDIT in member list in MVS380@rpo
*        Mar 21,2019 RPr: Support added for all kinds of 3270 screens *
*                         up to 62 lines x 160 columns (3290)         *
*        Mar 24,2019 RPr: If more than 16MB will be deleted/copied    *
*                         inserted/repeated MVCLE will be used.       *
*        Apr 15,2019 RPr: We have left LRECL=80 only. Now we can      *
*                         EDIT data sets and members with a RECFM     *
*                         of F(B) or V(B) with a record length        *
*                         between 40 and 255                          *
*                         If end BNDS = 999, set end boundary to      *
*                         record length of input data set.            *
*        May 05,2019 RPr: Detect unprintables during build of screen  *
*                         instead during READ of the input            *
*        May 20,2019 RPr: Command COLS added to show/hide scale line  *
*        May 27,2019 RPr: Set ISPF/RPF vv:mm in header and set mm of  *
*                         the ISPF/RPF stats in col 79-80 if changed  *
*                         lines if workspace is numbered              *
*        Jun 30,2019 RPr: Line numbers in last 8 positions if         *
*                         Numbered and independent of LRECL           *
*                         ISPF mm in last 2 positions in PASTE'd lines*
*        Jul 24,2019 RPr: Corrected: display of pending line commands *
*        Jul 29,2019 RPr: If no command is entered, place the         *
*                         cursor in the next data line if the cursor  *
*                         was already in the data before ENTER        *
*                         Changed flag set after successful $DOC.     *
*        Aug 19,2019 RPr: PFK routine set in a CSECT and Update       *
*                         changed into EDIT.                          *
*                         '=' command without operands rejected.      *
*                         ABEND0C4 resolved in DEL and CO command     *
*        Sep 19,2019 RPr: ABEND0C7 fixed if a DEL *,0 or I *,0 is     *
*                         given.                                      *
*        Sep 23,2019 RPr: Place cursor on found string after          *
*                         succesful F (Find) command.                 *
*        Sep 26,2019 RPr: The command can be in any place of the      *
*                         command area.                               *
*        Sep 30,2019 RPr: Terminate EDIT if workspace is too small    *
*                         The 'M' in the command area along with      *
*                         pressing the PFK with the UP, DOWN, LEFT    *
*                         or RIGHT can be in any place.               *
*        Oct 01,2019 RPr: Parse all primary commands before execute.  *
*        Oct 16,2019 RPr: Support PRINT primary command.              *
*        Jan 08,2020 RPr: Allow numerics in command along with line   *
*                         commands (implicit L+ or L- command)        *
*                         Fix a convert error if the DEL or EOF key   *
*                         was used in the Line-number field.          *
*        Jan 09,2020 RPr: Reverse line number if line is changed with *
*                         the 'C' primary command.                    *
*        Jan 14,2020 RPr: Handle I/O error from the loader RPFEDITL.  *
*        Jan 16,2020 RPr: 'O' (OMIT) command deleted.                 *
*        Jan 23,2020 RPr: Handle I/O error after APPEND correctly.    *
*        Jan 25,2020 RPr: Support terminals up to 9920 bytes.         *
*                         (like 62x160 or 99x100)                     *
*        Feb 09,2020 RPr: Refuse AUTOSAVE if flag $COMCURR is set.    *
*        Feb 15,2020 RPr: Add DSNAME(member) into header, remove      *
*                         'Xlate' and 'Nonum' from header and change  *
*                         'Asis' into 'Lo', 'Top' into 'T' and        *
*                         'Nulls' into 'Nul'.                         *
*        Feb 16,2020 RPr: Translate only a-z in CAPS mode             *
*        Feb 21,2020 RPr: Support scroll HALF in RIGHT and LEFT       *
*                         commandss and leave the cursor in the       *
*                         same line after successful LEFT or RIGHT    *
*        Feb 27,2020 RPr: Fix screen convert error if BNDS and/or     *
*                         scroll field is completely erased.          *
*        Mar 02,2020 RPr: OVLY ln1,ln2,ln3 primary command added.     *
*                         and line commands C -> OO -- OO and         *
*                         C -> O added.                               *
*        Apr 02,2020 RPr: Compress the 3270 data stream before TPUT.  *
*                         Support screens up to 16384 bytes with a    *
*                         maximum linecount of 99 and a maximum width *
*                         of 200 bytes.                               *
*        Apr 12,2020 RPr: Increase ISPF vv.mm if data is changed and  *
*                         set vv to 01 instead of 50 if not present.  *
*        Apr 20,2020 RPr: Do not set $COMCHGD flag if lines are       *
*                         inserted without data and set $COMCHGD      *
*                         flag after succesful APPEND command.        *
*        Apr 21,2020 RPr: Allow COBOL primary command if a wide       *
*                         screen is used.                             *
*        May 01,2020 RPr: Detect COBOL line numbers in col 1-6 and    *
*                         set data in COBOL mode if these numbers     *
*                         are present.                                *
*        May 31,2020 RPr: Bypass TPUT NOEDIT if screensize is 4096    *
*                         or less                                     *
*        Jun 15,2020 RPr: ABEND0C7 fixed in subsequent EDIT after     *
*                         APPEND                                      *
*        Jul 07,2020 RPr: Primary command OSSAVE deleted.             *
*        Aug 23,2020 RPr: Mark EDIT workspace changed after 'R'(epeat)*
*                         primary or 'R' line command.                *
*        Sep 28,2020 RPr: Don't use the Upper Case option anymore     *
*                         This option will be automatically detected. *
*        Oct 16,2020 RPr: ASIS and CAPS were swapped. Fixed           *
*        Nov 30,2020 RPr: EDIT detects automatically the line numbers.*
*        Dec 20,2020 RPr: Command APPEND refused if called from       *
*                         the RPFED or RPFPD command processor.       *
*        Jan 06,2021 RPr: Replace ATTACH to RPFTSO and RPFOUT into    *
*                         LINK                                        *
*        Jan 11,2021 RPr: Easier recovery from x37 abends.            *
*        Feb 01,2021 RPr: Change EDIT header if called from RPFARCH   *
*                         and RPFLIBxx.                               *
*        Feb 19,2021 RPr: Fix persistency of msg 'Invalid boundaries' *
*                         in screen.                                  *
*        Apr 18,2021 RPr: Rc=08, workspace full; deleted and          *
*                         Rc=24, workspace empty; deleted. The rest   *
*                         of the return codes are renumbered.         *
*        Apr 23,2021 RPr: Remove 'T', 'Lo' and 'Nul' from header.     *
*                         Add primary command 'PROF' to display       *
*                         a profile line Yes or No.                   *
*                         The profile line contains: Numbered: YES/NO *
*                         Cobol: ON/OFF, Caps: ON/OFF and Nulls: ON/OFF
*                         Primary command CAPS renamed into CAPS ON.  *
*                         Primary command ASIS renamed into CAPS OFF. *
*                         Primary command COB renamed into COBOL ON.  *
*                         Primary command NOCOB renamd into COBOL OFF.*
*                         Primary command NULLS renamed into NULLS ON.*
*                         Primary command NONULLS renamed into        *
*                         NULLS OFF.                                  *
*        May 03,2021 RPr: Warning message issued if CANCEL primary    *
*                         command is given with outstanding changes.  *
*        May 13,2021 RPr: Prohibit COBOL ON if RECFM=V(B).            *
*                         AUTOSAVE ON/OFF primary command added and   *
*                         add AUTOSAVE in the PROFILE line.           *
*        May 16,2021 RPr: FORCE operand of SAVE deleted.              *
*        Jun 08,2021 RPr: Fix ABEND0C4 if first CUT command given     *
*                         and afterwards the 'CC' line commands       *
*                         Module made RENT, REUS (Pfieuw...)          *
*        Sep 06,2021 RPr: Fix primary command I 0,n and CO/MO n,m,0   *
*        Nov 08,2021 RPr: Support numbered data with variable records *
*                         with linenumbers in column 1-8.             *
*                         Primary command SCOPE renamed into BNDS.    *
*        Nov 26,2021 RPr: Redefine default boundaries.                *
*        Dec 15,2021 RPr: Fix update on last line on screen, that was *
*                         not marked as changed.                      *
*        Jan 13,2022 RPr: Increment linenumber on screen set to 1.    *
*        Jan 26,2022 RPr: Do not renumber numbered data initially,    *
*                         with the exception of new data sets/members.*
*                         Primary command NONUM changed into NUMBER OFF
*                         Primary command NUM changed into NUMBER ON. *
*        Jan 28,2022 RPr: Update number of changed lines for RPFSAVE. *
*        Mar 06,2022 RPr: VIEW mode supported.                        *
*        Jul 17,2022 RPr: CREATE with alias CRE primary command added *
*                         along with CC -- CC, CT or CB line commands *
*                         SAVE command saves in same data set if      *
*                         AUTOSAVE = ON.                              *
*        Jul 22,2022 RPr: REPLACE with alias REP primary command added*
*                         along with CC -- CC, CT or CB line commands *
*        Sep 21,2022 RPr: Fix 0C4 abend if editing an empty data set  *
*        Jun 01,2023 RPr: Fix error in CUT/CRE/REP/A with CC line     *
*                         commands if input contains invalid characters
*        Nov 14,2023 RPr: Scroll CSR supported in LEFT and RIGHT      *
*                         primary commands and the default BNDS range *
*                         covers only the visible part of the data    *
*                         in the screen.                              *
*        Nov 17,2023 RPr: ABEND0C4 fixed with L +/- very large number.*
*        Mar 08,2024 RPr: TOP OF DATA line added and message          *
*                         'Scroll had no effect' deleted.             *
*        Apr 28,2024 RPr: Place cursor immediately in inserted or     *
*                         repeated line without changing the address  *
*                         of the first line on screen.                *
*        Jun 02,2024 RPr: CAPS ON and OFF will be set dependend of    *
*                         COMMCAPS. If COMMCAPS=AUT, then CAPS On or  *
*                         Off will be detected.                       *
*        Aug 06,2024 RPr: Multiply 'D' line commands supported.       *
*        Aug 10,2024 RPr: After a succesful 'F' primary command,      *
*                         place cursor on the line where the string   *
*                         is found if on the same screen.             *
*        Sep 28,2024 RPr: Keep inserted line if a blank is added.     *
*        Nov 14,2024 RPr: Allow primary command CUT with MM-MM line   *
*                         commands and give options SAVE, CANCEL or   *
*                         END if data changed and AUTOSAVE=N          *
*        Dec 01,2024 RPr: Invoke always the loader RPFEDITL, even     *
*                         the input is empty or current workspace     *
*                         is edited.                                  *
*        Dec 03,2024 RPr: Primary command COPY along with line command*
*                         'A' supported.                              *
*        Dec 14,2024 RPr: If a additional F is given immediately      *
*                         after 'Bottom of data reached' the F will   *
*                         start from the beginning.                   *
*                                                                     *
*------------------------------------------ (C)-2025 Skybird Systems -*
         SPACE 2
RPFEDIT  CSECT
RPFEDIT  AMODE 31                                                @rpa01
RPFEDIT  RMODE 24                                                @rpa01
         COPY  SYSVARS
         SAVE  (14,12),,*              Save callers registers
         LR    R12,R15                 Our base
         LA    R10,2048(,R12)          2nd base register
         LA    R10,2048(,R10)
         LA    R9,2048(,R10)           3rd base register
         LA    R9,2048(,R9)
         USING RPFEDIT,R12,R10,R9      We need 3 base registers
         USING COMMAREA,R11
         L     R11,0(,R1)              Address RPFCOMM in register 11
         L     R3,COMMCOLS             Width of screen
         LA    R3,SCRLL-6(,R3)         + SBA's + SF's + attr + SA + clr
*                                      See LNE5 in WORKAREA and SCRLNE
         L     R0,COMMSIZE             # lines on screen
         BCTR  R0,0                    Minus 2 header lines but obtain
*                           1 extra screen line to avoid an 0C4 abend
         MR    R2,R0                   ((width-8)+15)*(lines-2)
         LA    R1,WORKL                Size of working stor. - LNE5
         LA    R3,0(R1,R3)             Total size to allocate
         GETMAIN R,LV=(3)              Allocate dynamic screen area
         ST    R1,8(,13)               Forward pointer
         ST    R13,4(,R1)              Backward pointer
         LR    R13,R1                  Load this save area
         USING WORKAREA,R13            Address screen area
         ST    R3,TOTSIZE              Save this size
         B     START                   Branch over constants
         DC    CL8'&SYSDATE',C' ',CL8'&SYSTIME'
START    MVC   PROFTNUM,=CL10'Numbered:'
         MVC   PROFTCOB,=CL7'Cobol:'
         MVC   PROFTCAP,=CL6'Caps:'
         MVC   PROFTNUL,=CL7'Nulls:'
         MVC   PROFTAUT,=CL10'Autosave:'
         XC    CHGCTR,CHGCTR           Change counter
         XC    COMRFLNE,COMRFLNE       Init line where 'string' found
         MVI   SW,0                    Clear switch upon entry
         XC    DELTBLE,DELTBLE         Clear the D linecmds table
         LA    R0,SCREEN               Output screen
         LA    R1,SCREENL              Length
         L     R2,=V(SCREENTX)         Input
         LR    R3,R1                   Same length as output
         MVCL  R0,R2                   And move the contents
         ST    R11,PARMLST1            Save in PARMLIST for subroutines
         MVC   COMMNUM,=CL3'ON'        Default line numbered
         XC    DATOFFS,DATOFFS         Default LEFT aligned
         MVC   COMMEMM,=C'00'          Set EBCDIC form of ISPF mm to 0
         L     R15,=V(SRCHLINE)        Search linenumber routine
         ST    R15,EPSRCH              Save entry point in RPFCOMM
*
         ST    R11,PARMFLD             Parameter for DSNPARS
         LA    R1,COMMDSN              DSN w/o Prefix or with quotes
         ST    R1,PARMFLD+4
         LA    R1,COPYDSN              DSN with Prefix and w/o quotes
         ST    R1,PARMFLD+8
         L     R15,EPDSNPA             Routine address
         LA    R1,PARMFLD              Parameter
         BALR  R14,R15                 Execute
         NI    COMMFLG3,255-$COMAPND   Set APPEND flag off
*---------------------------------------------------------------------*
*                                                                     *
*        Flag $COMAPND will be set if an APPEND command is given.     *
*        Here the flag will be reset upon entry of RPFEDIT.           *
*                                                                     *
*---------------------------------------------------------------------*
         NI    COMMFLG1,255-$COMCOB    Set COBOL flag default off
         MVC   AUTO,COMMAUTO           Copy AUTOSAVE indicator
         MVI   MSG5,C'-'               Clear
         MVC   MSG5+1(L'MSG5-1),MSG5        message
         MVI   SCR5EXT,C'-'            Clear
         MVC   SCR5EXT+1(L'SCR5EXT-1),SCR5EXT  header
         NI    COMMFLG4,255-$COMCHGD   Reset changed flag only
         XC    LFLAGS,LFLAGS           Reset flgs pending linecmds
         XC    LLINES,LLINES           Reset linenumbers
         MVC   SCR5TXT(1),COMMCMD      Move EW or EWA
         LM    R0,R1,COMMSIZE          Pick screen dimensions
*---------------------------------------------------------------------*
*
*        Here the record length of the input file will be tested
*        against the width of the screen.
*        If the record fits in the screen, flag $WIDE will be set.
*
*------------------------------------------ (C)-2025 Skybird Systems -*
*
         LR    R14,R1                  Duplicate screen width
         L     R3,COMMRECL             Pickup record length input
         SR    R14,R3                  Screen - record length
         C     R14,=F'8'               Screen at least 8 bytes wider?
         BL    START11                 No: LRECL > screen width-8
         OI    SW,$WIDE                Indicate wide screen
*                                      So, LEFT and RIGHT primary
*                                      commands are disabled.
         ST    R3,DATALEN              Length of data portion in scr.
*                                      (= record length)
         B     START19                 And branch
*---------------------------------------------------------------------*
*
*        In this section the LRECL > screen width.
*        Calculate the size of the data portion in the screen.
*
*------------------------------------------ (C)-2025 Skybird Systems -*
START11  DS    0H
         LR    R3,R1                   Screen width
         S     R3,=F'8'                Minus 8
         ST    R3,DATALEN              Length of data portion in scr.
*                                      is screen width - line number
*                                      - 2x Attr. bytes.
START19  DS    0H
         LA    R5,SCRLL(,R3)           Adjust SBA + 3x X'1Dxx' (SF+ATR)
         ST    R5,DATALINE             + SA + REVERSE + SA + HDEFAULT
*                                      + 6 bytes linenumber
*        #LINES  = A halfword containing the number of data lines
*                  on the screen. That is number of rows on the
*                  screen minus 2 (the header lines).
*                  The data lines is including the optional =COLS>
*                  line and/or the optional =PROF> line.
*        DATALEN = the length of the data portion in the screen.
*                  This is the screen width - 8 or equal to
*                  the record length of the input if the record
*                  fits on the screen
*       DATALINE = The length of the entire screen line. That is:
*                  SBA of line number (X'11xxxx')        - 3 bytes +
*                  Attribyte of line number (X'1Dxx')    - 2 bytes +
*                  3270 SA before line number (X'2842Fx')- 3 bytes +
*                  Line number                           - 6 bytes +
*                  SA    (X'2842F4') - Green             - 3 bytes +
*                  Attribute data line (X'1Dxx')         - 2 bytes +
*                  Data portion with length = DATALEN              +
*                  End attribute byte X'1DF8' (INTHIGH)  - 2 bytes
*                  See SCRLNE DSECT.
*        DATOFFS = the offset in the data portion in the workspace
*                  This field will be set to an offset if a RIGHT or
*                  a COBOL ON command is given. Otherwise the offset=0
*                  If the complete record fits on the screen, the
*                  offset (DATOFFS) is always 0.
*       COMWRKEN = the length of the entry in the workspace.
*                  consisting of the 6 byte line number, 2 bytes flags
*                  and max. 255 bytes data (the record length of the
*                  input). This field is located in RPFCOMM
*
         LA    R3,2
         SR    R0,R3                   Get data display line count
         STH   R0,#LINES               Save it
         MH    R5,#LINES               Calculate length
         LA    R5,SCR5LEN(,R5)         Add length screen header
         ST    R5,TPUTLEN              Save the TPUT length of data
         L     R1,COMMRECL             LRECL of source
         LA    R1,8(,R1)               + 8 make workspace entry
         ST    R1,COMWRKEN             And save
         LR    R1,R0                   Save register
         MH    R1,COMWRKEN+2           * length workspace entry
         STH   R1,SCRLEN               Length of #lines x L'workspace
*---------------------------------------------------------------------*
*                                                                     *
*        Setup the screen with proper Set Buffer addresses,           *
*        because the line length of the screen can vary               *
*        That depends of the model of the screen                      *
*                                                                     *
*------------------------------------------ (C)-2025 Skybird systems -*
         L     R3,COMMCOLS             Pickup screen width
         LR    R1,R3                   Copy to Register 1
         LA    R0,24                   Get adjustment size         @gp1
         SR    R1,R0                   Get the right column        @gp1
         LA    R0,1                    Row 1
         L     R15,=V(RCTOSBA)         Routine
         CALL  (15)                    Convert
         STCM  R0,3,SBA5#0+1           and save 'R01,C56+'
         STCM  R0,3,SBA2#0+1           r01,c56+ is msg field address
*
         LA    R0,2                    Row 2
         LA    R1,1                    Column 1 (command field)
         L     R15,=V(RCTOSBA)         Routine
         CALL  (15)                    Convert
         STCM  R0,3,SCR5R2C1+1         r2,c1
         STCM  R0,3,SCR2R2C1+1         r2,c1
*
         LA    R0,1                    Row 1
         LA    R1,1                    Column 1
         L     R15,=V(RCTOSBA)         Routine
         CALL  (15)                    Convert
         STCM  R0,3,R1C1+1             r01,c01 in SCR5TXT
         STCM  R0,3,SCR2TXT+3          r01,c01 in SCR2TXT
*
         LA    R0,2                    Row 2
         LA    R1,9                    Column 9 (command field)
         L     R15,=V(RCTOSBA)         Routine
         CALL  (15)                    Convert
         STCM  R0,3,SCR5ADDR+1         R02,C09 is default cursor addr
         STCM  R0,3,SBACMD             r2,c9 is return SBA of cmd line
*
         LA    R0,2                    Row 2
         LR    R1,R3                   Pickup screen width
         SH    R1,=H'16'               Point to BNDS SBA
         L     R15,=V(RCTOSBA)         Routine
         CALL  (15)                    Convert
         STCM  R0,3,SBABNDS            r2,c64+ is return SBA BNDS
*
         LA    R0,2                    Row 2
         LR    R1,R3                   Pickup screen width
         SH    R1,=H'3'                Point to Scroll SBA
         L     R15,=V(RCTOSBA)         Routine
         CALL  (15)                    Convert
         STCM  R0,3,SBASCRL            r2,c77+ is return SBA Scroll
*
         LA    R0,2                    Row 2
         LR    R1,R3                   Pickup screen width
         SH    R1,=H'21'               Point SBA before 'BNDS'
         L     R15,=V(RCTOSBA)         Routine
         CALL  (15)                    Convert
         STCM  R0,3,SBA5SCP+1          And set in screen
*
         LA    R3,LNE5                 Point to data area in screen
         USING SCRLNE,R3               Use DSECT
         LA    R4,3                    First data line is line 3
         LA    R5,SCRSBA               Test SBA's in CNVIN routine
         LH    R2,#LINES               # data lines
SCR03    DS    0H
         LR    R0,R4                   Parameter line
         LA    R1,1                    Parameter column (1)
         L     R15,=V(RCTOSBA)         Routine
         CALL  (15)                    Convert
         MVI   SCRLSBA1,COMMSBA        An SBA
         STCM  R0,3,SCRLSBA1+1         And Save
*
         LR    R0,R4                   Parameter line
         LA    R1,2                    Parameter column (2)
         L     R15,=V(RCTOSBA)         Routine
         CALL  (15)                    Convert
         MVI   0(R5),COMMSBA           Indeed ....
         STCM  R0,3,1(R5)              .... an SBA (rxx,c02)
*
         LR    R0,R4                   Parameter line
         LA    R1,9                    Parameter column (9)
         L     R15,=V(RCTOSBA)         Routine
         CALL  (15)                    Convert
         MVI   3(R5),COMMSBA           Indeed
         STCM  R0,3,4(R5)                   an SBA (rxx,c09)
*
         LA    R4,1(,R4)               Increase line number
         L     R14,DATALINE            Next line
         LA    R3,0(R3,R14)                      in screen
         LA    R5,6(,R5)               Next entry in table
         BCT   R2,SCR03                And do complete screen
         DROP  R3                      Kill addr. of SCR5LINE
*
*        end of screen setup           ------------------------------*
*
         AIF   (&SVS).SVS1
         USING PSA,0
         L     R1,PSATOLD              Current TCB
         L     R14,TCBRBP-TCB(,R1)     Current RB
         USING RBBASIC,R14
         ICM   R1,7,RBCDE1             Current CDE
         USING CDENTRY,R1
         MVC   PGM,CDNAME              Our program name
         DROP  R0,R1,R14
.SVS1    ANOP
         XC    BNDSNUM,BNDSNUM         Build default BNDS value
         L     R15,=V(BNDS)            Set BNDS ...
         BALR  R14,R15                             into screen
         MVC   COMMFSCR,COMWSTRT
         MVC   SCROLL5+06(4),=C'CSR '  Default scroll on CSR
         MVC   SCROLNUM(4),=C'CSR '    21 --> 97 lines
         MVC   NUMFLD(8),COMMBR        Member into NUMFLD
         TR    NUMFLD(8),COMTRTAB      Translate unprints in membername
         MVC   SAVEMBR,NUMFLD          Save xlated membername
         MVI   SCR5HDR,C' '            Blank field
         MVC   SCR5HDR+1(L'SCR5HDR-1),SCR5HDR  first before populating
         MVI   SCR5EHDR,C'-'           Hyphen field
         MVC   SCR5EHDR+1(L'SCR5EHDR-1),SCR5EHDR first before popul.
         LA    R14,51                  Length of normal header - 1
         LA    R2,29                  Length of short DSNAME  -1
*
*        If the screen width > 93, the full length of the
*        DSNAME (with member) fits in the screen.
*        On narrow screens (<= 93) the first 30 positions of the
*        DSNAME (+ max 10 positions (member)) will be placed into
*        the header.
*
         CLC   COMMCOLS,=F'94'         Screen width at least 94?
         BL    START21                 No: do not extend header line
         MVI   SCR5EHDR,C' '           Blank field
         MVC   SCR5EHDR+1(L'SCR5EHDR-1),SCR5EHDR first before popul.
         LA    R14,75                  Length of extended header - 1
         LA    R2,43                   Length of full DSNAME - 1
START21  DS    0H
         CLC   PGM,=CL8'RPFARCH'       Called by RPFARCH?
         BE    ARCH                Yes: move 'ARCHIVE' instead of DSN
         CLC   PGM(6),=CL6'RPFLIB'     Called by RPFLIBxx?
         BE    LIB                 Yes: move 'Master' instead of DSN
         EX    R2,EXMVE1               Move DSNAME into header
         B     NOARCH                  Branch
LIB      MVC   SCR5HDR(16),=C'LIBRARIAN-Master' move this in header
         B     NOARCH                  and branch
ARCH     MVC   SCR5HDR(7),=C'Archive'  Move 'archive' in header
NOARCH   EX    R14,EXTRT1              Stop at first blank
         BNZ   START22                 And carry if not all blanks
         LA    R1,SCR5HDR              Start of SCR5HDR in register 1
START22  DS    0H
         CLI   NUMFLD,C' '             No member (sequential data set)?
         BE    START23                 Yes: done
         MVI   0(R1),C'('              For member
         MVC   1(8,R1),NUMFLD          Move member name in header
         EX    R14,EXTRT1              Stop at first space
         MVI   0(R1),C')'              Close parenthese after member
START23  DS    0H
*
*        Call the loader RPFEDITL to read the data set or member
*        into the EDIT workspace and process the return code
*        of RPFEDITL.
*
         BAL   R14,LOAD                Invoke RPFEDITL
         B     *+4(15)                 Initiate branchlist
         B     INIT                    Rc=00, continue
         B     RETURN                  Rc=04, workspace truncated
         B     INIT                    Rc=08, unused
         B     RETURN                  Rc=12, I/O error
         B     RETURN                  Rc=16, data set/member in use
*
INIT     DS    0H
         MVC   SCR5STA(6),=C'View  '   Set View mode
         MVC   COLOR,=AL3(TURQ)        Lines are turquoise in VIEW
         TM    COMMFLG4,$COMVIEW       Editor is in VIEW mode?
         BO    INIT2                   Yes: ready
         MVC   SCR5STA(6),=C'Edit  '   Set Edit mode in header
         MVC   COLOR,=AL3(GREEN)       Lines are green in EDIT mode
         TM    COMMFLG1,$COMINPT       Editor is in Input mode?
         BZ    INIT2                   No: ready
         MVC   SCR5STA(6),=C'Input '   Set Input mode in header
INIT2    DS    0H
         XC    REP5,REP5               Clear reply area
         LA    R14,49                  Length of normal header - 1
         CLC   COMMCOLS,=F'94'         Screen width at least 94?
         BL    *+8                     No: do not extend header line
         LA    R14,75                  Length of extended header - 1
         EX    R14,EXTRT1              Find first blank
         BZ    TEST13                  No blanks: should not happen
         LA    R1,1(,R1)               Set R1 to beginning of VV.MM in
*                                      header, R1 is set by TRT
         CLI   COMMBR,C' '             No member supplied?
         BE    TEST07                  Yes: do not set vv:mm in header
         ST    R1,ADDRVM               Save position of vv.mm
         XR    R4,R4                   Clear register 4
         XR    R3,R3                   Clear register 3
         IC    R4,COMMVM               ISPF/RPF vv byte
         IC    R3,COMMVM+1             ISPF/RPF mm byte
         LTR   R4,R4                   Present?
         BNZ   TEST03                  Yes: convert and set in header
         LA    R4,1                    Initial value 01. ---
         XR    R3,R3                   --- 00
         B     TEST05                  And branch
EXTRT1   TRT   SCR5HDR(0),COMSKPNS     << executed >>
EXMVE1   MVC   SCR5HDR(0),COPYDSN      << executed >>
TEST03   DS    0H
         CVD   R4,DBW                  Make Packed decimal
         OI    DBW+7,X'0F'             Clear sign
         UNPK  0(2,R1),DBW             Unpack ISPF vv
         MVI   2(R1),C'.'              Period between vv and mm
         CVD   R3,DBW                  Make Packed decimal
         OI    DBW+7,X'0F'             Clear sign
         UNPK  3(2,R1),DBW             Unpack the result
         LA    R3,1(,R3)               Increase with 1
         CLM   R3,1,=X'64'             > 99?
         BL    TEST05                  No: good
         XR    R3,R3                   And set ISPF/RPF mm to 0
TEST05   DS    0H
         CVD   R3,DBW                  Make Packed decimal
         OI    DBW+7,X'0F'             Clear sign
         UNPK  COMMEMM,DBW             Unpack the result
         LA    R1,6(,R1)               Point after vv:mm
TEST07   DS    0H
         MVC   PROFCAPS,=CL3'ON'       Set default CAPS=ON
         CLC   =C'AUT',COMMCAPS        CAPS=AUT?
         BE    TEST08                  No: do not change
         MVC   PROFCAPS,COMMCAPS       Set default to COMMCAPS
TEST08   MVC   PROFNULL,=CL3'OFF'      Nulls = Off in profile line
         CLC   =C'OFF',COMMCAPS        ASIS mode?
         BNE   *+8                     No: carry
         OI    SW,$ASIS                Set ASIS mode
         NI    SW,255-$NULLS           Default nonulls
         CLC   =C'YES',COMMNUL         NULLS on?
         BNE   TEST09                  No: branch
         OI    SW,$NULLS               Else mark NULLS
         MVC   PROFNULL,=CL3'ON'       Nulls = ON in profile line
TEST09   DS    0H
         MVC   PROFCOB,=CL3'OFF'       Default Cob=OFF in profile line
*
*        Replace eventually trailing blanks in SCR5HDR with '-'
*
         LA    R1,SCR5HDR+48           Point to end of header
         LA    R4,36                   Loop max. 36 times
         CLC   COMMCOLS,=F'94'         Screen at least 94 width?
         BL    TEST11                  No: replace blanks in normal hdr
         LA    R1,SCR5EHDR+25          Point to end of extended hdr
         LA    R4,61                   Loop max. 61 times
TEST11   DS    0H
         CLI   0(R1),C' '              Blank found?
         BNE   TEST13                  No: done
         MVI   0(R1),C'-'              Replace by hyphen
         BCTR  R1,0                    Previous position
         BCT   R4,TEST11               Loop
TEST13   DS    0H
         TM    COMMFLG1,$COMINPT       Are we in input mode?
         BO    TEST29                  Yes: do not test .....
         TM    COMMFLG3,$COMAPND       Leave COBOL flag as is in ...
         BO    TEST14                  ... APPEND mode
         OI    COMMFLG1,$COMCOB        Set COBOL flag in RPFCOMM
         MVC   PROFCOB,=CL3'ON'        Cobol: ON in profile line
TEST14   L     R4,COMWSTRT             First record in workspace
         L     R6,COMWRKEN             Length of workspace entry
         L     R7,COMMLAST             Last record in workspace
         LA    R7,1(,R7)               Point to last byte
*
*        Test the data in the EDIT workspace if invalid characters
*        If detected, set the $XLATED flag.
*        Test the data on lower case characters (only the alphabetics)
*        and set the $ASIS flag.
*        And test the if the linenumers in col 1-6 or the last 8
*        columns are numeric. If all lines in 1-6 are numeric set
*        the Editor in COBOL mode.
*        If all lines in the last 8 columns are numeric set the
*        Editor in standard NUM mode.
*        In all other cases set the Editor in standard NONUM mode.
*
TEST15   DS    0H
         L     R14,COMMRECL            Pickup LRECL
         BCTR  R14,0                   Minus 1 for EX
         USING WORKSPCE,R4             Addres DSECT over Workspc record
         EX    R14,TESTTRT1            Test on unprintables
         BZ    TEST17                  No: good
         OI    SW,$XLATED              Mark unprintables present
TEST17   DS    0H
         CLC   =C'AUT',COMMCAPS        Automatic CAPS/ASIS?
         BNE   TEST19                  No: leave caps
         EX    R14,TESTTRT2            Test on 'ASIS' mode
         BZ    TEST19                  Branch if not
         OI    SW,$ASIS                Indicate 'ASIS' mode
         B     TEST19                  and test if they are numeric
TESTTRT1 TRT   WORKDATA(0),COMTRTST    << executed >>
TESTTRT2 TRT   WORKDATA(0),COMTRTXT    << executed >>
TEST19   DS    0H
         CLC   =C'OFF',COMMNUM         Already in NONUM mode?
         BE    TEST25                  Yes: no numeric test needed
         TM    COMMFLG4,$COMVB         Record format Variable?
         BNO   TEST20                  No: branch
         NI    COMMFLG1,255-$COMCOB    Reset COBOL flag in RPFCOMM
         MVC   NUMFLD,WORKDATA         Move first 8 bytes into NUMFLD
         L     R15,=V(NUMTST)          EP of NUMTST routine
         CALL  (15)                    Execute numeric test
         LTR   R15,R15                 Are the numbers OK?
         BZ    TEST25                  Yes: Leave the data numbered
         MVC   COMMNUM(3),=CL3'OFF'    Set editor in NONUM mode if V(B)
         B     TEST25                  Next line in workspace
TEST20   DS    0H
         TM    COMMFLG1,$COMCOB        COBOL flag already reset?
         BNO   TEST22                  Yes: do not test anymore
         CLC   COMMRECL,=F'80'         Card image?
         BE    TEST21                  Yes: test cols 1-6
         NI    COMMFLG1,255-$COMCOB    Reset COBOL flag
         B     TEST22                  and carry
TEST21   DS    0H
         MVC   NUMFLD+6(2),=C'00'      Clear NUMFLD
         MVC   NUMFLD(6),WORKDATA      Test columns 1-6 (Cobol numbers)
         L     R15,=V(NUMTST)          EP of NUMTST routine
         CALL  (15)                    Execute numeric test
         LTR   R15,R15                 Are the numbers OK?
         BZ    TEST22                  Yes: Leave the data numbered
         NI    COMMFLG1,255-$COMCOB    Reset COBOL flag in RPFCOMM
TEST22   DS    0H
         L     R14,COMMRECL            LRECL of data set or member
         S     R14,=F'8'               Minus 8 (Length line number)
         LA    R15,WORKDATA            Point to data portion in workspc
         LA    R14,0(R14,R15)          Point to last 8 pos. data port.
         MVC   NUMFLD,0(R14)           Move last 8 bytes into NUMFLD
         L     R15,=V(NUMTST)          EP of NUMTST routine
         CALL  (15)                    Execute numeric test
         LTR   R15,R15                 Are the numbers OK?
         BZ    TEST25                  Yes: Leave the data numbered
         TM    COMMFLG1,$COMCOB        COBOL flag already reset?
         BO    TEST25                  Yes: do not reset NUMBERED
         MVC   COMMNUM(3),=CL3'OFF'    Else set editor in NONUM mode
TEST25   DS    0H
         BXLE  R4,R6,TEST15            Test all numbers in workspace
         DROP  R4
*                                      End loop
         TM    SW,$ASIS                Mode = 'ASIS'?
         BNO   TEST27
         MVC   PROFCAPS,=CL3'OFF'      Move Caps: OFF in profile line
TEST27   DS    0H
         TM    COMMFLG1,$COMCOB        COBOL flag in RPFCOMM set?
         BO    TEST28                  Yes: do not reset Cob phrase
         MVC   PROFCOB,=CL3'OFF'       Move Cobol: OFF in profile line
TEST28   DS    0H
         TM    SW,$XLATED              Unprintables detected?
         BNO   TEST29                  No: continue with normal EDIT
         MVC   MSG5,MSG3TXT            Msg: Invalid chars xlated
TEST29   DS    0H
         ICM   R2,7,COMMNUM            Save COMMNUM
         TM    COMMFLG1,$COMINPT       New data set/member?
         BNZ   *+10                    Yes: renumber with data numbers
         MVC   COMMNUM,=CL3'OFF'       Renumber only sequence numbers
         L     R15,=V(NUMBER)          Renumber workspace
         CALL  (15)                    Run the routine
         STCM  R2,7,COMMNUM            Restore COMMNUM
         NI    COMMFLG1,255-$COMINPT   Reset INPUT flag in RPFCOMM
         XC    BNDSNUM,BNDSNUM         Build default BNDS command
         L     R15,=V(BNDS)            Set BNDS ...
         BALR  R14,R15                             into screen
         TITLE 'Process the primary commands'
*---------------------------------------------------------------------*
*                                                                     *
*        In these routines with labels starting with VIEW, the        *
*        screen will be read (in CNVIN) and the primary commands will *
*        be parsed. After parsing, register 1 will be loaded with     *
*        a VIEWxxx branch entry (see table CMDTBLE) to execute the    *
*        parsed primary command.                                      *
*                                                                     *
*        First check the DELETE table if there are lines to delete.   *
*        If present, delete these lines first in reverse order.       *
*                                                                     *
*------------------------------------------ (C)-2025 Skybird Systems -*
VIEW     DS    0H
         CLI   DELTBLE,0               Lines to DELETE?
         BE    VIEW02                  No: carry
         LA    R1,DELTBLE+114          Last entry in table to
*                                      delete lines in reverse
         LA    R14,20                  Max 20 lines in table
VIEW00   CLI   0(R1),0                 Empty?
         BE    VIEW01                  Yes: check previous entry
         MVI   BUFFER,C' '             Clear first the ...
         MVC   BUFFER+1(L'BUFFER-1),BUFFER   ... buffer
         MVC   BUFFER(4),=C'DEL '      Move DEL command
         MVC   BUFFER+4(6),0(R1)       Move line numberr
         XC    0(6,R1),0(R1)           Clear the entry
         L     R15,=V(DEL)             Delete routine
         CALL  (15)                    Delete in reverse order
         B     VIEW
VIEW01   SL    R1,=F'6'                Previous entry
         BCT   R14,VIEW00
*
VIEW02   XC    COMMPRM,COMMPRM         Clear COMMPRM field
         LH    R0,#LINES               Screen lines (21/22->96/97)
         TM    COMMFLG1,$COMCOLS       Scale line present?
         BNO   *+6                     No: leave # lines
         BCTR  R0,0                    Else decrease # lines with 1
         TM    COMMFLG2,$COMPROF       Profile line present?
         BNO   *+6                     No: leave # lines
         BCTR  R0,0                    Else decrease # lines with 1
         CLC   COMMFSCR,COMWSTRT       Top of data line is first line?
         BNE   *+6                     No: leave # lines
         BCTR  R0,0                    Else decrease # lines with 1
         CVD   R0,DBW                  Make decimal
         UNPK  SCRPAGE-1(3),DBW+6(2)   Unpack
         OI    SCRPAGE+1,X'F0'         Remove sign
         MVC   SCRPAGE+2(2),=C'  '
         SRL   R0,1                    Divide by 2
         CVD   R0,DBW                  Make #lines/2 decimal
         UNPK  SCRHALF-1(3),DBW+6(2)   Unpack
         OI    SCRHALF+1,X'F0'         Remove sign
         MVC   SCRHALF+2(2),=C'  '
         BAL   R14,SETCOL              Postition display on right col.
         BAL   R14,CNVOUT              Build screen and write
         XC    SCR5SBAL,SCR5SBAL       Destroy SBA of line to hilite
*
         BAL   R14,CNVIN               Read the data from the screen
*                                      and update the changed lines
*                                      in the EDIT workspace
         B     VIEWCONV(15)            Process the branchlist
VIEWCONV B     VIEW03                  Good
         B     VIEW                    No input received
         B     VIEWERRA                Conversion failed
VIEW03   DS    0H
         CLI   AIDBYTE,X'7D'           Enter key?
         BE    VIEW07
         CLI   AIDBYTE,X'60'           No AID byte?
         BE    VIEW                    If so, redisplay screen
         LA    R1,REP5                 Point to command in screen
         L     R15,=V(PFK)             Scan PFK
         CALL  (15)
         B     VIEW05(R15)             Initiate branchlist
VIEW05   B     VIEW07                  Rc = 0, CON=N
         B     VIEW                    Rc = 4, CON=Y, set in cmd buffer
         B     VIEWERRB                Rc = 8, PFK not defined
         B     VIEWERRD                Rc = 12, PFK definition invalid
VIEW07   DS    0H
         XC    REP5,REP5               Clear reply area
         LA    R1,BUFFER               Address of command
         LA    R14,L'BUFFER            Max length of command
VIEW08   DS    0H
         CLI   0(R1),C' '              Blank?
         BNE   VIEW13                  No: command present, carry
         LA    R1,1(,R1)               Next pos. in command buffer
         BCT   R14,VIEW08              Loop.
*
*        If no command is entered, place the cursor in the first
*        data position (column 9,16,18) of the next row if the cursor
*        is present in the data and highlight the line number. To
*        arrange this set SCR5SBAL, which is compared in the
*        CNVOUT routine.
*
         L     R15,=V(CSR)
         BALR  R14,R15                 Convert cursor addr. in row/col
         LTR   R15,R15                 Row found?
         BNZ   VIEW                    No: re-display changed screen
         L     R1,0(,R1)               Pick-up row number
         LA    R2,1(,R1)               + 1 to set cursor in next row
         C     R2,COMMSIZE             Beyond last line on screen?
         BH    VIEW                    Yes: do not alter cursor pos.
         LR    R0,R2                   Row number
         LA    R1,9                    Set column to 9
         TM    COMMFLG4,$COMVB         Variable length data?
         BNO   VIEW09                  No: test others
         CLC   =CL3'OFF',COMMNUM       Numbered variable data?
         BE    VIEW09                  No: test others
         ICM   R14,15,DATOFFS          Look if RIGHT command given
         BNZ   VIEW11                  Yes: leave dft column to 9
         LA    R1,17                   Set cursor to col 17 (after nbr)
         B     VIEW11                  Ready
VIEW09   DS    0H
         TM    COMMFLG1,$COMCOB        COBOL mode?
         BNO   VIEW11                  No: set column to 09 in std mode
         TM    SW,$WIDE                Screenwidth > 88 in COBOL?
         BNO   VIEW11                  No: leave the cursor on col.9
         LA    R1,16                   Else set cursor to col.16
VIEW11   DS    0H
         L     R15,=V(RCTOSBA)         Routine
         CALL  (15)                    Convert
         STCM  R0,3,SCR5ADDR+1         Set in screen
         LR    R0,R2                   Row number
         LA    R1,1                    Column 1
         L     R15,=V(RCTOSBA)         Routine
         CALL  (15)                    Convert
         STCM  R0,3,SCR5SBAL           Save SBA line # in same line
         B     VIEW                    Re-display changed screen
*
VIEW13   DS    0H
         LA    R1,BUFFER               Second parameter
         ST    R1,PARMLST2             Set in second prm (1st=RPFCOMM)
         LA    R1,PARMLST1             Parm for CMDSCAN
         L     R15,=V(CMDSCAN)
         BALR  R14,R15                 Scan the primary commands.  @rp6
         B     VIEWSCAN(15)            Go to branchlist            @rp6
VIEWSCAN B     VIEWEX                  Exec command                @rp6
         B     VIEWERR3                Command not found           @rp6
         B     VIEWRTRV                Command retrieved           @rp6
         B     VIEWERR4                Nothing to RETRIEVE         @rp6
VIEWEX   DS    0H                                                  @rp6
*                                      A(Routine) in Reg.1 from CMDSCAN
         LR    R14,R1                  Pickup routine address
         BR    R14                     and execute primary command
*---------------------------------------------------------------------*
*        Primary command: 'RETRIEVE'                                  *
*---------------------------------------------------------------------*
VIEWRTRV DS    0H                                                  @rp6
         MVC   REP5,0(R1)              Move gotten command         @rp6
         B     VIEW
*---------------------------------------------------------------------*
*        Primary command: 'I' (input) or 'R' (repeat)                 *
*---------------------------------------------------------------------*
VIEWINP  DS    0H
         L     R15,=V(INPUT)           Execute I or R primary command
         CALL  (15)                    routine
         B     VIEW
*---------------------------------------------------------------------*
*        Primary command: 'DOWN'                                      *
*---------------------------------------------------------------------*
VIEWFORW DS    0H
         MVI   BUFFER,C' '             Blank
         MVC   BUFFER+1(L'BUFFER-1),BUFFER   buffer
         MVI   BUFFER,C'L'             Create 'L +n' command
         CLC   SCROLNUM(4),=C'CSR '    Scroll on cursor location?
         BE    VIEWFOR2                Yes: calculate # of scroll lines
         MVI   BUFFER+2,C'+'           Move sign
         MVC   BUFFER+3(4),SCROLNUM    Move number of lines
         B     VIEWLINE                Execute Line command
VIEWFOR2 L     R15,=V(CSR)
         CALL  (15)                    Convert cursor addr. in row/col
         LTR   R15,R15                 Rc= 0?
         BZ    VIEWFOR4                Yes: line found
VIEWFOR3 DS    0H
         MVI   BUFFER+2,C'+'           Move Scroll sign
         B     VIEWSCRO                Default Scr.value (1 SCRN - 1)
VIEWFOR4 DS    0H
         MVC   BUFFER+2(8),NUMFLD      Line to where we scroll
         B     VIEWLIN6                Execute 'L' (Locate) command
*------- ----- ----------------------- Scroll default (scroll CSR)
VIEWSCRO DS    0H
         LH    R1,#LINES               Pick number of lines on screen
         BCTR  R1,0                    Minus 1 line overlap
         TM    COMMFLG1,$COMCOLS       Scale present?
         BNO   *+6                     No: leave so
         BCTR  R1,0                    1 line less
         TM    COMMFLG2,$COMPROF       Profile line present?
         BNO   *+6                     No: leave so
         BCTR  R1,0                    1 line less
         CLC   COMMFSCR,COMWSTRT       *** top of data *** present?
         BNE   *+6                     No: leave so
         BCTR  R1,0                    1 line less
         CVD   R1,DBW                  Decimal
         UNPK  BUFFER+3(4),DBW         EBCDIC
         OI    BUFFER+6,X'F0'          Clear sign
         B     VIEWLINE                Execute LINE command
*---------------------------------------------------------------------*
*        Primary command: 'SUBMIT' with alias 'SUB'                   *
*---------------------------------------------------------------------*
VIEWSUB  DS    0H
         MVC   COMMPRM(12),=C'INP=WORKSPCE' Tell RPFSUB to use the
*                                      EDIT workspace
         L     R15,EPSUB               Entry Point RPFSUB
         MVC   MSG5,MSG2TXT            Set message already in screen
         LA    R1,PARMLST1             Parameter list
         LA    R0,MSG5+7               2nd parameter (Jobname to recv.)
         ST    R0,PARMLST2             Save
         BALR  R14,R15                 Link to RPFSUB              @rpo
         B     VIEWSUBX(R15)
VIEWSUBX B     VIEWSUB1                Job xxxxxxxx submitted
         B     VIEWSUB2                SUBMIT failed
         B     VIEWSUB3                No JOB statement
         B     VIEWSUB4                Not a card image data set
         B     VIEWSUB1                Should no happen
VIEWSUB1 B     VIEW                    Display screen msg already there
VIEWSUB2 MVC   MSG5,ERRITXT            Msg: Submit failed
         B     VIEW                    Display screen
VIEWSUB3 MVC   MSG5,ERRATXT            Msg: No JOB statement found
         B     VIEW                    Display screen
VIEWSUB4 MVC   MSG5,ERRFTXT            Msg: No card image data set
         B     VIEW                    Display screen
*---------------------------------------------------------------------*
*        Primary command: 'UP'                                        *
*---------------------------------------------------------------------*
VIEWBACK DS    0H
         MVI   BUFFER,C' '             Blank
         MVC   BUFFER+1(L'BUFFER-1),BUFFER   buffer
         MVI   BUFFER,C'L'             Create 'L -n' command
         CLC   SCROLNUM(4),=C'CSR '    Scroll from cursor location?
         BE    VIEWBAC2                Yes: try to find cursor
         MVI   BUFFER+2,C'-'           Create LINE command
         MVC   BUFFER+3(4),SCROLNUM    Move # lines to scroll
         B     VIEWLINE                Execute LINE command
VIEWBAC2 L     R15,=V(CSR)             Try to find cursor
         CALL  (15)
         LTR   R15,R15                 Rxx,Cxx of cursor found?
         BZ    VIEWBAC4                Yes: scroll from cursor location
         MVI   BUFFER+2,C'-'           Move scroll sign
         B     VIEWSCRO                Scroll default
VIEWBAC4 DS    0H
         LA    R1,NUMFLD+2             PARM for SRCHLINE
         L     R15,EPSRCH              Load Entry point SRCHLINE
         BALR  R14,R15                 Try to find line
         LTR   R15,R15                 Line found?
         BNZ   VIEWERRC                No: give error message
         LR    R2,R1                   Address of found line in reg.
         XR    R4,R4                   Clear register 4
         LH    R5,#LINES               # lines on screen (22 -> 97)
         BCTR  R5,0                    Minus 1
         M     R4,COMWRKEN             Multiply by workspc ent. length
         SLR   R2,R5                   Back number of lines
         CL    R2,COMWSTRT             Before COMWSTRT?
         BNL   VIEWBAC6                No: good
         L     R2,COMWSTRT             Set to first record pointer
VIEWBAC6 DS    0H
         MVC   BUFFER+2(6),OFFSETN2(R2) Move line number
         B     VIEWLIN6                Exec 'L' (Locate) command
*---------------------------------------------------------------------*
*        Primary command: 'C'                                         *
*---------------------------------------------------------------------*
VIEWCHNG DS    0H
         TM    SW,$ASIS                Do we EDIT in Asis mode?
         BO    VIEWCH1                 Yes: do not xlate cmd to upper
         TR    BUFFER,COMTCAPS         Xlate complete cmd to upper
VIEWCH1  DS    0H                                                  @rpd
         LA    R14,BUFFER              Address of buffer with command
         STCM  R14,B'1111',COMMPRM     And save in COMMPRM in RPFCOMM
         L     R15,EPCHNG              Entry point RPFCHNG
         LA    R1,PARMLST1             Parameter (RPFCOMM)
         BALR  R14,R15                 Invoke RPFCHNG
         MVC   MSG5,COMMPRM            Inform user result 'c' cmd  @rpd
         B     VIEWCH2(R15)            Branchlist
VIEWCH2  DS    0H                                                  @rpd
         B     VIEWCH4                 Rc = 0, good
         B     VIEWCH5                 Rc = 4, errors detected
VIEWCH4  DS    0H                                                  @rpd
         B     VIEWSET                 Upd change ctr + redisplay scr
VIEWCH5  DS    0H                                                  @rpd
         MVC   REP5,BUFFER             Repeat command
         B     VIEW                    Display screen with error msg
*---------------------------------------------------------------------*
*        Primary command: 'CUT'                                    @rpb
*        form: 'CUT' in command field combined with the
*                    CT, CB or a pair of CC line commands          @rpb
*---------------------------------------------------------------------*
VIEWCUT  DS    0H                                                  @rpb
         MVI   CUTFLAG,X'FF'           Mark cmd pending
         MVI   LCFLAG,X'FF'            Mark cmd pending
         CLI   DESTFLAG,X'00'          A (destination) pending (not 00)
         BNE   VIEWCUT1                Yes: invalid
         CLI   CREFLAG,X'00'           CREATE/REPLACE command pending?
         BE    VIEWCUT2                No: continue
VIEWCUT1 DS    0H                                                  @rph
         MVC   MSG5,ERR#TXT            Conflicting commands        @rph
         XC    LFLAGS,LFLAGS           Reset flgs pending linecmds
         MVI   RESETFLG,X'FF'          Set Resetflag               @rpk
         XC    LLINES,LLINES           Reset linenumbers           @rpk
         B     VIEW                    And redislay screen         @rph
VIEWCUT2 DS    0H                                                  @rph
         CLI   COPYFLAG,X'FF'          CC .. CC line commands given?
         BE    VIEWCUT3                Yes: process CUT cmd        @rpl
         CLI   MOVEFLAG,X'FF'          MM .. MM line commands given?
         BE    VIEWCUT3                Yes: process CUT cmd        @rpl
         MVI   PENDMSG,C' '            Pending ...
         MVC   PENDMSG+1(L'PENDMSG-1),PENDMSG     message
         MVC   PENDMSG(3),=C'CUT'      Cut command
         MVC   PENDMSG+4(7),=C'pending'            pending
         B     VIEW                    Display screen              @rpl
VIEWCUT3 DS    0H                                                  @rpl
         MVI   BUFFER,C' '             Blank
         MVC   BUFFER+1(L'BUFFER-1),BUFFER   buffer
         MVC   BUFFER(2),=X'FFE4'      Process CUT command
         MVC   BUFFER+3(6),CMNDLIN1    First linenumber
         MVC   BUFFER+10(6),CMNDLIN2   Second linenumber
         B     VIEWCUT4
*---------------------------------------------------------------------*
*        Primary commands: 'CREATE' and 'REPLACE'
*        form: 'CREATE' or 'REPLACE' in the command field
*               combined with CT, CB or a pair of CC line commands.
*----------------------------------------------------------------------
VIEWCRE  DS    0H
         MVI   LCFLAG,X'FF'            Mark cmd pending
         CLI   MOVEFLAG,X'00'          Move cmd pending (not 00)?
         BNE   VIEWCRE1                Yes: invalid
         CLI   DESTFLAG,X'00'          A (destination) pending (not 00)
         BNE   VIEWCRE1                Yes: invalid
         CLI   CUTFLAG,X'FF'           CUT command pending?
         BNE   VIEWCRE2                No: continue
VIEWCRE1 DS    0H
         MVC   MSG5,ERR#TXT            Conflicting commands
         XC    LFLAGS,LFLAGS           Reset flgs pending linecmds
         MVI   RESETFLG,X'FF'          Set Resetflag
         XC    LLINES,LLINES           Reset linenumbers
         B     VIEW                    And redislay screen
VIEWCRE2 DS    0H
         MVI   CREFLAG,X'F0'           Mark CREATE pending
         CLC   =C'REP',BUFFER          REPLACE command?
         BNE   VIEWCRE3                No: do no change CREFLAG
         MVI   CREFLAG,X'0F'           Mark REPLACE pending
VIEWCRE3 CLI   COPYFLAG,X'FF'          Linecmds given?
         BE    VIEWCRE4                Yes: process CREATE command
         MVI   PENDMSG,C' '            Pending ...
         MVC   PENDMSG+1(L'PENDMSG-1),PENDMSG     message
         MVC   PENDMSG(7),=C'CRE/REP'  Primary command CREATE/REPLACE
         MVC   PENDMSG+8(7),=C'pending'            pending
         B     VIEW                    Display screen
VIEWCRE4 DS    0H
         ICM   R1,3,=C'FFC3'           CREATE command execute
         CLC   =C'REP',BUFFER          REPLACE entered?
         BNE   VIEWCRE5                No: CREATE command
         ICM   R1,3,=X'FFD9'           Else: REPLACE command
VIEWCRE5 MVI   BUFFER,C' '             Blank
         MVC   BUFFER+1(L'BUFFER-1),BUFFER   buffer
         STCM  R1,3,BUFFER             Process CREATE/REPLACE command
         MVC   BUFFER+3(6),CMNDLIN1    First linenumber
         MVC   BUFFER+10(6),CMNDLIN2   Second linenumber
         B     VIEWCRE9
*---------------------------------------------------------------------*
*        Primary command: 'PASTE'                                  @rpb
*        form: 'PASTE' in command field combined with the          @rpb
*               TT, BB or A Linecommand                            @rpb
*---------------------------------------------------------------------*
VIEWPST  DS    0H                                                  @rpb
         MVI   PASTEFLG,X'FF'          Mark command pending
         MVI   LCFLAG,X'FF'            Command pending             @rpk
         CLI   DESTFLAG,X'FF'          A,TT or BB linecmd given?
         BE    VIEWPST2                Yes: process PASTE cmd      @rpl
         MVI   PENDMSG,C' '            Pending ...
         MVC   PENDMSG+1(L'PENDMSG-1),PENDMSG     message
         MVC   PENDMSG(5),=C'PASTE'    Paste command
         MVC   PENDMSG+6(7),=C'pending'              pending
         B     VIEW                    Display screen              @rpl
VIEWPST2 DS    0H                                                  @rpl
         LA    R1,LLINES               Line number to paste after  @rpb
         L     R15,=V(RPFCTPST)        Load CUT and PASTE rout.    @rpb
         CALL  (15)                    Branch to routine           @rpb
         B     VIEWRES3                Reset pending line commands
*---------------------------------------------------------------------*
*        Primary command: 'RESET' with alias 'RES'                    *
*        Reset the flags of the changed lines those were changed      *
*        'C' primary command. The affected line numbers are not       *
*        white anymore.                                               *
*        And reset the pending line commands.                         *
*------------------------------------------ (C)-2025 Skybird Systems -*
VIEWRES  DS    0H
         USING WORKSPCE,R4             Address workspace record
         L     R4,COMWSTRT             First record in workspace
         L     R6,COMWRKEN             Length of workspace entry
         L     R7,COMMLAST             Last record in workspace
         LA    R7,1(,R7)               Point to last byte
VIEWRES2 DS    0H
         NI    WORKFLGS,255-$CHLINE    Reset the changed line flag
         BXLE  R4,R6,VIEWRES2          Reset all $CHLINE flags
         DROP  R4
VIEWRES3 DS    0H                                                  @rpl
         XC    LFLAGS,LFLAGS           Reset flgs pending linecmds
         XC    LLINES,LLINES           Reset linenumbers
         B     VIEW                    Display screen
*---------------------------------------------------------------------*
*        Primary command: 'TOP' with alias 'T'                        *
*---------------------------------------------------------------------*
VIEWTOP  DS    0H
         MVC   COMMFSCR,COMWSTRT       Set pointers to
         XC    COMRFLNE,COMRFLNE       Clear addres of line, where
*                                      FIND 'string' was found
         B     VIEW                    Display screen
*---------------------------------------------------------------------*
*        Primary command: 'NULLS ON/OFF'                              *
*---------------------------------------------------------------------*
VIEWNULL DS    0H
         TR    BUFFER+6(3),COMTCAPS    Xlate operand to uppercase
         CLC   BUFFER+6(3),=CL3'OFF'   NULLS OFF primary command?
         BE    VIEWNNU                 Yes: set editor in NULLS OFF
         CLC   BUFFER+6(3),=CL3'ON'    NULLS ON primary command?
         BNE   VIEWERR3                No: invalid command
         TM    SW,$NULLS               Already in NULLS mode?
         BO    VIEW                    Yes: no operation
         OI    SW,$NULLS               Mark NULLS on
         MVC   PROFNULL,=CL3'ON'       Nulls: ON into profile line
         B     VIEW                    Display screen
VIEWNNU  DS    0H
         TM    SW,$NULLS               Already in NONULLS mode?
         BNO   VIEW                    Yes: no operation
         NI    SW,255-$NULLS           Mark NULLS off
         MVC   PROFNULL,=CL3'OFF'      Nulls: OFF into profile line
         B     VIEW                    Display screen
*---------------------------------------------------------------------*
*        Primary command: 'AUTOSAVE ON/OFF'                           *
*---------------------------------------------------------------------*
VIEWAUTO DS    0H
         TR    BUFFER+9(3),COMTCAPS    Xlate operand to uppercase
         CLC   BUFFER+9(3),=CL3'OFF'   AUTOSAVE OFF primary command?
         BE    VIEWAUT3                Yes: set editor in NULLS OFF
         CLC   BUFFER+9(3),=CL3'ON'    AUTOSAVE OFF primary command?
         BNE   VIEWERR3                No: invalid command
         MVI   AUTO,C'Y'               Set AUTOSAVE for this session
         B     VIEW                    Display screen
VIEWAUT3 DS    0H
         MVI   AUTO,C'N'               Reset AUTOSAVE for this session
         B     VIEW                    Display screen
*---------------------------------------------------------------------*
*        Primary command: 'BOTTOM' with alias 'B'                     *
*---------------------------------------------------------------------*
VIEWBOT  DS    0H
         L     R4,COMMLAST             Address last record in workspace
         LH    R3,SCRLEN               Length screen (21-97 x DATALINE)
         SL    R3,COMWRKEN             Minus 1 line
         TM    COMMFLG1,$COMCOLS       Scale line present?
         BNO   *+8                     No: good
         SL    R3,COMWRKEN             One line less on screen
         TM    COMMFLG2,$COMPROF       Profile line present?
         BNO   *+8                     No: good
         SL    R3,COMWRKEN             Another line less on screen
         SL    R3,COMWRKEN             - '*** Bottom  of data ****'
         SLR   R4,R3                   Address first line on screen
         CL    R4,COMWSTRT             Before first record?
         BL    VIEWBOT2                Reset to top
         ST    R4,COMMFSCR             Save
         B     VIEWBOT4                Display screen
VIEWBOT2 MVC   COMMFSCR,COMWSTRT       Move to top
VIEWBOT4 XC    COMRFLNE,COMRFLNE       Clear addres of line, where
*                                      FIND 'string' was found
         B     VIEW                    Display screen
*---------------------------------------------------------------------*
*        Primary command: 'SORT'                                      *
*---------------------------------------------------------------------*
VIEWSRT  DS    0H
         L     R15,=V(SORT)            Call the SORT routine
         CALL  (15)                    and execute
         L     R15,=V(NUMBER)          Renumber the workspace
         CALL  (15)                    and execute
         B     VIEWSET                 Upd change ctr + redisplay scr
*---------------------------------------------------------------------*
*        Primary command: 'OVLY'                                      *
*---------------------------------------------------------------------*
VIEWOVL  DS    0H
         L     R15,=V(OVLY)            Routine address
         LA    R1,BUFFER               Buffer with primary command
         CALL  (15)                    Run OVLY routine
         B     VIEW                    Display screen
*---------------------------------------------------------------------*
*        Primary command: 'TSO'                                       *
*---------------------------------------------------------------------*
VIEWTSO  DS    0H
         MVC   EPLOC,=CL8'RPFTSO'      Move module name RPFTSO
         BAL   R14,LINKMOD             Link to RPFTSO
         B     VIEW                    Display screen
*---------------------------------------------------------------------*
*        Primary command: 'OUT' (Output processor)                    *
*---------------------------------------------------------------------*
VIEWOUT  DS    0H
         MVC   EPLOC,=CL8'RPFOUT'      Module name RPFOUT
         BAL   R14,LINKMOD             Link to RPFOUT
         B     VIEW                    Display screen
*---------------------------------------------------------------------*
*        Primary command: 'JCL'                                       *
*---------------------------------------------------------------------*
VIEWJCL  DS    0H
         CLC   COMMRECL,=F'80'         Do we have a card image data set
         BNE   VIEWJCL2                No: JCL is always card image
         MVC   EPLOC,=CL8'RPFJCL'      Module name to link to
         BAL   R14,LINKMOD             Link to RPFJCL
         B     VIEW                    Review screen             @rpa01
VIEWJCL2 DS    0H
         MVC   MSG5,ERRFTXT            Msg: No card image data set
         B     VIEW                    Display screen
*---------------------------------------------------------------------*
*        Primary command: 'L +nnn' or 'L -nnn'                        *
*---------------------------------------------------------------------*
VIEWLINE DS    0H
         CLI   BUFFER+2,C'+'           'L +nnn' command?
         BE    VIEWLIN2                Yes: process
         CLI   BUFFER+2,C'-'           'L -nnn' command?
         BNE   VIEWLIN6                No: process 'L' (Locate) cmd
VIEWLIN2 XC    COMRFLNE,COMRFLNE       Clear addres of line, where
*                                      FIND 'string' was found
         MVC   NUMFLD,BUFFER+3         Number from buffer into NUMFLD
         LA    R1,=C'0'                '0' into FILLCHAR
         L     R15,=V(SHIFT)
         CALL  (15)                    Chop off trailing spaces and
*                                      replace into leading zeroes
         L     R15,=V(NUMTST)          EP of NUMTST routine
         CALL  (15)                    Execute numeric test
         LTR   R15,R15                 Rc= 0?
         BNZ   VIEWERRC                No: error
         PACK  DBW,NUMFLD              Convert NUMFLD to
         CVB   R5,DBW                  binary into register 5
         CL    R5,=F'999999'           More than 999,999 lines?
         BH    VIEW                    Yes: ignore L command
         L     R4,COMWRKEN             Length 1 workspace entry
         MR    R4,R4                   Calculate total length
         L     R3,COMMFSCR             Address first line
         CLI   BUFFER+2,C'+'           Page forward?
         BNE   VIEWLIN3                No: go to backward
         LA    R3,0(R3,R5)             Add length to first line
         CL    R3,COMMLAST             End of workspace?
         BH    VIEW                    Yes: ignore L +nnn command
         ST    R3,COMMFSCR             Save pointer
         B     VIEW                    Display screen
VIEWLIN3 C     R3,COMWSTRT             Beginning of workspace?
         BNH   VIEWLIN5                Yes: issue TOP primary command
         SLR   R3,R5                   Subtract length of first line
         C     R3,COMWSTRT             Before first record?
         BNL   VIEWLIN4                No: branch and exec LINE command
         MVC   COMMFSCR,COMWSTRT       Reset to top of workspace
         B     VIEW                    Display screen
VIEWLIN4 ST    R3,COMMFSCR             Save pointer
         B     VIEW                    Display screen
VIEWLIN5 MVC   COMMFSCR,COMWSTRT       Reset screen to the top
         B     VIEW                    Display screen
*---------------------------------------------------------------------*
*        Primary command: 'L nnnnnn'                                  *
*---------------------------------------------------------------------*
VIEWLIN6 DS    0H
         XC    COMRFLNE,COMRFLNE       Clear addres of line, where
*                                      FIND 'string' was found
         MVC   NUMFLD,BUFFER+2         Number from BUFFER into NUMFLD
         LA    R1,=C'0'                '0' into FILLCHAR
         L     R15,=V(SHIFT)           Chop off trailing spaces and
*                                      replace into leading zeroes
         CALL  (15)                    Execute
         L     R15,=V(NUMTST)          EP of NUMTST routine
         CALL  (15)                    Execute numeric test
         LTR   R15,R15                 Rc= 0?
         BNZ   VIEWERRC                No: error
         LA    R1,NUMFLD+2             PARM for SRCHLINE
         L     R15,EPSRCH              Load entry point SRCHLINE
         BALR  R14,R15                 Try to find line
         LTR   R15,R15                 Line found?
         BNZ   VIEWERRC                No: give error message
         ST    R1,COMMFSCR             Matched line become first
         B     VIEW                    Display screen
*---------------------------------------------------------------------*
*        Primary command: 'BNDS'                                      *
*---------------------------------------------------------------------*
VIEWBNDS DS    0H
         XC    BNDSNUM,BNDSNUM         Clear work field
         MVC   BNDSNUM,BUFFER+5        Boundary numbers into workfield
         L     R15,=V(BNDS)            Set BNDS ...
         CALL  (15)                                into screen
         B     VIEW                    Display screen
*---------------------------------------------------------------------*
*        Primary command: 'DEL'                                       *
*---------------------------------------------------------------------*
VIEWDEL  DS    0H
         L     R15,=V(DEL)             Delete routine
         CALL  (15)                    Execute
         B     VIEW                    Display screen
*---------------------------------------------------------------------*
*        Primary command: 'HAR'                                       *
*---------------------------------------------------------------------*
VIEWHAR  DS    0H
         LA    R1,BUFFER
         STCM  R1,15,COMMPRM           Pass command in RPFCOMM
*
*        Invoke RPFHCPY for HAR and PRINT primary commands.
*
         MVC   EPLOC,=CL8'RPFHCPY'     Module name to link to
         BAL   R14,LINKMOD             Link to RPFHCPY
         MVC   MSG5,COMMPRM            Get message
         LTR   R15,R15                 Hardcopy alright?
         BZ    VIEW                    Yes: display screen
         MVC   REP5,BUFFER             No: repeat command
         B     VIEW                    Display screen
*---------------------------------------------------------------------*
*        Primary command: '$DOC'                                      *
*---------------------------------------------------------------------*
VIEWDOC  DS    0H
         MVC   EPLOC,=CL8'RPFDOC'      Module name to link to
         BAL   R14,LINKMOD             Link to RPFDOC
         LTR   R15,R15                 Rc= 0?
         BZ    VIEWDOC2                Yes: match found
         MVC   REP5,BUFFER             No: repeat command and
         MVC   MSG5,COMMPRM            move error message from RPFDOC
         B     VIEW                    Display screen
VIEWDOC2 DS    0H
         B     VIEWSET                 Upd change ctr + redisplay scr
*---------------------------------------------------------------------*
*        Primary command: 'CAPS ON' or 'CAPS OFF'                     *
*---------------------------------------------------------------------*
VIEWCAPS DS    0H
         TR    BUFFER+5(3),COMTCAPS    Xlate operand to uppercase
         CLC   BUFFER+5(3),=CL3'OFF'   CAPS OFF primary command?
         BE    VIEWASIS                Yes: set editor in CAPS OFF mode
         CLC   BUFFER+5(3),=CL3'ON'    CAPS ON primary command?
         BNE   VIEWERR3                No: invalid command
         NI    SW,255-$ASIS            Indicate CAPS
         MVC   PROFCAPS,=CL3'ON'       Caps: ON in profile line
         B     VIEW
VIEWASIS OI    SW,$ASIS                Indicate ASIS
         MVC   PROFCAPS,=CL3'OFF'      Caps: OFF in profile line
         B     VIEW
*---------------------------------------------------------------------*
*        Primary command: 'LEFT'                                      *
*---------------------------------------------------------------------*
VIEWLEFT DS    0H
         TM    SW,$WIDE                Do we have a wide screen (>recl)
         BO    VIEW                    Yes: ignore LEFT command
         TM    COMMFLG1,$COMCOB        COBOL aligned?
         BO    VIEW                    Yes: ignore LEFT command
         CLC   DATOFFS,=F'0'           Offset in data already 0?
         BNH   VIEW                    Yes: ignore LEFT command
         CLC   SCROLL5+6(3),=C'CSR'    Scroll on cursor?
         BNE   VIEWLEF4                No: process PAGE and HALF
         L     R15,=V(CSR)             Calculate place of the cursor
         BALR  R14,R15                 Execute
         LTR   R15,R15                 Line number found?
         BNZ   VIEWLEF4                No: scroll a screen width
         L     R2,4(,R1)               Column from CSR routine
         S     R2,=F'8'                Minus line number, pos1 and Attr
         BNP   VIEWLEF4                Cursor not in data, normal scrol
         L     R1,DATOFFS              Current offset in data
         AR    R1,R2                   + line number, pos1 and Attr +1
         S     R1,DATALEN              Minus length of data portion
         BP    VIEWLEF6                Cursor present in data.
         XR    R1,R1                   Data offset becomes 0
         B     VIEWLEF6                Display screen
VIEWLEF4 DS    0H
         ICM   R1,15,DATOFFS           Offset in data portion workspc
         BZ    VIEW                    0: ignore LEFT command
         L     R2,DATALEN              L'data portion on screen
         CLC   SCROLL5+6(4),=C'HALF'   Scroll half of width screen?
         BNE   *+8                     No: scroll left complete width
         SRL   R2,1                    Width (DATALEN) / 2
         SR    R1,R2                   Offset - DATALEN (/2)
         BNM   VIEWLEF6                Yes: set DATOFFS
         XR    R1,R1                   Set offset to 0, left aligned
VIEWLEF6 DS    0H
         ST    R1,DATOFFS              New offset
         B     VIEWRIG9                Set boundaries and display scr.
*---------------------------------------------------------------------*
*        Primary command: 'RIGHT'                                     *
*---------------------------------------------------------------------*
VIEWRIGH DS    0H
         TM    SW,$WIDE                Do we have a wide screen (>recl)
         BO    VIEW                    Yes: ignore RIGHT command
         TM    COMMFLG1,$COMCOB        COBOL aligned?
         BO    VIEW                    Yes: ignore RIGHT command
         CLC   SCROLL5+6(3),=C'CSR'    Scroll on cursor?
         BNE   VIEWRIG2                No: process PAGE and HALF
         L     R15,=V(CSR)             Calculate place of the cursor
         BALR  R14,R15                 Execute
         LTR   R15,R15                 Line number found?
         BNZ   VIEWRIG2                No: scroll a screen width
         L     R1,4(,R1)               Column from CSR routine
         S     R1,=F'9'         Minus line number, pos-1 and Attr + 1
         BNP   VIEWRIG2                Cursor not in data, normal scrol
         L     R2,DATOFFS              Offset of data in EDIT workspace
         LA    R1,0(R1,R2)             Add cursor position -/- 8
         C     R1,COMMRECL             Beyond record length?
         BNL   VIEW                    Yes: ignore RIGHT command
         B     VIEWRIG4                Test against record length
VIEWRIG2 DS    0H
         L     R1,DATOFFS              Pickup offset in data portion
         L     R2,DATALEN              Length of data portion in screen
         CLC   SCROLL5+6(4),=C'HALF'   Scroll half of width screen?
         BNE   *+8                     No: scroll right complete width
         SRL   R2,1                    Width (DATALEN) / 2
         LA    R1,0(R1,R2)             Add together
         C     R1,COMMRECL             >= record length?
         BNL   VIEW                    Yes: ignore RIGHT command
VIEWRIG4 DS    0H
         AL    R1,DATALEN              Add DATALEN to test beyond
         C     R1,COMMRECL             >= record length?
         BH    VIEWRIG6                Yes: display last part of record
         B     VIEWRIG8
VIEWRIG6 DS    0H
         L     R1,COMMRECL             Record length data set
VIEWRIG8 DS    0H
         SL    R1,DATALEN              Minus length of data portion on
*                                      screen
         ST    R1,DATOFFS              Save offset
VIEWRIG9 DS    0H
         BAL   R3,VIEWLR               Set cursor in the same line
         XC    BNDSNUM,BNDSNUM         Build default BNDS command
         L     R15,=V(BNDS)            Set BNDS ...
         CALL  (15)                                into screen
         B     VIEW                    Display screen
*
*        Leave cursor on same line after successful LEFT or RIGHT
*        command instead of setting the cursor in the command field
*
VIEWLR   DS    0H
         L     R15,=V(CSR)             Convert cursor addr. in row/col
         CALL  (15)
         LTR   R15,R15                 Row found?
         BNZR  R3                      No: leave cursor on std position
         L     R2,0(,R1)               Pick-up row number
         C     R2,COMMSIZE             Beyond last line on screen?
         BHR   R3                      Yes: do not alter cursor pos.
         LR    R0,R2                   Row number
         LA    R1,9                    Column 9
         L     R15,=V(RCTOSBA)         Routine
         CALL  (15)                    Convert
         STCM  R0,3,SCR5ADDR+1         Set in screen
         BR    R3
*---------------------------------------------------------------------*
*        Primary command: 'COBOL ON' or 'COBOL OFF'                   *
*---------------------------------------------------------------------*
VIEWCOB  DS    0H
         TR    BUFFER+6(3),COMTCAPS    Xlate operand to uppercase
         CLC   BUFFER+6(3),=CL3'OFF'   COBOL OFF primary command?
         BE    VIEWNCOB                Yes: set editor in No Cobol mode
         CLC   BUFFER+6(3),=CL3'ON'    COBOL ON primary command?
         BNE   VIEWERR3                No: invalid command
         TM    COMMFLG1,$COMCOB        Already COBOL aligned?
         BO    VIEW                    Yes: ignore command
         TM    COMMFLG4,$COMVB         Is RECFM of input variable?
         BO    VIEWCOB1                Yes: reject COBOL ON command
         CLC   COMMRECL,=F'80'         Is record length 80?
         BE    VIEWCOB2                Yes: Cobol source is always 80
VIEWCOB1 MVC   MSG5,ERR$TXT            Msg: command not executed
         B     VIEW                    Redisplay EDIT screen
VIEWCOB2 DS    0H
         OI    COMMFLG1,$COMCOB        Set COBOL flag on in RPFCOMM
         XC    BNDSNUM,BNDSNUM         Clear Boundary field
         L     R15,=V(BNDS)            Set BNDS ...
         CALL  (15)                                into screen
         MVC   COMMNUM,=CL3'ON'        Mark default numbered unless ...
         MVC   PROFCOB,=CL3'ON'        Cobol: ON in profile line
         L     R4,COMWSTRT             Load first record in workspace
         L     R6,COMWRKEN             Load length of entry
         L     R7,COMMLAST             Last record in workspace
         LA    R7,1(,R7)               Adjust offset
VIEWCOB5 DS    0H
         USING WORKSPCE,R4             Address workspace entry
         MVC   NUMFLD+6(2),=C'00'      Set last 2 bytes to 0
         MVC   NUMFLD(6),WORKDATA      Move line number (COLS 01-06)
         L     R15,=V(NUMTST)          EP of NUMTST routine
         CALL  (15)                    Execute numeric test
         LTR   R15,R15                 Numeric?
         BNZ   VIEWCOB7                No: make workspace NONUM
         BXLE  R4,R6,VIEWCOB5          Loop until all done
         B     VIEWCOB9                All numerics, Leave workspc NUM
VIEWCOB7 DS    0H                      Make workspace NONUM here
         MVC   COMMNUM(3),=CL3'OFF'    Mark NONUM
VIEWCOB9 DS    0H
         L     R15,=V(NUMBER)          Entry point NUMBER routine
         CALL  (15)                    Renumber screen numbers
         DROP  R4                      Kill addressability workspace
         B     VIEW
*
VIEWNCOB DS    0H
         TM    COMMFLG1,$COMCOB        Was it COBOL aligned?
         BNO   VIEW                    No: ignore COBOL OFF command
         XC    DATOFFS,DATOFFS         Zero offset in data workspace
         NI    COMMFLG1,255-$COMCOB    Reset COBOL and switch to std
         XC    BNDSNUM,BNDSNUM         Clear Boundary field
         L     R15,=V(BNDS)            Set BNDS ...
         CALL  (15)                                into screen
         MVC   PROFCOB,=CL3'OFF'       Cobol: OFF in profile line
         CLC   COMMNUM,=CL3'ON'        Numbered EDIT?
         BNE   VIEW                    Yes: leave it unnumbered
         L     R4,COMWSTRT             Load first record in workspace
         L     R6,COMWRKEN             Load length of entry
         L     R7,COMMLAST             Last record in workspace
         LA    R7,1(,R7)               Adjust offset
VIEWNCO1 DS    0H
         MVC   NUMFLD(8),OFFSETN1(4)   Line number in fld (cols 73-80)
         L     R15,=V(NUMTST)          Entry point NUMTST routine
         CALL  (15)                    Execute NUMTST
         LTR   R15,R15                 Numeric?
         BNZ   VIEWNCO3                No: make workspace NONUM
         BXLE  R4,R6,VIEWNCO1          Loop until all done
         B     VIEW                    All numerics, Leave workspc NUM
VIEWNCO3 DS    0H                      Make workspace NONUM here
         XC    BNDSNUM,BNDSNUM         Clear Boundary field
         L     R15,=V(BNDS)            Set BNDS ...
         CALL  (15)                                into screen
         MVC   COMMNUM(3),=CL3'OFF'    Mark NONUM
         L     R15,=V(NUMBER)          Entry point NUMBER routine
         CALL  (15)                    Renumber workspace(not the data)
         B     VIEW
*---------------------------------------------------------------------*
*        Primary command: 'HELP'                                      *
*---------------------------------------------------------------------*
VIEWHELP DS    0H
         MVC   EPLOC,=CL8'RPFHELP'     Module name to link to
         BAL   R14,LINKMOD             Link to RPFHELP
         B     VIEW
*---------------------------------------------------------------------*
*        Primary command: 'PFK'                                       *
*---------------------------------------------------------------------*
VIEWPFK  DS    0H
         L     R15,EPPFK               Pickup entry point        @rpa01
         LA    R1,PARMLST1             A(RPFCOMM)
         BALR  R14,R15                 Link to RPFPFK
         B     VIEW
*---------------------------------------------------------------------*
*        Primary command: 'FILL', 'UC' and 'LC'                       *
*---------------------------------------------------------------------*
VIEWFILL DS    0H
         NI    COMMFLG2,255-$COMLC-$COMUC  Clear LC and UC flags
         TM    SW,$ASIS                Do we EDIT in Asis mode?
         BO    VIEWLFIL                Yes: do not xlate to upper
         TR    BUFFER,COMTCAPS         No: Xlate complete cmd to upper
         B     VIEWLFIL                Invoke RPFFILL
VIEWLC   DS    0H
         NI    COMMFLG2,255-$COMLC-$COMUC  Clear LC and UC flags
         OI    COMMFLG2,$COMLC         Mark 'LC' primary command
         OI    SW,$ASIS                Indicate ASIS
         MVC   PROFCAPS,=CL3'OFF'      Caps: OFF in profile line
         B     VIEWLFIL                Invoke RPFFILL
VIEWUC   DS    0H
         NI    COMMFLG2,255-$COMLC-$COMUC  Clear LC and UC flags
         OI    COMMFLG2,$COMUC         Mark 'UC' primary command
         B     VIEWLFIL                Invoke RPFFILL
VIEWLFIL DS    0H
         LA    R1,BUFFER               Addr. of command in COMMPRM
         STCM  R1,15,COMMPRM           Pass command in RPFCOMM
         L     R15,EPFILL              RPFFILL routine           @rpa01
         LA    R1,PARMLST1             A(RPFCOMM)
         BALR  R14,R15                 Invoke RPFFILL            @rpa01
*
*        RPFFILL processes the LC, UC and FILL primary commands.
*
         MVC   MSG5,COMMPRM            Message from RPFFILL in screen
         LTR   R15,R15                 Rc= 0?
         BNZ   VIEWLFI2                No: display screen
         B     VIEWSET                 Upd change ctr + redisplay scr
VIEWLFI2 DS    0H
         MVC   REP5,BUFFER             Repeat command
         B     VIEW
*---------------------------------------------------------------------*
*        Primary command: 'NUM(BER) ON/OFF'                           *
*---------------------------------------------------------------------*
VIEWNUM  DS    0H
         LA    R1,BUFFER+7             Point after NUMBER verb
         CLC   =C'NUMBER',BUFFER       NUMBER command given?
         BE    *+8                     Yes: carry
         LA    R1,BUFFER+4             Point after NUM verb
         OC    0(3,R1),=CL3' '         Xlate to CAPS
         CLC   =CL3'ON',0(R1)          NUM(BER) ON?
         BE    VIEWREN                 Yes: renumber seq. nmbrs in data
         CLC   =CL3'OFF',0(R1)         NUM(BER) OFF?
         BE    VIEWNON                 Yes: set editor in NONUM mode
         B     VIEWERR3                Else invalid command
VIEWNON  DS    0H
         MVC   COMMNUM,=CL3'OFF'
         B     VIEW                    Redisplay screen
*---------------------------------------------------------------------*
*        Primary command: 'RENUMBER' with aliases 'RENUM' and 'REN'   *
*---------------------------------------------------------------------*
VIEWREN  DS    0H
         CLC   =CL3'ON',COMMNUM        Already numbered?
         BE    VIEWREN7                Yes: do not issue warning msg
         MVC   MSG2,ERRCTXT            Msg: Renumber will lose data
VIEWREN5 DS    0H
         TCLEARQ INPUT
         LA    R1,SCR2TXT              Screen address
         LA    R0,SCR2LEN              Screen length
         L     R15,=V(TPUTS)           Write screen routine
         BALR  R14,R15                 Execute
         L     R3,COMMSCR
         BAL   R2,VIEWTGET             Read reply
         TR    0(25,R3),COMTCAPS
         CLC   6(3,R3),=C'YES'         'Yes' entered?
         BE    VIEWREN7                Yes: Renumber data
         CLC   6(2,R3),=C'NO'          'NO' entered?
         BE    VIEW                    Retry
         MVC   MSG2,ERRKTXT            Msg: xxxxxxxx Yes or No?
         MVC   MSG2+3(8),=CL8'Renumber'  Move verb into message
         B     VIEWREN5                Issue 'Yes' or 'No'
VIEWREN7 DS    0H
         MVC   COMMNUM(3),=CL3'ON'
         MVC   MSG5,MSG1TXT            Msg: Workspace renumbered
         B     VIEWNUM#                Renumber workspace
*---------------------------------------------------------------------*
*        Primary command: 'NUMBER ON' or 'UNNUM'
*---------------------------------------------------------------------*
VIEWUNN  DS    0H
         CLC   COMMNUM,=CL3'ON'        Is workspace line-numbered?
         BE    VIEWUNN1                Yes: remove line numbers
         MVC   MSG5,ERR6TXT            Msg: Workspace not numbered
         B     VIEW                    Do not execute command
VIEWUNN1 DS    0H                      UNNUM workspace
         L     R4,COMWRKEN             Length one line
         L     R3,COMWSTRT
         L     R5,COMMLAST
         LA    R5,0(R4,R5)             Point to last data byte
         BCTR  R5,0
VIEWUNN3 TM    COMMFLG4,$COMVB         Variable records with numbers
         BNO   VIEWUNN4                in pos 1-8?
         MVI   8(R3),C' '              Clear Line numbers ....
         MVC   9(7,R3),8(R3)                 of VB data sets
         B     VIEWUNN7                BXLE
VIEWUNN4 TM    COMMFLG1,$COMCOB        COBOL numbers (cols 1-6)?
         BNO   VIEWUNN5                No: standard numbers
         MVI   8(R3),C' '              Clear COBOL ...
         MVC   9(5,R3),8(R3)                          line numbers
         B     VIEWUNN7                BXLE
VIEWUNN5 DS    0H
         L     R14,COMMRECL            LRECL of data set or member
         LA    R14,0(R14,R3)           Point to last 8 bytes
         MVI   0(R14),C' '             Clear line ...
         MVC   1(7,R14),0(R14)                       number
VIEWUNN7 BXLE  R3,R4,VIEWUNN3
         MVC   COMMNUM(3),=CL3'OFF'
VIEWNUM# XC    BNDSNUM,BNDSNUM         Clear Boundary field
         L     R15,=V(BNDS)            Set BNDS ...
         CALL  (15)                                into screen
         L     R15,=V(NUMBER)          Renumber workspace (not in data)
         CALL  (15)                    Invoke NUMBER routine
VIEWSET  L     R15,=V(SETCHNG)         Mark data changed in workspace
         CALL  (15)
         B     VIEW
*---------------------------------------------------------------------*
*        Primary command: 'COLS'
*---------------------------------------------------------------------*
VIEWCOLS XI    COMMFLG1,$COMCOLS       Toggle display scale line
         B     VIEW                    Display screen
*---------------------------------------------------------------------*
*        Primary command: 'PROF'
*---------------------------------------------------------------------*
VIEWPROF XI    COMMFLG2,$COMPROF       Toggle display PROFILE line
         B     VIEW                    Display screen
*---------------------------------------------------------------------*
*        Primary command: 'CO nnn,mmm,aaa'
*---------------------------------------------------------------------*
VIEWCO   L     R15,=V(COPY)            Execute COPY lines command
         CALL  (15)
         B     VIEW                    Display screen
*---------------------------------------------------------------------*
*        Primary command: 'MO nnn,mmm,aaa'
*---------------------------------------------------------------------*
VIEWMO   L     R15,=V(MOVE)            Move lines routine
         CALL  (15)
         B     VIEW                    Display screen
*---------------------------------------------------------------------*
*        Primary command: 'APPEND', append data after the last record *
*        Primary command: 'COPY' with line command A.                 *
*---------------------------------------------------------------------*
VIEWAPND DS    0H
         TM    COMMFLG4,$COMVIEW       RPFEDIT in VIEW mode
         BO    VIEWAPN4                Yes: refuse APPEND command
         CLC   =C'APPEND',BUFFER       Append command?
         BE    VIEWAPN2                Yes: execute immediately
         CLI   DESTFLAG,X'00'          Destination COPY filled in?
         BNE   VIEWAPN2                Yes: carry on
         MVI   APNDFLAG,X'FF'          Set COPY pending
         MVI   LCFLAG,X'FF'            Mark pending commands...
         MVI   PENDMSG,C' '            Pending ...
         MVC   PENDMSG+1(L'PENDMSG-1),PENDMSG     message
         MVC   PENDMSG(4),=C'COPY'     COPY command
         MVC   PENDMSG+5(7),=C'pending'            pending
         B     VIEW
VIEWAPN2 DS    0H
         MVC   COPMEM,COMMBR           Save original member name
         MVC   COPYDSN,COMMDSN         Save original data set name
         MVC   COPYVOL,COMMVOL         Save original volume
         MVC   COPYVM,COMMVM           Save original ISPF/RPF vv:mm
         OI    COMMFLG3,$COMAPND       Tell RPFDATAL that APPEND given
*---------------------------------------------------------------------*
*                                                                     *
*        Inform RPFDATAL that an APPEND or COPY command is given.     *
*        RPFDATAL will be invoked with APPEND=YES end RPFEDITL        *
*        will test this flag to bypass the ENQ and append the data.   *
*                                                                     *
*------------------------------------------ (C)-2025 Skybird Systems -*
         OI    COMMFLG3,$COMEDIT       Set RPFDATAL in EDIT mode
         L     R15,EPDATAL             Entry point RPFDATAL
         LA    R1,PARMLST1             A(RPFCOMM)
         BALR  R14,R15                 Invoke RPFDATAL
         MVC   COMMBR,COPMEM           Restore member name
         MVC   COMMDSN,COPYDSN         Restore data set name
         MVC   COMMVOL,COPYVOL         Restore volume
         MVC   COMMVM,COPYVM           Restore original ISPF/RPF vv:mm
         XC    LFLAGS,LFLAGS           Reset pending commands
         LTR   R15,R15                 Rc= 0?
         BNZ   VIEW                    No: Exit entered in RPFDATAL
         BAL   R14,LOAD                Invoke RPFEDITL and return
*                                      number of records in register 1
         LTR   R15,R15                 Rc=0?
         BNZ   VIEW                    No: redisplay screen
         L     R15,=V(NUMBER)          Renumber workspace
         BALR  R14,R15                 Execute
         CLC   =C'COPY',BUFFER         Primary command COPY?
         BNE   VIEW                    No: APPEND is ready
         MVC   BUFFER(3),=C'MO '       Create a 'MO' (move) command
         L     R2,COMMLAST             Last record pointer
         USING WORKSPCE,R2             Make workspace entry addressable
         MVC   BUFFER+10(6),WORKSLIN   Move second line number
         L     R14,COMWRKEN            Length of workspace entry
         BCTR  R1,0                    Counter minus 1
         MR    R0,R14                  * number of records
         SLR   R2,R1                   Copy to entry base register
         MVC   BUFFER+3(6),WORKSLIN    Line number 1
         MVC   BUFFER+17(6),DESTLINE   Destination (Line command: 'A')
         XC    LLINES,LLINES           Reset linenumbers
         B     VIEWMO                  Execute MO command
VIEWAPN4 DS    0H
         MVC   MSG5,ERR1TXT            Msg: APPEND not executed
         B     VIEW                    Display screen
         DROP  R2                      WORKSPCE
*---------------------------------------------------------------------*
*        Primary command: 'F' with alias 'FIND'                       *
*        If a repeat F (without operands) is given immediately after  *
*        a previous F, that meets Bottom of data reached, the F will  *
*        start from the beginning (flag $BOTDATA)                     *
*---------------------------------------------------------------------*
VIEWFIND DS    0H
         MVC   BUFFER(2),=C'F '        Change "FIND" into "F"      @rpd
         MVC   BUFFER+2(43),BUFFER+5   Move operand of "FIND"      @rpd
         MVC   BUFFER+45,=C'   '       Blank last positions        @rpd
VIEWFIN2 DS    0H
         TM    SW,$BOTDATA             Already Bottom of data reached?
         BZ    VIEWFIN3                No: leave COMMFSCR untouched
         NI    SW,255-$BOTDATA         Reset flag
         MVC   COMMFSCR,COMWSTRT       Start FIND from the beginning
VIEWFIN3 LA    R1,BUFFER
         STCM  R1,15,COMMPRM           Pointer to command in COMMPRM
         L     R15,EPFIND              Entry point RPFFIND
         LA    R1,PARMLST1             A(RPFCOMM)
         BALR  R14,R15                 Invoke RPFFIND
         LTR   R15,R15                 Rc= 0?
         BZ    VIEWFIN4                Yes: good
         C     R15,=F'4'               Bottom of data reached?
         BNE   *+8                     No: skip
         OI    SW,$BOTDATA             Indicate
         MVC   MSG5,COMMPRM            Error message from RPFFIND
         MVC   REP5,BUFFER             Repeat command
         B     VIEW                    Display screen
VIEWFIN4 DS    0H
*---------------------------------------------------------------------*
*
*        Set cursor address to the first character of the found
*        string.
*
*        RPFFIND places the address of the line, where the string
*        is found in COMRFLNE.
*        If the line pointed to by COMRFLNE is on the screen, set
*        the cursor on the string on that line.
*
*        The offset of the string in the data portion in the workspace
*        line is present in field COMRFOFS in RPFCOMM.
*        This offset is set by RPFFIND.
*
*------------------------------------------ (C)-2025 Skybird Systems -*
         L     R15,COMRFLNE            Address of line where 'string'
*                                      is found.
         LA    R15,0(,R15)             Clear high-order bit/byte
         L     R14,COMMFSCR            First line on screen
         SR    R15,R14                 Take difference
         XR    R14,R14                 Clear even register
         D     R14,COMWRKEN            Number of lines after COMMFSCR
         LA    R0,3                    Default line 3 on screen
         TM    COMMFLG1,$COMCOLS       Scale line present?
         BNO   *+8                     No: leave it on line-3
         AH    R0,=H'1'                Set to one line lower
         TM    COMMFLG2,$COMPROF       Profile line present?
         BNO   *+8                     No: good
         AH    R0,=H'1'                Set to one line lower
         CLC   COMMFSCR,COMWSTRT       *** top of data *** present?
         BNE   *+8                     No: good
         AH    R0,=H'1'                Set to one line lower
         AR    R0,R15                  Point to line where string fnd.
         C     R0,COMMSIZE             Beyond screen size (lines)?
         BNH   VIEWFIN5                No: carry on
         SR    R0,R15                  Restore register 0
         CLC   COMMFSCR,COMWSTRT       Were we at ** Top of data **?
         BNE   *+8                     No: good
         SH    R0,=H'1'                Set to one line up
*
*        Set one line up, because we scroll down and we came from
*        the '** Top of data **' line.
*
         MVC   COMMFSCR,COMRFLNE       New first line on screen
VIEWFIN5 DS    0H
         ICM   R1,15,COMRFOFS          Pickup offset in 1st line
         S     R1,DATOFFS              Minus offset in data portion
         BM    VIEWFIN6                Offset is left of data screen
         C     R1,DATALEN              Offset is right of data screen?
         BH    VIEWFIN6                Yes: do not position cursor
         LA    R1,9(,R1)               + line number + attr byte
         B     VIEWFIN7                Display screen
VIEWFIN6 DS    0H
         LA    R1,9                    Set column to 9
VIEWFIN7 L     R15,=V(RCTOSBA)         Calculate SBA
         CALL  (15)                    Convert
         STCM  R0,3,SCR5ADDR+1         Set in screen
         CLC   COMMPRM(4),=XL4'00'     Msg if F P'.' given?
         BE    VIEW                    No: display screen
         MVC   MSG5,COMMPRM            Char x'..' found
         B     VIEW
VIEWERR3 DS    0H
         MVC   MSG5,ERR5TXT            Msg: Invalid command
         MVC   REP5,BUFFER             Repeat command
         B     VIEW
VIEWERR4 DS    0H
         MVC   MSG5,ERRZTXT            Msg: Nothing to RETRIEVE    @rp6
         B     VIEW                                                @rp6
VIEWERRA DS    0H
         MVC   MSG2,ERRXTXT            Msg: Input convert failed
VIEWRETR DS    0H
         TCLEARQ INPUT
         LA    R1,SCR2TXT              Screen address
         LA    R0,SCR2LEN              Screen length
         L     R15,=V(TPUTS)           Write screen routine
         BALR  R14,R15                 Execute
         L     R3,COMMSCR
         BAL   R2,VIEWTGET             Read reply
         TR    0(25,R3),COMTCAPS
         CLC   6(3,R3),=C'END'         'END' entered?
         BE    RETURN                  Yes: terminate RPFEDIT
         CLC   6(5,R3),=C'RETRY'       'RETRY' entered?
         BE    VIEW                    Retry
         MVC   MSG2,ERRYTXT            Msg: Enter "RETRY" or "END"
         B     VIEWRETR
VIEWERRB DS    0H
         MVC   MSG5,ERRLTXT            Msg: PFK not defined
         MVC   REP5,BUFFER
         B     VIEW
VIEWERRC DS    0H
         MVC   MSG5,ERRHTXT            Msg: Invalid line number
         MVC   REP5,BUFFER             Repeat primary command
         B     VIEW
VIEWERRD DS    0H
         MVC   MSG5,ERRMTXT            Msg: PFK definition invalid
         MVC   REP5,BUFFER
         B     VIEW
*---------------------------------------------------------------------*
*
*        The commands starting with X'FF' are created in the
*        LCOMMAND routine and NOT issued by the user
*
*---------------------------------------------------------------------*
*        Primary command: X'FF'+U (FFE4), CUT command
*---------------------------------------------------------------------*
VIEWCUT4 DS    0H                                                  @rpl
         MVC   SAVECMD,BUFFER          Save command buffer
         L     R15,=V(RPFCTPST)        Load CUT and PASTE rout.    @rpb
         LA    R1,BUFFER               Param for RPFCTPST          @rpb
         CALL  (15)                    Execute
         LTR   R15,R15                 Successful?
         BNZ   VIEWCUT6                No: reset pending line commands
         TM    SW,$CUTMOVE             MM .. MM line commands?
         BO    VIEWCUT5                Yes: delete moved lines
         CLI   MOVEFLAG,X'FF'          MM .. MM line commands?
         BNE   VIEWRES3                No: CUT command finished
VIEWCUT5 MVC   BUFFER(4),=CL4'DEL'     Delete the MM..MM lines
         MVC   BUFFER+4(L'BUFFER-4),SAVECMD+3
         L     R15,=V(DEL)             Address delete lines routine
         BALR  R14,R15                 DELETE the moved lines
VIEWCUT6 NI    SW,255-$CUTMOVE         Reset flag
         B     VIEWRES3                Reset pending line commands
*---------------------------------------------------------------------*
*        Primary command: X'FF'+C  (FFC3) CREATE command and
*        Primary command: X'FF'+R  (FFD9) REPLACE command
*---------------------------------------------------------------------*
VIEWCRE9 DS    0H
         LA    R1,BUFFER+3             Point to line 1
         L     R15,EPSRCH              Entry point SRCHLINE
         CALL  (15)                    Execute (register 1 = set)
         ST    R1,COMMPRM+12           Start address for RPFSAVE
         LA    R1,BUFFER+10            Point to line 2
         L     R15,EPSRCH              Entry point SRCHLINE
         CALL  (15)                    Execute (register 1 = set)
         ST    R1,COMMPRM+16           End address for RPFSAVE
         MVI   COMMPRM,C' '            Blank translated ...
         MVC   COMMPRM+1(7),COMMPRM                     member name
         MVC   COMMPRM+8(4),CHGCTR     # modified lines for ISPF stats
         MVI   COMMPRM+20,C'1'         Default option 1 if CREATE
         MVI   COMMPRM+21,C'N'         No Autosave
         CLI   BUFFER+1,C'R'           REPLACE primary command?
         BNE   VIEWCREA                No: option in SAVE remains '1'
         MVI   COMMPRM+20,C'2'         Else default option 2 in SAVE
VIEWCREA L     R15,EPSAVE              Entry point RPFSAVE
         LA    R1,PARMLST1             A(RPFCOMM)
         BALR  R14,R15                 Invoke RPFSAVE
         B     *+4(15)
         B     VIEWCREB                No: not saved, give no message
         B     VIEWX372                Abend x37 occurred
         B     VIEWRES3                Reset pending line commands
         B     VIEWRES3                Should not happen
VIEWX372 DS    0H
         MVC   MSG5,ERRWTXT            Msg: Abendx37 in RPFSAVE
         B     VIEWRES3                Reset pending line commands
VIEWCREB DS    0H
         MVC   MSG5,MSG7TXT            Data set created/replaced
         B     VIEWRES3                Reset pending line commands
*---------------------------------------------------------------------*
*        Primary command: 'SAVE'
*---------------------------------------------------------------------*
VIEWSAVE DS    0H
         MVI   AUTO,C'Y'               Set Autosave ind. with SAVE cmd
         B     VIEWSAV0                Save data
*---------------------------------------------------------------------*
*        Primary command: '= n(.n)'
*---------------------------------------------------------------------*
VIEW#    DS    0H                                                  @rp1
         CLI   BUFFER+1,C' '           Nothing after '='
         BE    VIEWERR3                Ignore the '=' command - Error
         MVC   CMAINOPT(3),BUFFER+1    Move options after '='      @rp1
*---------------------------------------------------------------------*
*        Primary command: 'RETURN'
*---------------------------------------------------------------------*
VIEWRETU DS    0H
         OI    COMMFLG2,$COMRTRN       Set return indicater & terminate
*---------------------------------------------------------------------*
*        Primary command: 'END'
*---------------------------------------------------------------------*
VIEWEND  DS    0H
         XR    R15,R15                 Rc = 0000
         TM    COMMFLG4,$COMCHGD       Any data changed?
         BZ    RETURN                  No: do not invoke RPFSAVE
VIEWSAV0 DS    0H
         TM    COMMFLG4,$COMVIEW       In VIEW mode?
         BNO   VIEWSAV1                No: continue (AUTO)SAVE
         MVC   MSG5,ERR4TXT            Msg: Save rejected in VIEW
         B     VIEW                    Stay in RPFEDIT
VIEWSAV1 DS    0H
         CLI   AUTO,C'Y'               Save in same data set / member
         BE    VIEWSAV4                Yes: branch
         MVC   MSG2,ERR@TXT            Msg: Nothing saved
VIEWSAV2 DS    0H
         TCLEARQ INPUT
         LA    R1,SCR2TXT              Screen address
         LA    R0,SCR2LEN              Screen length
         L     R15,=V(TPUTS)           Write screen routine
         BALR  R14,R15                 Execute
         L     R3,COMMSCR              Screen output
         BAL   R2,VIEWTGET             Read reply
         XC    REP2,REP2               Clear command area
         TR    0(25,R3),COMTCAPS       Xlate to upper case
         CLC   6(6,R3),=C'CANCEL'      'CANCEL' entered?
         BE    VIEW                    Yes: stay in EDIT
         CLC   6(3,R3),=C'END'         'END'entered?
         BE    VIEWCAN                 Yes: go to CANCEL routine
         CLC   6(4,R3),=C'SAVE'        'SAVE' entered?
         BNE   VIEWSAV2          No: repeat question SAVE, CANEL or END
         MVI   AUTO,C'Y'               Save workspace
VIEWSAV4 DS    0H
         MVC   COMMPRM(8),SAVEMBR      Move tranlated member name
         MVC   COMMPRM+8(4),CHGCTR     # modified lines for ISPF stats
         MVC   COMMPRM+12(4),COMWSTRT  Start address first line to save
         MVC   COMMPRM+16(4),COMMLAST  Start address last line to save
         MVI   COMMPRM+20,C'1'         Default option 1 in SAVE menu
         MVC   COMMPRM+21(1),AUTO      Default Autosave in RPFSAVE
*
*        If $COMCURR is on, no OS data set is loaded. Invoke RPFSAVE,
*        but without AUTOSAVE, so a SAVE menu is displayed.
*        $COMCURR is set if the data set is blanked on entry or
*        RPFEDIT is invoked by RPFLIB or invoked by RPFARCH
*
         TM    COMMFLG1,$COMCURR       EDIT current workspace?
         BNO   VIEWSAV6                Yes: SAVE without AUTOSAVE
         MVI   COMMPRM+21,C'N'         No Autosave in RPFSAVE
VIEWSAV6 DS    0H
         L     R15,EPSAVE              Entry point RPFSAVE
         LA    R1,PARMLST1             A(RPFCOMM)
         BALR  R14,R15                 Invoke RPFSAVE
         B     *+4(R15)                Initiate branchlist
         B     VIEWSAV7                Data set / member saved
         B     VIEWX37                 x37 abend (data set/member full)
         B     VIEWNOS                 Exit entered in RPFSAVE
         B     VIEWNOS                 Rc=12 should not happen
*
*        In VIEWSAV7 the data is succesfully saved. Test if a SAVE,
*        END or RETURN command is given. In case of a SAVE primary
*        command, the change modified flag and the number of changes
*        will be reset and flag $NOUPDVM to prevent a next increase
*        of VVMM in the ISPF stats of the member
*
VIEWSAV7 DS    0H
         CLC   =C'SAVE',BUFFER         Save command given?
         BNE   RETURN                  Return, END/RETURN command given
         OI    SW,$NOUPDVM             Flag no update ISPF VVMM on
         NI    COMMFLG4,255-$COMCHGD   Mark changes off, data saved
         XC    CHGCTR,CHGCTR           Number of changes set to 0
         MVC   MSG5,MSG6TXT            Msg: Data saved
         B     VIEW                    Stay in EDIT
VIEWX37  DS    0H
         MVC   MSG5,ERRWTXT            Msg: Abendx37 in RPFSAVE
         B     VIEW                    Redisplay screen
VIEWNOS  DS    0H
         CLC   =C'SAVE',BUFFER         Primary command SAVE given?
         BE    VIEW                    Yes: stay in EDIT
         LA    R15,20                  Rc = 20, not saved
         B     RETURN                  Exit
*---------------------------------------------------------------------*
*        Primary command: 'CANCEL' with alias 'CAN'                   *
*---------------------------------------------------------------------*
VIEWCAN  DS    0H
         TM    COMMFLG4,$COMVIEW       In VIEW mode?
         BO    RETURN                  Yes: return without SAVE
         TM    COMMFLG4,$COMCHGD       Any data changed?
         BNO   RETURN                  No: return
         MVC   MSG2,ERRDTXT            Msg: Discard changes?
VIEWCAN3 DS    0H
         TCLEARQ INPUT
         LA    R1,SCR2TXT              Screen address
         LA    R0,SCR2LEN              Screen length
         L     R15,=V(TPUTS)           Write screen routine
         BALR  R14,R15                 Execute
         L     R3,COMMSCR
         BAL   R2,VIEWTGET             Read reply
         TR    0(25,R3),COMTCAPS
         CLC   6(3,R3),=C'YES'         'Yes' entered?
         BE    VIEWCAN5                Yes: Discard changes
         CLC   6(2,R3),=C'NO'          'NO' entered?
         BE    VIEW                    Stay in EDIT
         MVC   MSG2,ERRKTXT            Msg: xxxxxxxx Yes or No
         MVC   MSG2+3(8),=CL8'Cancel'  Move verb into message
         B     VIEWCAN3                Issue 'Yes' or 'No'
VIEWCAN5 DS    0H
         LA    R15,20                  Rc = 20, not saved
         B     RETURN                  Exit RPFEDIT
*
VIEWTGET DS    0H                      BAL R2,VIEWTGET, R3=A(BUFFER)
         LR    R1,R3                   Buffer address to register 1
         ICM   R1,8,=B'10000001'       Indicate TGET ASIS
         LA    R0,250                  Length
         TGET  (1),(0),R               Read reply
         TCLEARQ INPUT                 Flush rest of the input
         BR    R2                      Return
*---------------------------------------------------------------------*
*        R E T U R N                                                  *
*------------------------------------------ (C)-2025 Skybird Systems -*
RETURN   DS    0H
         TM    COMMFLG2,$COMENQD       Any ENQ's outstanding?
         BZ    RETURN2                 No: return
         LA    R3,COMMQN               Qname (SPFEDIT) in RPFCOMM
         LA    R4,COMMRN
         LR    R2,R15                  Save return code
         XC    ENQLST,ENQLST           Clear parameter area
         MVI   ENQLST,X'C0'            Use original parameter list
         DEQ   ((3),(4),52,SYSTEMS),MF=(E,ENQLST),RET=HAVE
         LR    R15,R2                  Restore return code
         NI    COMMFLG2,255-$COMENQD   Turn off ENQ flag
RETURN2  DS    0H
         NI    COMMFLG1,255-$COMCURR   Set EDIT current workspace off
         NI    COMMFLG3,255-$COMAPND   Reset APPEND flag
         LR    R2,R15                  Save return code
         LR    R3,R13                  Our save and workarea
         L     R4,TOTSIZE              Size of working storag
         L     R13,4(,R13)             Load callers save area
         FREEMAIN R,A=(3),LV=(4)       Free the dynamic area
         LR    R15,R2                  Restore return code
         RETURN (14,12),RC=(15)
         TITLE 'S u b r o u t i n e s'
*---------------------------------------------------------------------*
*                                                                     *
*        Load the data in the EDIT workspace with RPFEDITL            *
*                                                                     *
*        Return codes: 00 - Data loaded with no errors.               *
*                      04 - Workspace truncated                       *
*                      08 - Data set/member empty (APPEND/COPY only)  *
*                      12 - I/O error                                 *
*                      16 - Data set/Member in use                    *
*                                                                     *
*        If called in APPEND mode (flag $COMAPND=ON), return code     *
*        16 won't be set.                                             *
*                                                                     *
*------------------------------------------ (C)-2025 Skybird Systems -*
LOAD     DS    0H
         ST    R14,R14LOAD             Save register 14
         L     R15,EPEDITL             Pickup Entry point
         LA    R1,PARMLST1             A(RPFCOMM)
         BALR  R14,R15                 Invoke RPFEDITL
         LR    R2,R1                   Save number of records loaded
         B     *+4(R15)                Initiate branchlist
         B     LOAD00                  Rc = 00, successfully loaded
         B     LOAD04                  Rc = 04, workspace truncated
         B     LOAD08                  Rc = 08, input is empty (APPEND)
         B     LOAD12                  Rc = 12, IO-error
         B     LOAD16                  Rc = 16, ENQ failed
LOAD00   DS    0H
         TM    COMMFLG3,$COMAPND       Load done by APPEND?
         BNO   LOAD98                  No: do not set Changed flag
         L     R15,=V(SETCHNG)         Yes: workspc changed by APPEND
         BALR  R14,R15
         B     LOAD98                  Continue processing
LOAD04   DS    0H
         TM    COMMFLG4,$COMVIEW       RPFEDIT in VIEW mode?
         BO    LOAD98                  Yes: accept truncation
         TM    COMMFLG3,$COMAPND       Truncation caused by APPEND?
         BNO   LOAD90                  No: terminate EDIT with rc=4
         MVC   MSG5,ERR1TXT            Msg: APPEND not executed
         B     LOAD90                  Set Return code 4
LOAD08   DS    0H
         MVC   MSG5,ERRGTXT            Msg: Data set is empty
         TM    COMMFLG3,$COMAPND       Truncation caused by APPEND?
         BNO   LOAD98                  No: go to input mode
         LA    R15,8                   Rc=8, data set/member empty
         B     LOAD99                  Inform caller
LOAD12   DS    0H
         MVC   MSG5,ERR2TXT            Msg: I/O error
         LA    R15,12                  Rc=12, I/O error
         B     LOAD99                  Continue processing
LOAD16   DS    0H
         LA    R15,16                  Rc=16, data set/member in use
         B     LOAD99
LOAD90   DS    0H
         LA    R15,4                   Rc=4, workspace truncated
         B     LOAD99                  Exit
LOAD98   DS    0H
         XR    R15,R15                 Rc=0 continue processing
LOAD99   L     R14,R14LOAD             Retore register 4
         LR    R1,R2
         BR    R14
*
LINKMOD  DS    0H
         ST    R14,R14LINK             Save register 14
         LA    R1,PARMLST1             Parameter
         XC    LNKLST(8),LNKLST        Clear EP and DCB address
         RPFSA24                       Go to AMODE 24
         LA    R14,EPLOC
         LINK  EPLOC=(14),SF=(E,LNKLST)
         RPFSA31                       Restore addressing mode
         L     R14,R14LINK             Restore register 14
         BR    R14                     Return
*---------------------------------------------------------------------*
*                                                                     *
*        Set the values of R3C91617, R4C91617, R5C91617, R6C91617     *
*        R7C91617.                                                    *
*        Row 3,4,5,6 or 7 and column 9 in std mode and COBOL mode on  *
*        screens with a width less than 88 columns.                   *
*        In COBOL mode with a screen of 88 columns or larger, the     *
*        column in these fields will be set to 16.                    *
*        If data is numbered variable set these fields to 17 to       *
*        point after the 8 character line number in col. 1-8          *
*                                                                     *
*------------------------------------------ (C)-2025 Skybird Systems -*
SETCOL   DS    0H
         ST    R14,R14SETC             Save register 14
         STM   R2,R5,SAVEWREG          Save work registers
         LA    R3,9                    Default column 9
         TM    COMMFLG1,$COMCOB        Cobol aligned?
         BNO   SETCOL3                 No: test others
         LA    R1,6                    Set offset to 6 (narrow screen)
         ST    R1,DATOFFS              Offset in data workspace because
*                                      COBOL source starts in column 7
         TM    SW,$WIDE                Do we have a screen > 88 columns
         BNO   SETCOL5                 Yes: leave default column to 9
         LA    R3,16                   Set default cursor column to 16
         XC    DATOFFS,DATOFFS         Set offset to 0 for a wide scr.
         B     SETCOL5                 Ready
SETCOL3  DS    0H
         CLC   =CL3'OFF',COMMNUM       Nonum data?
         BE    SETCOL5                 Yes: leave dft column to 9
         TM    COMMFLG4,$COMVB         Data set has variable records?
         BNO   SETCOL5                 No: leave dft column to 9
         ICM   R1,15,DATOFFS           Look if not right aligned
         BNZ   SETCOL5                 Yes: no change of default column
         LA    R3,17                   Else set default column to 17
SETCOL5  DS    0H
         LA    R4,3                    First row is row 3
         LA    R2,5                    Last row is row 7
         LA    R5,R3C91617
*
SETCOL7  DS    0H
         LR    R0,R4                   Row 3,4,5,6
         LR    R1,R3                   Column 09/16/17 (Csr on r3,c9)
         L     R15,=V(RCTOSBA)         Routine
         CALL  (15)                    Convert
         STCM  R0,3,0(R5)              r3/4/5/6/7 after insert
*                                      depending of scale line
         LA    R5,2(,R5)               Point to R3/R4/R5/R6/R7C91617
         LA    R4,1(,R4)               Next row
         BCT   R2,SETCOL7              Loop until done
         ST    R3,COLUMN               Save column position
         LM    R2,R5,SAVEWREG          Restore work registers
         L     R14,R14SETC             Restore register 14
         BR    R14                     Return
*---------------------------------------------------------------------*
*                                                                     *
*        C N V O U T - Compose screen from the workspace.             *
*                      R5 points to a workspace entry and will be     *
*                      mapped by the WORKSPCE DSECT in RPFCOMM        *
*                      R4 points to a line on the screen and will be  *
*                      mapped by the SCRLNE DSECT.                    *
*                      R6 is loaded with the # of data lines and is   *
*                         used to loop until all lines are on screen. *
*                                                                     *
*                      Input:  EDIT workspace                         *
*                      Output: SCR5TXT - The screen to be written     *
*                                                                     *
*------------------------------------------ (C)-2025 Skybird Systems -*
         SPACE 2
CNVOUT   DS    0H
         USING WORKSPCE,R5             Address workspace record
         USING SCRLNE,R4               Adress the screen line      @rpn
         ST    R14,R14CNVO             Save register 14
         LH    R6,#LINES               Number of lines (BCT)
         LA    R4,LNE5                 Point to data portion in screen
         TM    COMMFLG1,$COMCOLS       Flag scale line in RPFCOMM set?
         BNO   CNVOUT0A                No: display no scale line
*
*        Set a scale line in the first data line in the screen,
*        because the $COMCOLS flag is on.
*
         MVC   SCRLINE#,=C'=COLS>'     Move default indicator
         MVC   SCRLATR1,INTLOW         SF + Attr MDT off
         MVC   SCRLATR2,INTLOW         SF + Attr MDT off
         MVC   SCRLCLR1,=AL3(WHITE)    Line # becomes white
         MVC   SCRLCLR2,=AL3(WHITE)    Data becomes white in cols line
         L     R14,DATOFFS             Offset in data portion workspace
         L     R1,=V(TXT5SCL)          Point to scale line
         LA    R14,0(R1,R14)           Point to proper position
         L     R1,DATALEN              Length data portion in screen
         BCTR  R1,0                    Minus 1 for EX
         EX    R1,CNVOSCL              Move scale line into screen
         BCTR  R6,0                    1 data line less on screen
         L     R14,DATALINE            And set display
         LA    R4,0(R4,R14)                            1 line lower
CNVOUT0A DS    0H
         TM    COMMFLG2,$COMPROF       Profile line present?
         BNO   CNVOUT0B                No: display no PROFILE line
*
*        Set a Profile line in the first or second data line on the
*        screen, because the $COMPROF flag is on in COMMFLG2 in RPFCOMM
*        The PROFILE line contains the Numbered YES/NO, Cobol ON/OFF
*        Caps ON/OFF and Nulls ON/OFF.
*
         MVC   SCRLINE#,=C'=PROF>'     Move PROFILE indicator
         MVC   SCRLATR1,INTLOW         SF + Attr MDT off
         MVC   SCRLATR2,INTLOW         SF + Attr MDT off
         MVC   SCRLCLR1,=AL3(WHITE)    Line # becomes white
         MVC   SCRLCLR2,=AL3(WHITE)    Data becomes white in cols line
         L     R1,DATALEN              Length data portion in screen
         BCTR  R1,0                    Minus 1 for EX
         BCTR  R1,0                    Minus 2 for EX
         MVI   SCRLDATA,C' '           Blank first character
         EX    R1,CNVOPROF             Blank line first
         MVC   PROFNUM,COMMNUM         Move NUMBERED: xxx to profile
         MVC   PROFAUTO,=CL3'OFF'      Set default on OFF and
         CLI   AUTO,C'Y'               test AUTOSAVE flag afterwards
         BNE   *+10                    and leave this value on OFF
         MVC   PROFAUTO,=CL3'ON'       Change my mind and set to ON
*+10
         MVC   SCRLDATA(59),PROFLINE   Move PROFILE line
         BCTR  R6,0                    1 data line less on screen
         L     R14,DATALINE            And set display
         LA    R4,0(R4,R14)                            1 line lower
CNVOUT0B DS    0H
         CLC   COMMFSCR,COMWSTRT       Is this the first record in
*                                      the EDIT workspace?
         BNE   CNVOUT00                No: populate the screen.
*
*        Set a TOP OF DATA line in the first, second or third data
*        line on the screen, because the data in the EDIT workspace
*        is positioned on the first line.
*
         MVC   SCRLATR1,INTLOW         SF + Attr MDT off
         MVC   SCRLATR2,INTLOW         SF + Attr MDT off
         MVC   SCRLCLR1,=AL3(BLUE)     Line # becomes blue
         MVC   SCRLCLR2,=AL3(BLUE)     Data becomes blue in t.o.d. line
         MVC   SCRLINE#,=C'******'     Move TOP OF .....
         L     R1,DATALEN              Length of data portion on screen
         BCTR  R1,0                    Minus 2 for ...
         BCTR  R1,0                    ... EX instruction
         MVI   SCRLDATA,C'*'           Move first asterisk
         EX    R1,CNVOPROF             Fillup with asterisks
         L     R1,DATALEN              Position ...
         SRL   R1,1                    to the ...
         S     R1,=F'7'                middle ...
         LA    R14,SCRLDATA            of the ...
         LA    R1,0(R14,R1)            '** Top of data **' line
         MVC   0(13,R1),=C' Top of data '
         BCTR  R6,0                    1 data line less on screen
         L     R14,DATALINE            And set display
         LA    R4,0(R4,R14)                            1 line lower
CNVOUT00 DS    0H
         L     R5,COMMFSCR             Point to first line on screen
         XC    LCLINES(24),LCLINES     Reset line commands save-area
         LA    R7,LCLINES              Pointer to save-area
         B     CNVOUT01                Branch over MVC to execute
CNVOSCL  MVC   SCRLDATA(0),0(R14)      << executed >>
CNVOPROF MVC   SCRLDATA+1(0),SCRLDATA  << executed >>
CNVOUT01 DS    0H                      -- START LOOP
         MVC   SCRLINE#,WORKSLIN       Line number into screen     @rpn
         MVC   SCRLATR1,=X'1DC5'       No intensified MDT on unprot@rpn
         MVC   SCRLATR2,=X'1D40'       Reset attribute of data     @rpn
         MVC   SCRLCLR1,COLOR          Line # has default SA + color
         MVC   SCRLCLR2,=AL3(GREEN)    Data has default SA + color
         TM    WORKFLGS,$INSERTD       Inserted an empty line?
         BO    CNVOUT03                Yes: highlight line number
         CLC   SCR5SBAL,SCRLSBA1+1     Does SBA line number match
*                                      with cursor line in screen?
         BNE   CNVOUT04                No: do not highlight
CNVOUT03 DS    0H
         MVC   SCRLCLR1,=AL3(RED)      Inserted lines have red linenbrs
CNVOUT04 DS    0H
         TM    WORKFLGS,$CHLINE        Line changed with a 'C' command?
         BNO   CNVOUT05                No: branch
         MVC   SCRLCLR1,=AL3(WHITE)    Make line number white
CNVOUT05 DS    0H
         CLI   LCFLAG,X'FF'            Commands pending?
         BNE   CNVOUT11                No: branch
*
*        Highlight the linenumber if the line number contains
*        a pending line command and save the line number with the
*        line command and the original line number in the LCLINES table
*        LCLINES will be controlled by register 7.
*
         CLC   DESTCOMM,WORKSLIN       Linenumber equal?
         BNE   CNVOUT06                No: branch
         MVC   0(6,R7),SCRLINE#        Save linenumber             @rpn
         MVC   SCRLINE#,LCDEST         Destination in line
         MVC   6(6,R7),SCRLINE#        Save new linenumber         @rpn
         LA    R7,12(,R7)              Increase pointer LCLINES
         MVC   SCRLCLR1,=AL3(RED)      Paint the line number red
         B     CNVOUT09
CNVOUT06 DS    0H
         CLC   CMNDLIN1,WORKSLIN       Linenumer equal?
         BNE   CNVOUT07                No: branch
         MVC   0(6,R7),SCRLINE#        Save linenumber             @rpn
         MVC   SCRLINE#,LCCOM1         Command in line
         MVC   6(6,R7),SCRLINE#        Save new linenumber         @rpn
         LA    R7,12(,R7)              Increase pointer
         MVC   SCRLCLR1,=AL3(RED)      Paint the line number red
         B     CNVOUT09
CNVOUT07 DS    0H
         CLC   CMNDLIN2,WORKSLIN       linenumber equal?
         BNE   CNVOUT09                No: branch
         MVC   0(6,R7),SCRLINE#        Save linenumber             @rpn
         MVC   SCRLINE#,LCCOM2         Command in line
         MVC   6(6,R7),SCRLINE#        Save new linenumber         @rpn
         LA    R7,12(,R7)              Increase pointer
         MVC   SCRLCLR1,=AL3(RED)      Paint the line number red
CNVOUT09 DS    0H
         CLC   CMNDOVL1,WORKSLIN       OVLY line number equal?
         BNE   CNVOUT10                No: branch
         MVC   0(6,R7),SCRLINE#        Save linenumber
         MVC   SCRLINE#,LCOVL1         Command in line
         MVC   6(6,R7),SCRLINE#        Save new linenumber
         LA    R7,12(,R7)              Increase pointer
         MVC   SCRLCLR1,=AL3(RED)      Paint the line number red
CNVOUT10 DS    0H
         CLC   CMNDOVL2,WORKSLIN       OVLY line number equal?
         BNE   CNVOUT11                No: branch
         MVC   0(7,R2),SCRLINE#        Save linenumber
         MVC   SCRLINE#,LCOVL2         Command in line
         MVC   6(7,R2),SCRLINE#        Save new linenumber
         LA    R7,12(,R7)              Increase pointer
         MVC   SCRLCLR1,=AL3(RED)      Paint the line number red
CNVOUT11 DS    0H
         L     R1,DATALEN              Length of data portion in screen
         L     R15,DATOFFS             Offset data portion in workspce
         LA    R14,WORKDATA            Point to data portion in workspc
         LA    R14,0(R14,R15)          Adjust offset (RIGHT or COB)
         BCTR  R1,0                    -/- for execute
         EX    R1,CNVOUTX1             Data into screen
         EX    R1,CNVOUTX2             And translate
         NI    WORKFLGS,255-$BLOCK     Reset Unprintable block
         EX    R1,CNVOUTX3             Test on unprintables
         BZ    CNVOUT17                No: good
         OI    SW,$XLATED              Mark unprintables present
         OI    WORKFLGS,$BLOCK         Do not allow to modify a    @rpn
*                                      line with unprintables      @rpn
         B     CNVOUT17                And branch
CNVOUTX1 MVC   SCRLDATA(0),0(R14)      << executed >>
CNVOUTX2 TR    SCRLDATA(0),COMTRTAB    << executed >>              @rpn
CNVOUTX3 TRT   0(0,R14),COMTRTST       << executed >>              @rpn
CNVOUT17 DS    0H
         TM    WORKFLGS,$BLOCK         Line contains unprints?     @rpn
         BNO   CNVOUT19                No: branch                  @rpn
         MVC   SCRLATR2,INTLOW         Protect line                @rpn
         MVC   SCRLCLR2,=AL3(WHITE)    and color the line white
CNVOUT19 DS    0H
         TM    SW,$NULLS               NULLS marker on?
         BNO   CNVOUT29                No: continue
*
*        Remove trailing blanks in data line on screen because NULLS
*        is specified. This ends at label CNVOUT29
*
         LA    R14,SCRLDATA            Point to last byte in scrn line
         L     R1,DATALEN              Length of data portion
         BCTR  R1,0                    Minus 1
         LA    R14,0(R1,R14)           Point to last position in line
CNVOUT25 DS    0H
         CLI   0(R14),C' '             Trailing blank?             @rpn
         BNE   CNVOUT29                End of replace by null if not
         MVI   0(R14),X'00'            Replace blank by null       @rpn
         BCTR  R14,0                   Previous byte
         BCT   R1,CNVOUT25             Test again
*
CNVOUT29 DS    0H
         L     R14,DATALINE            Point to
         LA    R4,0(R4,R14)                     next line on screen
         L     R1,COMWRKEN             Length of workspace entry
         LA    R5,0(R1,R5)             Next line in workspace
         LR    R1,R4                   Pickup screen line
         BCTR  R1,0                    Point to last 2 bytes of ...
         BCTR  R1,0                    previous screenline to add ...
         MVC   0(2,R1),INTHIGH         SF + attr hi/prot/MDT off
         CL    R5,COMMLAST             Last record reached?
         BH    CNVOUT31                Yes: all lines written
         BCT   R6,CNVOUT01             -- END LOOP -- Next data line
         B     CNVOUT63                Screen is populated, write...
CNVOUT31 DS    0H                      *** Bottom of data *** line
         MVC   SCRLINE#,=C'******'     Fill with asterisks         @rpn
         MVC   SCRLATR1,INTLOW         Attribute of line #         @rpn
         MVC   SCRLATR2,INTLOW         Attribute of data           @rpn
         MVC   SCRLCLR1,=AL3(BLUE)     Set default
         MVC   SCRLCLR2,=AL3(BLUE)                SA + color
         L     R14,DATALEN             Length of data screen line
         BCTR  R14,0                   Minus 1 for EX
         BCTR  R14,0                   Minus 2 for EX
         MVI   SCRLDATA,C'*'           Move 1 asterisk
         EX    R14,CNVOUTX4            Move all asterisks in data line
         L     R1,DATALEN              Position ...
         SRL   R1,1                    to the ...
         S     R1,=F'8'                middle ...
         LA    R14,SCRLDATA            of the ...
         LA    R1,0(R14,R1)            '** bottom of data **' line
         MVC   0(16,R1),=C' Bottom of data '
         BCT   R6,CNVOUT35             Write blanks lines at the end
         B     CNVOUT63                Screen is populated, write...
CNVOUTX4 MVC   SCRLDATA+1(0),SCRLDATA  << executed >>
CNVOUT33 DS    0H                      Clear the rest of the screen
         XC    SCRLINE#,SCRLINE#       Clear linenumber on screen
         MVC   SCRLATR1,INTLOW         Attr: SF+prot/lowint/noMDT  @rpn
         MVC   SCRLATR2,INTLOW         Attr: SF+prot/lowint/noMDT  @rpn
         MVC   SCRLCLR1,COLOR          Set default
         MVC   SCRLCLR2,=AL3(GREEN)               SA + color
         L     R14,DATALEN             Length data portion screen line
         BCTR  R14,0                   Minus 1 for EX
         EX    R14,CNVOUTX5            and blank the rest
CNVOUT35 DS    0H
         L     R14,DATALINE            Point to
         LA    R4,0(R4,R14)                     next line on screen
         LR    R1,R4                   Pickup screen line
         BCTR  R1,0                    Point to last 2 bytes of ...
         BCTR  R1,0                    previous screenline to add ...
         MVC   0(2,R1),INTHIGH         SF + attr hi/prot/MDT off
         BCT   R6,CNVOUT33             Loop until last line cleared@rpn
         B     CNVOUT63                TPUT
CNVOUTX5 XC    SCRLDATA(0),SCRLDATA    << executed >>
CNVOUT63 DS    0H
         CLI   LCFLAG,X'FF'            Commands pending?           @rpk
         BNE   *+10                    No: branch around move      @rpk
         MVC   MSG5,PENDMSG            Move ... pending message    @rpk
*+10
         LA    R4,SCR5TXTF             Point to screen
         L     R5,TPUTLEN              Length of complete screen
         LA    R5,1(,R5)               Inclusive X'27' escape char.
         L     R6,COMMSCR              Point to screen space in RPFCOMM
         LR    R7,R5                   Copy length
         MVCL  R6,R4                   Copy data portion of screen
*                                      before compression
*
         L     R5,TPUTLEN              Length of complete screen
         LA    R5,1(,R5)               Inclusive X'27' escape char.
         ST    R5,LN3270               Copy L uncompressed stream
         LA    R0,LN3270               Length of data portion screen
         ST    R0,CBPRM1               Save in RPFC3270 PLIST
         LA    R0,COMMSIZE             Get screen dimensions address
         ST    R0,CBPRM2               Save in RPFC3270 PLIST
         L     R1,COMMSCR              Point to shadow of screen
         ST    R1,CBPRM3               Save in RPFC3270 PLIST
         L     R15,EPC3270             Point to RPFC3270 module
         LA    R1,CBPRM1               Plist
         BALR  R14,R15                 Execute compression
CNVOUT92 DS    0H
         L     R1,CBPRM1               A(Compressed length)
         L     R0,0(,R1)               Compressed length
         BCTR  R0,0                    Minus L'(X'27')
         L     R1,COMMSCR              Point to shadow
         LA    R1,1(,R1)               Point after X'27'
         L     R15,=V(TPUTS)           Write screen routine
         BALR  R14,R15                 Execute
*
*        Set the TPUT in NOEDIT mode, because an extended screen
*        could be used up to 16384 bytes. Examples are screens of
*        80 x 200 or 99 x 132. With TPUT FULLSCR
*        the X'1E' characters will be treated as the Field Mark and
*        will be swallowed, so the screen will be scattered due to
*        misplacing of the screen data. TPUT NOEDIT will prevent this,
*        because the X'1E' (could appear in a 14 bit SBA) will not
*        be treated as a Field Mark.
*
         MVC   SCR5ADDR+1(2),SBACMD    r2,c9 = cursor address
         CLI   LCFLAG,X'FF'            Commands pending?
         BNE   CNVOUT99                No: branch
         LA    R4,LNE5                 First line on screen
         LH    R6,#LINES               Screen size
         LA    R7,LCLINES              Pointer to line commands area
         TM    COMMFLG1,$COMCOLS       Cols on (Scale line)?
         BNO   CNVOUT95                No: good
         L     R14,DATALINE            Point to
         LA    R4,0(R4,R14)                     next line on screen
         BCTR  R6,0                    1 line less
CNVOUT95 DS    0H
         TM    COMMFLG2,$COMPROF       Profile line present?
         BNO   CNVOUT96                No: good
         L     R14,DATALINE            Point to
         LA    R4,0(R4,R14)                     next line on screen
         BCTR  R6,0                    1 line less
CNVOUT96 DS    0H
         CLC   COMMFSCR,COMWSTRT       *** top of data *** present?
         BNE   CNVOUT97                No: good
         L     R14,DATALINE            Point to
         LA    R4,0(R4,R14)                     next line on screen
         BCTR  R6,0                    1 line less
CNVOUT97 DS    0H
         CLC   SCRLINE#,6(R7)          Linenumber changed?         @rpn
         BNE   CNVOUT98                No
         MVC   SCRLINE#,0(R7)          Reset linenumber            @rpn
         LA    R7,12(,R7)              Increase pointer in LCLINES
         MVC   SCRLATR1,=X'1DC5'       Attribute of Linenumber     @rpn
CNVOUT98 DS    0H
         L     R14,DATALINE            Point to
         LA    R4,0(R4,R14)                     next line on screen
         BCT   R6,CNVOUT97             Process next line
CNVOUT99 DS    0H
         L     R14,R14CNVO             Restore register 14
         BR    R14                     Return
         DROP  R4,R5                                               @rpn
*---------------------------------------------------------------------*
*                                                                     *
*        C N V I N - Convert Screen output                            *
*                                                                     *
*        Issue a TGET ASIS to obtain the screen output of the         *
*        Editor. Scan all the return SBA's to obtain:                 *
*        - The command                                                *
*        - The values of BNDS                                         *
*        - The values of Scrl                                         *
*        - The data line, consisting of a Line number and a           *
*          data portion.                                              *
*        If the user has made updates, update the corresponding lines *
*        in the EDIT workspace.                                       *
*                                                                     *
*                    Input - A(COMMSCR) Unformatted terminal input    *
*                            after the TGET ASIS.                     *
*                          - The table SCRSBA, which consists of      *
*                            max. 97 SBA entries. Each 6 byte entry   *
*                            contains a SBA of the line number and    *
*                            a SBA of the data line.                  *
*                                                                     *
*                   Output - Formatted Workspace input, SBA's are     *
*                            removed, trailing blanks in the data     *
*                            lines are added and the AID byte is      *
*                            examined.                                *
*                          - Register 15: 0 - format succesfull, all  *
*                                             data lines in workspace *
*                                         4 - No data after TGET ASIS *
*                                         8 - Format failed, because  *
*                                             SBA's were not found.   *
*                          - Register 5: Address last line in work    *
*                                        area.                        *
*                          - Register 6: Address line with unmodified *
*                                        data.                        *
*        Register usage:                                              *
*        Register 3 points to a location in the output buffer         *
*        Register 4 points to a workspace line entry                  *
*        Register 7 points to a screen line                           *
*        Register 8 is the loop counter of the number of lines        *
*                                                                     *
*------------------------------------------ (C)-2025 Skybird Systems -*
CNVIN    DS    0H
         ST    R14,R14CNVIN
         L     R3,COMMSCR              Point to input buffer
         LR    R4,R3                   Adress input area from RPFCOMM
         L     R5,COMMSCLN             Length input area
         LR    R6,R4                   Same address in operand 2
         XR    R7,R7                   Length= 0, fill= X'00'
         MVCL  R4,R6                   Clear input area
         L     R0,TPUTLEN              Length of TPUT
         LR    R1,R3                   Buffer, screen output
         ICM   R1,8,=B'10000001'       Indicate TGET ASIS
         TGET  (1),(0),R
         CH    R1,=H'3'                AID byte only/Clear key/No input
         BNH   CNVIN83                 Yes: exit, rc= 4 - clear key
         MVI   MSG5,C'-'               Clear
         MVC   MSG5+1(L'MSG5-1),MSG5        message
         MVC   AIDBYTE,0(R3)           Save AID byte
         MVC   CURSOR,1(R3)            Save cursor address
         LR    R6,R1                   Save input length
         LA    R2,0(R6,R3)             Point to end of input buffer
         ST    R2,BUFFEND              Save pointer end buffer
         LA    R3,3(,R3)               Point after AID and cursor addr.
CNVIN03  DS    0H
         CLI   0(R3),COMMSBA           SBA after 'Cmd =>'
         BE    CNVIN05
         LA    R3,1(,R3)               Next byte
         CL    R3,BUFFEND              End of input buffer?
         BNL   CNVIN85                 Should not happen - convert fail
         B     CNVIN03                 Examine next byte
CNVIN05  DS    0H
         CLC   1(2,R3),SBACMD          Command on r02,c09?
         BNE   CNVIN11                 No: check BNDS
         LA    R4,BUFFER               Point to command buffer
         LA    R3,3(,R3)               Point after SBA after 'Cmd =>'
         MVI   BUFFER,C' '             Blank
         MVC   BUFFER+1(L'BUFFER-1),BUFFER   buffer
CNVIN07  DS    0H
         CLI   0(R3),COMMSBA           SBA order after command input?
         BE    CNVIN11                 Yes: test SBA
         MVC   0(1,R4),0(R3)           Move 1 char of command into wa
         LA    R3,1(,R3)               Next character
         LA    R4,1(,R4)               Next character output
         CL    R3,BUFFEND              End of buffer?
         BNL   CNVIN85                 Yes: RC= 8,  convert failed
         B     CNVIN07                 Examine next byte
CNVIN11  DS    0H
         CLC   1(2,R3),SBABNDS         Value of 'BNDS' in screen?
         BNE   CNVIN16                 No: check Scroll value
         LA    R3,3(,R3)               Point after SBA of BNDS
         XC    BNDSNUM,BNDSNUM         Clear boundery field
         LA    R1,7                    Max length of BNDS field
         LA    R14,BNDSNUM             Point to field
CNVIN13  DS    0H
         CLI   0(R3),COMMSBA           SBA order found (end of BNDS)
         BE    CNVIN15                 Loop until SBA found
         MVC   0(1,R14),0(R3)          Move byte of boundary if present
         LA    R3,1(,R3)               Point 1 byte after BNDS
         LA    R14,1(,R14)             Next byte in BNDSNUM
         BCT   R1,CNVIN13              Loop
CNVIN15  DS    0H
         L     R15,=V(BNDS)            Set BNDS ...
         CALL  (15)                                into screen
CNVIN16  DS    0H
         CLC   1(2,R3),SBASCRL         SBA after 'SCRL'?
         BNE   CNVIN29                 No: Move lines
         LA    R3,3(,R3)               Point after SBA order + address
         CLI   0(R3),COMMSBA           SBA order (SCROLL field erased)?
         BE    CNVIN29                 Yes: do not change SCROLL value
         OI    0(R3),X'40'             Xlate to upper case
         CLI   0(R3),C'F'              Scroll = FULL?
         BE    CNVIN17                 Yes: Same as Scroll = PAGE
         CLI   0(R3),C'P'              Scroll 'PAGE' (Alias of FULL)?
         BNE   CNVIN19                 No: test other scroll values
CNVIN17  MVC   SCROLNUM(4),SCRPAGE     Page = 21/22 -> 96/97 lines
         MVC   SCROLL5+06(4),=C'PAGE'  Scroll a full page
         B     CNVIN27                 Fill screen
CNVIN19  CLI   0(R3),C'H'              Half ?
         BNE   CNVIN21                 No: try others
         MVC   SCROLNUM(4),SCRHALF     Half = 10 -> 48 lines
         MVC   SCROLL5+06(4),=C'HALF'
         B     CNVIN27                 Fill screen
CNVIN21  CLI   0(R3),C'L'              'L' (Scroll 1 line)?
         BNE   CNVIN23                 No: test of 'CSR'
         MVC   SCROLNUM(4),=C'01  '    Line = 01 lines
         MVC   SCROLL5+06(4),=C'LINE'  Scroll 1 line
         B     CNVIN27                 Fill screen
CNVIN23  CLI   0(R3),C'C'              Scroll 'CSR' (cursor)
         BNE   CNVIN25                 No: error
         MVC   SCROLL5+06(4),=C'CSR '  Scroll from cursor position
         MVC   SCROLNUM(4),=C'CSR '
         B     CNVIN27                 Branch of error.
CNVIN25  MVC   MSG5(L'ERRETXT),ERRETXT Msg: Invalid scroll value
CNVIN27  LA    R3,1(,R3)               Point after Scroll
         CLI   0(R3),COMMSBA           SBA of next field?
         BNE   CNVIN27                 Loop until this SBA found
CNVIN29  DS    0H
         L     R5,COMMFSCR             Point to First line on screen
         LR    R4,R5                   of EDIT workspace
         SL    R5,COMWRKEN             Point 1 record before
*---------------------------------------------------------------------*
*        Process linenumbers on screen and data lines.                *
*                                                                     *
*        Test if SBA is from a line-number and process the line number*
*        R5 points to the beginning of the current workspace record   *
*        R2 points to an entry in the SCRSBA table (till CNVIN41)     *
*---------------------------------------------------------------------*
CNVIN31  DS    0H                                                  @rp9
         LH    R8,#LINES               Max 22 -> 97 lines        (BCT)
         LA    R7,LNE5                 Point to SBA's (SBA scan)
         USING SCRLNE,R7               Address screen line         @rpn
         LA    R2,SCRSBA               SBA table linenbr/line      @rp9
CNVIN33  DS    0H
         CLC   0(3,R3),0(R2)           SBA from linenumber on screen?
         BE    CNVIN35                 Yes: move line number
         L     R14,DATALINE            Next
         LA    R7,0(R7,R14)                 line
         LA    R2,6(,R2)               Next entry in SBA table     @rp9
         BCT   R8,CNVIN33              Next SBA
         B     CNVIN85                 Rc = 8, convert failed      @rp9
CNVIN35  DS    0H
         LA    R3,3(,R3)               Point after SBA
         CL    R3,BUFFEND              End of buffer reached?      @rp9
         BNL   CNVIN80                 Yes: exit   *-*             @rp9
         L     R1,COMWRKEN
         LA    R5,0(R1,R5)             Next line in workspace
         LR    R4,R5                   Point to next line
         CLI   0(R3),COMMSBA           SBA ? (linenbr erased?)     @rp9
         BE    CNVIN38                 No line number/Data line    @rp9
         USING WORKSPCE,R4             Address record in workspace
         MVC   WORKSLIN,SCRLINE#       Get linenumber              @rpn
         STM   R3,R4,PARMLST2          Parm 2 and 3
         LA    R1,PARMLST1             Pickup PARM
         L     R15,=V(LCOMMAND)        Process line commands       @rpk
         CALL  (15)                    Execute                     @rpk
         LA    R1,6                    Max length of line number
*
*        Search one by one for the next SBA, because the DEL of EOF
*        key can be used in the line number field on the screen.
*
CNVIN36  DS    0H
         CLI   0(R3),COMMSBA           SBA found ?                 @rp9
         BE    CNVIN38                 Yes: possible data line
         LA    R3,1(,R3)               Next position in TGET buffer
         CL    R3,BUFFEND              End of Buffer ?             @rp9
         BNL   CNVIN80                 Yes: exit, Rc = 0   *-*     @rp9
         BCT   R1,CNVIN36
*                                      No EOF/DEL key used
         CLI   0(R3),COMMSBA           SBA after 6 pos. line found?
         BNE   CNVIN39                 No: test buffer end         @rp9
CNVIN38  DS    0H
         CLC   0(3,R3),3(R2)           SBA of data?                @rp9
         BNE   CNVIN31                 No:  Test if line number SBA@rp9
         LA    R3,3(,R3)               Point after SBA             @rp9
         B     CNVIN41                 Yes: Process data line      @rp9
CNVIN39  DS    0H                                                  @rp9
         CL    R3,BUFFEND              End of Buffer ?             @rp9
         BNL   CNVIN80                 Yes: exit, Rc = 0   *-*     @rp9
         B     CNVIN85                 No: Rc = 8 - convert failed
*        Process data line
*        This routine will only be executed if the MDT of the data
*        line is set by an update on that line. Default the MDT is off.
CNVIN41  DS    0H
         CLC   =CL3'ON',COMMNUM        Line numbers?
         BNE   CNVIN45                 No: skip
         TM    COMMFLG4,$COMVB         Number VB data(nmbrs in col 1-8)
         BNO   CNVIN42                 No: test others
*
*        First 8 bytes will be saved and restored if linenumbers = YES
*        and original data set have variable records.
*        The reason of this, is that the user has the possibility
*        to remove the sequence numbers in the first 8 colums. To
*        preserve this, the sequence number will be restored.
*
         MVC   NUMFLD(6),SCRLINE#      Move screen line number
         MVC   NUMFLD+6(2),=C'00'      Move trailing zeroes
         MVC   SAVELIN#,NUMFLD         Save first 8 columns
         B     CNVIN45                 Branch
CNVIN42  DS    0H                                                  @rp9
         TM    COMMFLG1,$COMCOB        Cobol aligned (nmbrs in col 1-6)
         BNO   CNVIN43                 No: std numbers
         MVC   WORKDATA(6),SCRLINE#    Copy sequence number
*
*        First 6 bytes will be saved and restored if linenumbers = YES
*        and COBOL flag is on.
*        The reason of this, is that the user has the possibility
*        to remove the sequence numbers in the first 6 colums. To
*        preserve this, the sequence number will be restored.
*
         MVC   SAVELIN#,WORKDATA       Save first 6 columns
         B     CNVIN45                 Branch
CNVIN43  DS    0H
         MVC   NUMFLD(6),SCRLINE#      Move line number from screen
         MVC   NUMFLD+6(2),=C'00'      Move trailing zeroes
         L     R14,COMMRECL            LRECL of data set or member
         S     R14,=F'8'               Minus 8 for line number
         LA    R15,WORKDATA            Point to data portion
         LA    R15,0(R14,R15)          Point to last 8 bytes
         MVC   0(8,R15),NUMFLD         Update sequence number in data
*
*        Last 8 bytes will be saved and restored if linenumbers = YES
*        The reason of this, is that the user has the possibility
*        to remove the sequence numbers in the last 8 colums. To
*        preserve this, the sequence number will be restored.
*
         MVC   SAVELIN#,0(R15)         Save last 8 columns
CNVIN45  DS    0H
*
*        If DATOFFS = 0 then the left part of the data will be
*        set on the screen. If a RIGHT primary command is given,
*        this field will be adjusted, so the right part will be set
*        on the screen. If a COBOL ON command is given, DATOFFS = 6.
*        If the screen width+8 >= LRECL then DATOFFS = 0.
*
         LA    R1,WORKDATA             Point to data portion
         L     R14,DATOFFS             Offset in data in workspace
         LA    R1,0(R1,R14)            Adjust offset
         L     R14,DATALEN             Length of data portion in screen
         BCTR  R14,0                   Minus 1 for EX
         EX    R14,CNVINEX1            Save unmodified data line
         BCTR  R14,0                   Discount extra byte
         MVI   0(R1),C' '              Blank firs pos. workspace line
         EX    R14,CNVINEX2            And blank the rest
         B     CNVIN54                 Branch over executed instr.
CNVINEX1 MVC   TSTLINE(0),0(R1)        << executed >>
CNVINEX2 MVC   1(0,R1),0(R1)           << executed >>
CNVIN54  DS    0H
*---------------------------------------------------------------------*
*        Process data portion of the line
*        R1 points to data portion and R6 points to unmodified data
*        R3 still points to a character in the TGET buffer
*        R4 still points to the start of the EDIT workspace entry
*        R15 is a placeholder in the data portion (WORKDATA)
*---------------------------------------------------------------------*
         LA    R15,WORKDATA            Point to data portion in workspc
         LR    R1,R15                  Copy into R1
         L     R14,DATOFFS             Adjust offset ...
         LA    R15,0(R15,R14)     (first data position on screen line)
         LA    R6,TSTLINE              Point to unmodified line    @rp9
CNVIN59  DS    0H
         CLI   0(R3),COMMSBA           SBA order of next line number?
         BE    CNVIN62                 Yes: data line is finished
         CL    R3,BUFFEND              End of buffer?
         BNL   CNVIN64                 Yes: all done
         MVC   0(1,R15),0(R6)          Move 1 char. unmodified data
         TM    SW,$XLATED              Invalid characters in data?
         BNO   CNVIN60                 No: good, don't translate
         MVC   TSTCHAR,0(R6)           Move unmodified character
         TR    TSTCHAR,COMTRTAB        Translate character
         CLC   TSTCHAR,0(R3)           Still the same?
         BE    CNVIN61                 Yes: no change
CNVIN60  DS    0H
         MVC   0(1,R15),0(R3)          Move 1 character in workspace
         TM    SW,$ASIS                Caps = OFF?
         BO    CNVIN61                 Yes: do not translate to upper
         TR    0(1,R15),COMTCAPS       Translate the moved character
CNVIN61  LA    R3,1(,R3)               Next char. in TGET buffer
         LA    R15,1(,R15)             Next char. in WORKDATA (workspc)
         LA    R6,1(,R6)               Next char. in TSTLINE (unmodif.)
         B     CNVIN59                 Next character if any
CNVIN62  L     R14,DATOFFS             Adjust
         LA    R1,0(R1,R14)                   offset
         L     R14,DATALEN             Length of data portion in screen
         NI    WORKFLGS,255-$INSERTD   Set inserted flag off
         BCTR  R14,0                   Minus 1 for EX
         EX    R14,CNVINEX3            Compare with original line
         BE    CNVIN63                 Not changed: process next line
         L     R15,=V(SETCHNG)         Mark data changed in workspace
         CALL  (15)
         BAL   R2,CNVINMM              Set ISPF MM in sequence number
CNVIN63  DS    0H
*---------------------------------------------------------------------*
*        Next line
*---------------------------------------------------------------------*
         B     CNVIN31                 Process next line
*
CNVINEX3 CLC   0(0,R1),TSTLINE         << executed >>
CNVIN64  DS    0H
*---------------------------------------------------------------------*
*        Test if the last data line on screen is changed
*---------------------------------------------------------------------*
         LA    R2,CNVIN80    <-------| New branch addr. CNVINMM
         L     R14,DATALEN           | Length of data portion in screen
         BCTR  R14,0                 | Minus 1 for EX
         NI    WORKFLGS,255-$INSERTD | Set inserted flag off
         EX    R14,CNVINEX3          | Compare with original line
         BE    CNVINMM       <-------|Not changed: restore line numbers
         L     R15,=V(SETCHNG)         Mark data changed in workspace
         CALL  (15)
*---------------------------------------------------------------------*
*        Routine CNVINMM:
*        Restore last 8 columns if std numbered, first 6 columns
*        if COBOL numbered or first 8 columns if variable data
*---------------------------------------------------------------------*
CNVINMM  DS    0H            <------|
         CLC   =CL3'ON',COMMNUM     |  Do we have sequence numbers?
         BNER  R2            <------|  No: ready
         SL    R1,DATOFFS           |  Point to begin of data portion
         TM    COMMFLG4,$COMVB      |  Do we have variable records?
         BNO   CNVINMM1             |  No: test others
         MVC   0(8,R1),SAVELIN#     |  Restore VB seq. numbers (1-8)
         MVC   6(2,R1),COMMEMM      |  Move ISPF/RPF mm in seq. number
         BR    R2            <------|  Branch
CNVINMM1 DS    0H                   |
         TM    COMMFLG1,$COMCOB     |  Do we have COBOL seq. numbers?
         BNO   CNVINMM2             |  No: process std seq. numbers
         MVC   0(6,R1),SAVELIN#     |  Restore COBOL seq. number 1-6
         BR    R2            <------|  Branch
CNVINMM2 DS    0H                   |
         L     R14,COMMRECL         |  LRECL of data or member
         S     R14,=F'8'            |  Minus 8 (length sequence number)
         LA    R14,0(R1,R14)        |  Point to sequence number
         MVC   0(8,R14),SAVELIN#    |  Restore sequence number
         MVC   6(2,R14),COMMEMM     |  Move ISPF/RPF mm in seq. number
         BR    R2            <------|  Branch
*
CNVIN80  DS    0H
         XR    R15,R15                 Rc= 0 - all data converted
         B     CNVIN99                 Exit
CNVIN83  LA    R15,4                   Rc= 4 - No input/CLEAR key
         B     CNVIN99                 EXIT
CNVIN85  LA    R15,8                   Rc= 8 - Convert failed
CNVIN99  DS    0H
         L     R14,R14CNVIN            Restore return register
         MVI   RESETFLG,0              Reset flag in LCOMMAND
         DROP  R4,R7
         BR    R14
         TITLE 'Constants'
*
ERR1TXT  DC    CL25'----- APPEND not executed'
ERR2TXT  DC    CL25'--------------- I/O error'
ERR4TXT  DC    CL25'--- Save rejected in VIEW'
ERR5TXT  DC    CL25'--------- Invalid command'
ERR6TXT  DC    CL25'-- Workspace not numbered'
ERRATXT  DC    CL25'-- No JOB statement found'
ERRCTXT  DC    CL25'------- Data will be lost'
ERRDTXT  DC    CL25'-------- Discard changes?'
ERRETXT  DC    CL25'---- Invalid scroll value'
ERRFTXT  DC    CL25'-- No card image data set'
ERRGTXT  DC    CL25'------- Data set is empty'
ERRHTXT  DC    CL25'----- Invalid line number'
ERRITXT  DC    CL25'----------- Submit failed'
ERRKTXT  DC    CL25'-- xxxxxxxx ''Yes'' or ''No'''
ERRLTXT  DC    CL25'--------- PFK not defined'
ERRMTXT  DC    CL25'---PFK definition invalid'
ERRWTXT  DC    CL25'---- Abend x37 in RPFSAVE'
ERRXTXT  DC    CL25'---- Input convert failed'
ERRYTXT  DC    CL25'-- Enter "RETRY" or "END"'
ERRZTXT  DC    CL25'----- Nothing to RETRIEVE'
ERR@TXT  DC    CL25'Enter SAVE, CANCEL or END'
ERR#TXT  DC    CL25'---- Conflicting commands'
ERR$TXT  DC    CL25'---- Command not executed'
MSG1TXT  DC    CL25'---- Workspace renumbered'
MSG2TXT  DC    CL25'-- JOB xxxxxxxx submitted'  +7
MSG3TXT  DC    CL25'---- Invalid chars xlated'
MSG6TXT  DC    CL25'-------------- Data saved'
MSG7TXT  DC    CL25'Data set created/replaced'
INTLOW   DC    X'1DF0'                Protected not intensified MDT off
INTHIGH  DC    X'1DF8'                 Protected intensified MDT off
         LTORG
         TITLE 'EDIT screen, will be copied to SCR5TXT'
SCREENTX CSECT
SCRBTXTF DC    X'27'                   Escape character TPUT FULLSCR
SCRBTXT  DC    X'F1C2'                 Write no-erase, keyboard unlock
         DC    X'1100001DF8'
SBAB#0   DC    X'110000'               r1, c56+
MSGB     DC    CL25' '
SCRBR2C1 DC    X'110000',X'1DF8',C'Cmd =>',X'1D4013'
         DC    CL048' ',X'1DF0'
SCRBLEN  EQU   *-SCRBTXT
SCRBLENF EQU   *-SCRBTXTF
         ORG ,
SCRETXTF DC    X'27'                   Escape character TPUT FULLSCR
SCRETXT  DC    X'00C2'                 Cmd = EW or EWA, WCC = no
*                                      reset MDT and keyboard unlock
SCREADDR DC    XL4'11000013'           Address of cursor
R1CE     DC    XL5'1100001DF8'         Reset address
SCRESTA  DC    CL06' ',C' '
SCREHDR  DS    CL49
SCREEHDR DS    CL26'---------------------'
SCREEXT  DC    CL100' '
*
SBAE#0   DC    XL3'110000'             r01,c (width screen - 21)
MSGE     DC    CL25' '
SCRER2C1 DC    XL5'1100001DF8'
         DC    CL6'Cmd =>'
         DC    XL2'1DC1'
         DC    AL3(USCORE)
REE1     DC    CL48' '
         DC    AL3(HDEFAULT)
         DC    XL2'1DF0'
*
         DC    CL21' '
SBAESCP  DC    XL3'110000'
BNDSE    DC    CL4'BNDS'
         DC    XL2'1DC8'
         DC    CL7'XXX,XXX'
         DC    XL2'1DF0'
SCROLLE  DC    CL4'SCRL'
         DC    XL2'1DC8'
         DC    CL4'XXXX'
         DC    XL2'1DF0'
SCRELEN  EQU   *-SCRETXT
SCRELENF EQU   *-SCRETXTF
SCREENL  EQU   *-SCREENTX              Length of both screens
*
         DROP
LARGE    CSECT
TXT5SCL  DC    CL80'----+----1----+----2----+----3----+----4----+----5-C
               ---+----6----+----7----+----8'
         ENTRY TXT5SCL
TXT5SCL2 DC    CL80'----+----9----+---10----+---11----+---12----+---13-C
               ---+---14----+---15----+---16'
TXT5SCL3 DC    CL80'----+---17----+---18----+---19----+---20----+---21-C
               ---+---22----+---23----+---24'
TXT5SCL4 DC    CL15'----+---25----+'
         LTORG ,
         TITLE 'COPY routine'
*---------------------------------------------------------------------*
*                                                                     *
*        C O P Y - Copy LN1 through LN2 after LN3                     *
*                                                                     *
*                  INPUT:  Command buffer                             *
*                  OUTPUT: Register 15, rc = 0 - COPY successful      *
*                                       rc = 4 - errors detected      *
*                          MSG5 - error message indicating COPY       *
*                                                                     *
*------------------------------------------ (C)-2025 Skybird Systems -*
         SPACE 2
COPY     CSECT
         USING WORKAREA,R13            Make RPFEDIT workarea available
         USING COMMAREA,R11            Make RPFCOMM available
         STM   R2,R14,SAVECPY          Save registers
         LR    R12,R15                 Setup base
         USING COPY,R12                Address LINE routine
         XC    REP5,REP5               Clear reply/command area
         LA    R1,BUFFER+3             Point after 'CO ' (operands)
         L     R15,=V(LINE)           Fill in LN1FLD, LN2FLD and LN3FLD
         CALL  (15)                    Scan for line numbers
         B     COPY01(R15)             Branchlist
COPY01   B     COPY03                  Rc = 0, no errors
         B     COPY97                  Rc = 4, invalid line(s)
COPY03   DS    0H                      (message set by LINE routine)
         CLI   LN1FLD,C'*'             '*' - current line?
         BNE   COPY06                  No: continue
         L     R3,COMMFSCR             Point to current line
         USING WORKSPCE,R3             Make workspace entry addressable
         MVC   LN1FLD+2(6),WORKSLIN    Line number into LN1FLD
         MVC   LN1FLD(2),=C'00'        Insert leading zeroes
COPY06   DS    0H
         LA    R1,LN1FLD+2             Line 1 = copy block -1-
         L     R15,EPSRCH              Entry point SRCHLINE
         BALR  R14,R15                 Execute (register 1 = set)
         IC    R14,=C'1'               Line number into message
         LTR   R15,R15                 Line found?
         BNZ   COPY85                  No: give error message
         LR    R7,R1                   Address of found line in reg.
         LA    R1,LN2FLD+2             Line 2 = copy block -2-
         L     R15,EPSRCH              Load entry point SRCHLINE
         BALR  R14,R15                 Execute
         IC    R14,=C'2'               Line number into message
         LTR   R15,R15                 Line found?
         BNZ   COPY85                  No: give error message
         LR    R8,R1                   Address of found line in reg.
         CLC   0(6,R8),0(R7)           Line-2 < Line-1?
         BL    COPY95                  Yes: Invalid copy range
         CLC   LN3FLD,=C'00000000'     Copy before first line?
         BNE   COPY08                  No: Branch
         L     R2,COMWSTRT             Point to 1st record in workspace
         L     R1,COMWRKEN             Length of 1 workspace entry
         SLR   R2,R1                   Pointer before first record
         B     COPY11                  Branch
COPY08   DS    0H
         LA    R1,LN3FLD+2             Line 3 = to copy after
         L     R15,EPSRCH              Load entry point SRCHLINE
         BALR  R14,R15                 Execute (register 1 is set)
         IC    R14,=C'3'               Execute
         LTR   R15,R15                 Line found?
         BNZ   COPY85                  No: give error message
         LR    R2,R1                   Address of found line in reg.
COPY11   DS    0H
         CR    R2,R8                   LN3 (after) < LN2 (To line)
         BNL   COPY15                  No: proceed
         CR    R2,R7                   LN3 (after) < LN1 (From line)
         BNL   COPY95                  No: error, the line After
*                                      cannot be located between the
*                                      From and the To line
COPY15   DS    0H
         STM   R7,R8,DELSAVE           Save A(LN1 + LN2) for MOVE
         ST    R2,DELSAVE+8            Save A(LN3) for MOVE
         SLR   R8,R7                   R8= LN2 - LN1
         L     R1,COMWRKEN             Length workspace entry
         LA    R8,0(R1,R8)             R8= R8 + Length workspc entry
         L     R3,COMMLAST             R3= COMMLAST
         LA    R3,0(R8,R3)             R3= R3 + copied lines
         CL    R3,COMWRKND             End of workspace?
         BH    COPY91                  Yes: error
         L     R4,COMMLAST             Point to COMMLAST
         ST    R3,COMMLAST           COMMLAST=COMMLAST+len copied lines
         L     R1,COMWRKEN             Register 1 = L'workspace entry
COPY17   DS    0H
         L     R14,COMMRECL            Record length WORKDATA/Input
         BCTR  R14,0                   Minus 1 for EX
         MVC   0(8,R3),0(R4)           Move linenumber + flags and
         EX    R14,COPYEX1             data portion to the end
         SLR   R3,R1                   R3= R3 - L'workspace entry
         SLR   R4,R1                   R4= R4 - L'workspace entry
         CR    R3,R2                   LN3 reached ? (after)
         BNH   COPY18                  Yes: stop moving lines
         CR    R4,R2                   LN3 reached ? (before)
         BNH   COPY18                  Yes: stop moving lines
         B     COPY17                  Move next line
COPYEX1  MVC   WORKDATA,8(R4)          << executed >>
COPY18   LR    R4,R2                   Point to LN3 (to copy after)
         L     R1,COMWRKEN             Length of workspace entry
         LA    R4,0(R1,R4)             Point after LN3    (MVCL/MVCLE)
         LR    R5,R8                   Length             (MVCL/MVCLE)
         LR    R6,R7                   Copy from          (MVCL/MVCLE)
         LR    R7,R5                   Length             (MVCL/MVCLE)
         CR    R4,R6                   After > From?
         BH    COPY19                  No: skip pointer adjustment
         LA    R6,0(R5,R6)             Add # of lines to displacement
COPY19   DS    0H
         AIF   (NOT &OS390).NOLE1
         STCM  R5,8,CPYMVC             Store hi order
         TM    CPYMVC,X'FF'            > 16 MB?
         BZ    COPY19CL                No: use MVCL instead of MVCLE
         XC    DBW,DBW                 Clear 2nd operand and pad
         MVCLE R4,R6,DBW               Copy records (> 16MB)
         BC    1,*-4                   Complete MVCLE
         B     COPY20                  Branch over MVCLE
.NOLE1   ANOP
COPY19CL MVCL  R4,R6                   Copy records
COPY20   DS    0H
         L     R15,=V(NUMBER)          Entry point NUMBER routine
         CALL  (15)                    Renumber workspace
         L     R15,=V(SETCHNG)         Mark data changed in workspace
         CALL  (15)
         XR    R15,R15                 Clear register 15 (return code)
         B     COPY99
COPY85   MVC   MSG5,COP2TXT            Msg: Line-x not found
         STC   R14,MSG5+14             Line number (1,2,3) in message
         B     COPY97
COPY91   MVC   MSG5,COP1TXT            Msg: Copy terminated
         B     COPY97
COPY95   MVC   MSG5,COP3TXT            Msg: Invalid COPY range
COPY97   MVC   REP5,BUFFER             Repeat command
         LA    R15,4                   RC = 4, error
COPY99   LM    R2,R14,SAVECPY          Restore registers
         BR    R14                     Display screen
COP1TXT  DC    CL25'--------- Copy terminated'
COP2TXT  DC    CL25'-------- Line-X not found'     14
COP3TXT  DC    CL25'------ Invalid copy range'
         DROP
         LTORG ,
         RCTOSBA RENT=YES              Convert Row/Column to SBA
         COPY  TPUTS
         TITLE 'MOVE routine'
*---------------------------------------------------------------------*
*                                                                     *
*        M O V E - Move LN1 until LN2 after LN3                       *
*                                                                     *
*                  INPUT:  BUFFER                                     *
*                          DELSAVE - 3 fullwords containing the       *
*                                    addresses of line-1, line-2      *
*                                    and line-3 in the workspace.     *
*                  OUTPUT: Reg.15, Rc= 0000 - move successful         *
*                                      0004 - error during copy       *
*                          MSG5 - Error message                       *
*                                                                     *
*------------------------------------------ (C)-2025 Skybird Systems -*
MOVE     CSECT
         USING WORKAREA,R13            Make RPFEDIT workarea available
         USING COMMAREA,R11            Make RPFCOMM available
         STM   R2,R14,SAVEMVE          Save registers
         LR    R12,R15                 Setup base
         USING MOVE,R12                Address LINE routine
         L     R15,=V(COPY)            Execute COPY lines
         CALL  (15)
         LTR   R15,R15                 Ok?
         BNZ   MOVE99                  No: exit
         MVC   MOVE1SCR,COMMFSCR       Save addr. 1st record on screen
         LM    R7,R8,DELSAVE           Pick-up A(LN1) and A(LN2) @rpa01
         L     R2,DELSAVE+8            Pick-up A(LN3)            @rpa01
         LR    R1,R8                   LN2 into register 1
         SLR   R1,R7                   Minus A(LN1)
         L     R14,COMWRKEN            Length of workspace entry
         LA    R1,0(R14,R1)            Point after LN3    (MVCL/MVCLE)
         CR    R7,R2                   Copy after?
         BNH   MOVE19                  Yes: reset COMMFSCR
         AR    R7,R1                   Reset Line-1
         AR    R8,R1                   Reset Line-2
         B     MOVE21                  Format DELETE command
MOVE19   L     R3,MOVE1SCR             Address 1st record on screen
         SLR   R3,R1                   Reset address
         CL    R3,COMWSTRT             Before workspace?
         BL    MOVE21                  Yes: do not change COMMFSCR
         ST    R3,MOVE1SCR             Save address
MOVE21   MVI   BUFFER,C' '             Blank
         MVC   BUFFER+1(L'BUFFER-1),BUFFER   buffer
         MVC   LN1FLD+2(6),OFFSETN2(R7)   Pickup line-1
         MVC   LN1FLD(2),=C'00'        Insert leading zeroes
         MVC   LN2FLD+2(6),OFFSETN2(R8)   Pickup line-2
         MVC   LN2FLD(2),=C'00'        Insert leading zeroes
         MVC   BUFFER(4),=CL4'DEL'     Format
         MVC   BUFFER+4(8),LN1FLD             DEL
         MVC   BUFFER+13(8),LN2FLD                command
         L     R15,=V(DEL)             Execute Delete lines routine
         CALL  (15)
         MVC   COMMFSCR,MOVE1SCR       Restore A(1st record in screen)
MOVE99   LM    R2,R14,SAVEMVE          Restore registers
         BR    R14
         LTORG ,
         DROP
         TITLE 'Insert empty lines or repeat existing lines'
*---------------------------------------------------------------------*
*                                                                     *
*        I N P U T - Process Input (I m,n) or Repeat (R m,n)          *
*                    commands and insert/repeat the line(s) in        *
*                    the EDIT workspace.                              *
*                    R3 points to a workspace entry and will be       *
*                    mapped by the WORKSPCE DSECT in RPFCOMM          *
*                    The length of the entry is COMWRKEN in RPFCOMM.  *
*                    After succesful Insert/Repeat the cursor will    *
*                    be placed on the line after the insert/repeat    *
*                                                                     *
*------------------------------------------ (C)-2025 Skybird Systems -*
         DROP
INPUT    CSECT
         USING WORKAREA,R13            Make RPFEDIT workarea available
         USING COMMAREA,R11            Make RPFCOMM available
         STM   R2,R14,SAVEINP          Save registers
         LR    R12,R15                 Setup base
         USING INPUT,R12               Address LINE routine
         USING WORKSPCE,R3             Address workspace record
         LA    R1,BUFFER+2             Point after 'I ', cmd for LINE
         CLI   0(R1),C'*'              Primary command 'I * n'?
         BNE   INPUT01                 * is first line on screen
         MVC   DBW,2(R1)               Second operand of I command
         L     R3,COMMFSCR             First record on screen
         MVC   0(6,R1),WORKSLIN        Change * into line number
         MVI   6(R1),C' '              Space between operands
         MVC   7(8,R1),DBW             Second operand
INPUT01  DS    0H
         L     R15,=V(LINE)            Routine address
*                                      LN1FLD, and LN2FLD filled
         CALL  (15)                    Scan for line numbers
         B     *+4(R15)                Branchlist
         B     INPUT03                 Rc = 0, no errors
         B     INPUT73                 Rc = 4, invalid line(s)
INPUT03  DS    0H
         CLC   LN2FLD,=C'00000000'     Line-2 zero?
         BNE   INPUT07                 No: continue
         MVI   LN2FLD+7,C'1'           Input 1 line
INPUT07  DS    0H
         L     R3,COMWSTRT             Point to 1st record in workspace
         CLC   LN1FLD,=C'00000000'     Line-1 = EBCDIC zeroes?
         BNE   INPUT09                 No
         CLI   BUFFER,C'R'             Impossible to repeat before
         BNE   INPUT08                 first line, only input
         MVC   MSG5,INPJTXT            Msg: Line-x invalid
         MVC   MSG5+16(1),=C'1'        Line 1
         B     INPUT73                 Go to error routine
INPUT08  DS    0H
         L     R4,COMWRKEN             Line length in workspace
         SLR   R3,R4                   Before first line
         B     INPUT11
INPUT09  DS    0H
         LA    R1,LN1FLD+2             PARM for SRCHLINE
         L     R15,EPSRCH              Entry point SRCHLINE
         BALR  R14,R15                 and execute
         IC    R14,=C'1'               Line number into register
         LTR   R15,R15                 Line found?
         BNZ   INPUT85                 No: give error message
         LR    R3,R1                   A(found line) into register
INPUT11  DS    0H
         ST    R3,INSLINE              After this line will be inserted
         PACK  DBW,LN2FLD              Convert to
         CVB   R5,DBW                  binary into register 5
         CL    R5,=F'999999'           More than 999,999 lines?
         BH    INPUT75                 Yes: invalid line
         L     R4,COMWRKEN             6+2+LRECL in R4 (length entry)
         MR    R4,R4                   Calculate total length
         L     R3,COMMLAST             Point to last record in ws
         LA    R3,0(R3,R5)             Incr with  # chars to insert
         CL    R3,COMWRKND             End of workspace?
         BNL   INPUT56                 Give error message if yes
         L     R5,COMMLAST             Point to last record in workspc
         ST    R3,COMMLAST             Save updated COMMLAST
         L     R2,COMWRKEN             Length workspc entry in reg. 2
INPUT15  DS    0H
         CL    R5,INSLINE              Current line reached?
         BNH   INPUT17                 Yes: blanks or repeat data
         L     R1,COMMRECL             Length = LRECL of data portion
         BCTR  R1,0                    Minus 1 for EX
         MVC   0(8,R3),0(R5)           Shift 1st 8 bytes line
         EX    R1,INPEX1               Shift rest of line
         SLR   R3,R2                   -/- Length workspace entry
         SLR   R5,R2                   -/- Length workspace entry
         B     INPUT15                 Next line
INPEX1   MVC   8(0,R3),8(R5)           << executed >>
INPUT17  DS    0H
         L     R5,INSLINE            Point to line to be inserted after
         CL    R3,INSLINE              All done?
         BNH   INPUT25                 Yes: renumber workspace
         L     R14,COMMRECL            Record length of input
         BCTR  R14,0                   Minus 1 for execute
         XC    WORKFLGS,WORKFLGS       Clear flags in workspace
         XC    WORKSLIN,WORKSLIN       Clear line number in workspace
         CLC   BUFFER(2),=C'R '        Repeat current line?
         BE    INPUT19                 Yes: repeat line in workspace
         BCTR  R14,0                   Discount because 1st space moved
         MVI   WORKDATA,C' '           Blank first position
         EX    R14,INPEX3              and the rest
         OI    WORKFLGS,$INSERTD       Mark line inserted without data
         B     INPUT21                 Branch over move for 'R'(epeat)
INPUT19  DS    0H
         EX    R14,INPEX2              Repeat data line in workspace
         L     R15,=V(SETCHNG)         Mark data changed in workspace
         CALL  (15)
INPUT21  DS    0H
         CLC   =CL3'ON',COMMNUM        Line numbers?
         BNE   INPUT23                 No: skip
         TM    COMMFLG4,$COMVB         Variable data (nmbrs in col 1-8)
         BNO   INPUT22                 Yes: do not change col 79-80
         MVC   WORKDATA+6(2),COMMEMM   Move ISPF/RPF mm to cols 7-8
         B     INPUT23                 Next line
INPUT22  DS    0H
         TM    COMMFLG1,$COMCOB        Cobol aligned (nmbrs in col 1-6)
         BO    INPUT23                 Yes: do not change col 79-80
         L     R14,COMMRECL            Record length of input
         S     R14,=F'8'               Minus 8 (length line number)
         LA    R15,WORKDATA            Data portion in workspace
         LA    R14,0(R14,R15)          Point to Linenumber
         MVC   6(2,R14),COMMEMM        Move ISPF/RPF mm to last 2 cols
INPUT23  DS    0H
         SLR   R3,R2                   Subtract length workspace entry
         B     INPUT17                 Next line
INPEX2   MVC   WORKDATA(0),8(R5)       << executed >>
INPEX3   MVC   WORKDATA+1(0),WORKDATA  << executed >>
INPUT25  DS    0H
         L     R15,=V(NUMBER)          EP Renumber workspace routine
         CALL  (15)                    Execute
         XC    REP5,REP5               Clear reply area in screen
         CLC   INSLINE,COMMFSCR   Line to ins.after = 1st line on scr?
         BE    INPUT35                 Position cursor on 1st/2nd line
*---------------------------------------------------------------------*
*
*        If the line to be inserted/repeated after is on the
*        same screen, do not change the address of the first
*        line on screen and place the cursor in the first inserted
*        or repeated line.
*
*        If the line to be inserted/repeated after is not on the
*        same screen, change the first line on screen with
*        the address of the line to be inserted/repeated after and
*        place the cursor on the next line.
*
*------------------------------------------ (C)-2025 Skybird Systems -*
         L     R3,INSLINE       Line, where lines are inserted/repeated
         L     R1,COMWRKEN             Length of workspace entry
         LA    R3,0(R1,R3)             Point to first ins/rep line
         L     R4,COMMFSCR             Current first line on screen
         LH    R1,#LINES               Number of lines on the screen
         LA    R14,3                   Minimum 2 header lines (+1)
         TM    COMMFLG1,$COMCOLS       Scale line present?
         BNO   INPUT27                 No: leave
         BCTR  R1,0                    Else 1 line less on screen
         LA    R14,1(R14)              1 more header line
INPUT27  TM    COMMFLG2,$COMPROF       Profile line present?
         BNO   INPUT29                 No: leave
         BCTR  R1,0                    Else 1 line less on screen
         LA    R14,1(R14)              1 more header line
INPUT29  CLC   COMMFSCR,COMWSTRT       ** Top of data ** line present?
         BNE   INPUT31                 No: leave
         BCTR  R1,0                    Else 1 line less on screen
         LA    R14,1(R14)              1 more header line
INPUT31  DS    0H
         CLC   0(6,R4),WORKSLIN      Are inserted lines on same screen?
         BE    INPUT33                 Yes: set cursor on that line
         L     R15,COMWRKEN            Length of workspace entry
         LA    R4,0(R15,R4)            Next line in workspace
         LA    R14,1(,R14)             Count
         BCT   R1,INPUT31              Loop until found or done
         MVC   COMMFSCR,INSLINE        New first line on screen
         B     INPUT35                 Set cursor after first line
INPUT33  DS    0H
         L     R1,COLUMN               Column 9,16 or 17
         LR    R0,R14                  Line to place cursor
         L     R15,=V(RCTOSBA)         Routine
         CALL  (15)                    Convert
         STCM  R0,3,SCR5ADDR+1         Cursor address in line
         B     INPUT99A
*
*        The line to be inserted is NOT on the same screen.
*
INPUT35  LA    R1,R3C91617             Point to r3,c9 SBA
         TM    COMMFLG1,$COMCOLS       Scale line present?
         BNO   INPUT37                 No: leave on r3,c9
         LA    R1,2(,R1)               Point to SBA of 1 line lower
INPUT37  DS    0H
         TM    COMMFLG2,$COMPROF       Profile line present?
         BNO   INPUT38                 No: leave
         LA    R1,2(,R1)               Point to SBA of 1 line lower
INPUT38  DS    0H
         CLC   COMMFSCR,COMWSTRT       ** Top of data ** line present?
         BNE   INPUT39                 No: leave
         LA    R1,2(,R1)               Point to SBA of 1 line lower
INPUT39  DS    0H
         MVC   SCR5ADDR+1(2),0(R1)     Move SBA of first data line
         CLC   LN1FLD,=C'00000000'     Insert before top?
         BE    INPUT99                 Yes: point to 1st data line
         LA    R1,2(,R1)               Else point to 2nd data line
         MVC   SCR5ADDR+1(2),0(R1)     Cursor address to r4/5/6/7 9/16
         B     INPUT99                 Back to VIEW
INPUT56  MVC   MSG5,INP4TXT            Msg: Input terminated
         XC    REP5,REP5
         B     INPUT99
INPUT73  DS    0H                      Msg already set in LINE routine
         MVC   REP5,BUFFER             Repeat command
         B     INPUT99A
INPUT75  DS    0H                      Msg already set in LINE routine
         MVC   MSG5,INP1TXT            Msg: # lines invalid
         B     INPUT99A
INPUT85  MVC   MSG5,INPPTXT            Msg: Line-X not found
         STC   R14,MSG5+14             Line number in message
         MVC   REP5,BUFFER             Repeat command
         B     INPUT99A
INPUT99  DS    0H
         CLC   LN1FLD,=C'00000000'     Insert before first line?
         BNE   INPUT99A                No.
         LA    R1,2(,R1)               Point to SBA of 1 line lower
         MVC   SCR5ADDR+1(2),0(R1)     Cursor address to r4/5/6/7 9/16
         L     R3,COMWSTRT             Set display pointer
         ST    R3,COMMFSCR
INPUT99A LM    R2,R14,SAVEINP          Restore register 2-14
         BR    R14                     Return
INP1TXT  DC    CL25'- Number of lines invalid'
INP4TXT  DC    CL25'-------- Input terminated'
INPJTXT  DC    CL25'---------- Line-X invalid'     16
INPPTXT  DC    CL25'-------- Line-X not found'     14
         DROP  R3                      Get rid of workspace entry
         LTORG ,
         TITLE 'Extract line numbers from primary commands'
*---------------------------------------------------------------------*
*                                                                     *
*        L I N E - Scan input buffer for line numbers                 *
*                  and return max 3 line numbers in register 1.       *
*                  If a line number is 0, the value will be replaced  *
*                  by the string 'TOP'.                               *
*                  If one or more line numbers are in error, the      *
*                  address of a suitable message will be placed into  *
*                  register 1 and the return code is set.             *
*                                                                     *
*                  INPUT:  Register 1, start address SCAN             *
*                  OUTPUT: LN1FLD,  line-1                            *
*                          LN2FLD,  line-2                            *
*                          LN3FLD,  line-3                            *
*                          REG.15, RC= 0 - all lines valid,           *
*                                          register 1 loaded          *
*                                  RC= 4 - line invalid or not numeric*
*                          MSG5,   error indication line number,      *
*                                  only if the return code unequal 0. *
*                                                                     *
*------------------------------------------ (C)-2025 Skybird Systems -*
         DROP
LINE     CSECT
         USING WORKAREA,R13            Make RPFEDIT workarea available
         STM   R2,R14,SAVELINE         Save registers
         LR    R12,R15                 Setup base
         USING LINE,R12                Address LINE routine
         L     R15,=V(SCAN)
         CALL  (15)                    Execute SCAN routine
         IC    R6,=C'1'                Line number 1
         LTR   R15,R15                 Rc =0?
         BNZ   LINE73                  No: LN1 invalid
         LR    R4,R1                   Save last character scanned
         LA    R5,NUMFLD               Point to NUMFLD from SCAN rout.
         CLI   0(R5),C'*'              * - current line?
         BE    LINE04                  Yes: skip NUMTST
         LA    R1,=C'0'                Fill character
         L     R15,=V(SHIFT)           Shift trailing spaces
         CALL  (15)
         L     R15,=V(NUMTST)          Load entry point NUMTST routine
         CALL  (15)                    Execute
         LTR   R15,R15                 Rc = 0?
         BNZ   LINE73                  No: line-1 not numeric
LINE04   DS    0H
         MVC   LN1FLD,0(R5)            Save line-1 in LN1FLD
         LA    R4,1(,R4)               Point to LN2
         LR    R1,R4                   Set parameter in register 1
         L     R15,=V(SCAN)            Execute SCAN for LN2FLD
         CALL  (15)
         IC    R6,=C'2'                Line number 2
         LTR   R15,R15                 Rc = 0?
         BNZ   LINE73                  No: LN2 invalid
         LR    R4,R1                   Save last character scanned
         LA    R1,=C'0'                Fill character
         L     R15,=V(SHIFT)           Shift trailing spaces
         CALL  (15)
         L     R15,=V(NUMTST)          Entry point NUMTST routine
         CALL  (15)                    Execute
         LTR   R15,R15                 Rc = 0?
         BNZ   LINE73                  No: line-2 not numeric
LINE06   DS    0H
         MVC   LN2FLD,0(R5)            Save line-2 in LN2FLD
         LA    R4,1(,R4)               Point to LN3
         LR    R1,R4                   Set parameter into register 1
         L     R15,=V(SCAN)            Execute SCAN for LN3FLD
         CALL  (15)
         IC    R6,=C'3'                Line number 3
         LTR   R15,R15                 Rc = 0?
         BNZ   LINE73                  No: LN3 invalid
         LA    R1,=C'0'                Fill character
         L     R15,=V(SHIFT)           Rep trail. spc with leading zero
         CALL  (15)
         L     R15,=V(NUMTST)          Entry point NUMTST routine
         CALL  (15)                    Execute
         LTR   R15,R15                 Rc = 0?
         BNZ   LINE73                  No: LN3 not numeric
LINE08   MVC   LN3FLD,0(R5)            Save LN3 into LN3FLD
         XR    R15,R15                 Rc = 0 - scan successful
         B     LINE99                  Exit
LINE73   LA    R15,4                   Rc = 4 - invalid line(s) found
         MVC   MSG5,ERRJTXT            Move message
         STC   R6,MSG5+16              And set line in error in msg
LINE99   DS    0H
         LM    R2,R14,SAVELINE         Restore register 2-12
         BR    R14                     Return to caller
ERRJTXT  DC    CL25'---------- Line-X invalid'     16
         LTORG ,
         TITLE 'DELETE lines routine'
*---------------------------------------------------------------------*
*                                                                     *
*        D E L E T E - Delete from LN1 through LN2                    *
*                                                                     *
*                      Input:  BUFFER with 'DEL' primary command      *
*                      Output: Reg.15, Rc = 00 - Delete successful    *
*                                      Rc = 04 - Errors detected      *
*                              MSG5 - error message                   *
*                                                                     *
*------------------------------------------ (C)-2025 Skybird Systems -*
         DROP
DEL      CSECT
         USING WORKAREA,R13            Addressability of SCREEN
         STM   R2,R14,SAVEDEL          Save registers
         LR    R12,R15                 Setup base
         USING DEL,R12                 Address DEL(ete) routine
         USING COMMAREA,R11            Addressability of RPFCOMM
         XC    REP5,REP5               Clear reply/command area
         LA    R1,BUFFER+4             Point after 'DEL ' - operands
         L     R15,=V(LINE)           Fill in LN1FLD, LN2FLD and LN3FLD
         CALL  (15)                    Scan for line numbers
         B     DEL01(R15)              Branchlist
DEL01    B     DEL03                   Rc = 0, no errors
         B     DEL97                   Rc = 4, invalid line(s)
DEL03    DS    0H                      (message set in LINE routine)
         CLI   LN1FLD,C'*'             * - Current line?
         BNE   DEL05                   No: continue
         L     R7,COMMFSCR             Load first line to Delete
         MVC   LN1FLD,LN2FLD           # Lines into LN1FLD
         MVC   DELFLD,LN2FLD           # Lines into DELFLD
         MVC   LN2FLD,=C'00000000'     Zero LN2FLD
         CLC   DELFLD,=C'00000000'     Number of lines zero?
         BNE   DEL19                   No: proceed
         MVI   DELFLD+7,C'1'           Yes: default 1 line
         B     DEL19                   Process line-1
DEL05    MVC   DELFLD,LN1FLD           Line-1 into DELFLD
         CLC   LN2FLD,=C'00000000'     Line-2 zero?
         BNE   DEL07                   No: continue
         MVC   LN2FLD,LN1FLD           Delete 1 line
DEL07    CLC   LN2FLD,C9999D           Line-2 99999999 ?
         BNE   DEL11                   No: calculate number of lines
         L     R3,COMMLAST             Point to last line in workspace
         MVC   LN2FLD+2(6),OFFSETN2(R3) Line-2 = last line in workspace
         MVC   LN2FLD(2),=C'00'        Insert leading zeroes
DEL11    DS    0H
         LA    R1,LN1FLD+2             LN1FLD(6) is parm for SRCHLINE
         L     R15,EPSRCH              Load entry point SRCHLINE
         BALR  R14,R15                 Execute
         IC    R14,=C'1'               Line number into register
         LTR   R15,R15                 Line found ?
         BNZ   DEL85                   No: give error message
         LR    R7,R1                   Address of found line in reg.
         LA    R1,LN2FLD+2             LN2FLD(6) = parm for SRCHLINE
         L     R15,EPSRCH              Load entry point SRCHLINE
         BALR  R14,R15                 Execute
         IC    R14,=C'2'               Line number into register
         LTR   R15,R15                 Line found?
         BNZ   DEL85                   No: give error message
         LR    R8,R1                   Addr. of found line in register
         LR    R5,R8                   Line-2 into register 5
         CLC   0(6,R8),0(R7)           Line-2 < Line-1?
         BL    DEL69                   Yes: delete failed
         B     DEL21                   Calculate # lines to Delete
DEL19    CLC   DELFLD,C9999D           Delete EOF?
         BNE   DEL23                   No: delete lines
         L     R5,COMMLAST             Point to last line in workspace
DEL21    DS    0H
         L     R14,COMWRKEN            Length of 1 workspace entry
         LA    R5,0(R14,R5)            Point after last line to delete
         LR    R4,R7                   First line to Delete
         SLR   R5,R4                   Register 5 = # lines to Delete
         B     DEL25                   Delete the lines
DEL23    PACK  DBW,DELFLD              Convert DELFLD to
         CVB   R5,DBW                  binary into register 5
         CL    R5,=F'999999'           More than 999,999 lines
         BH    DEL69                   Yes: msg 'Delete failed'
         L     R4,COMWRKEN             Length 1 entry in workspace
         MR    R4,R4                   Compute total length (In Reg.5)
DEL25    DS    0H
         LR    R4,R7                   First line to delete
         SL    R4,COMWRKEN             Point before 1st deleted    @rp5
         CL    R4,COMWSTRT             Before first record         @rp5
         BH    *+8                     No: branch                  @rp5
         L     R4,COMWSTRT             Yes: position to COMWSTRT   @rp5
         ST    R4,SAVE1ST              Save this address           @rp5
         LR    R4,R7                   Restore R4                  @rp5
         LA    R6,0(R4,R5)             R6= First line after delete
         L     R2,COMWRKEN             R2= Length workspace entry
         LR    R3,R6                   R3= First line after delete
         SLR   R3,R2                   R3= Last line te delete
         CL    R3,COMMLAST             End of data?
         BH    DEL69                   Yes: issue error message
         LR    R3,R5                   Save length
         L     R7,COMMLAST             Calculate length of lines
         SLR   R7,R6                   to be shifted
         LA    R8,0(R4,R7)             Calculate new address
         ST    R8,COMMLAST             of COMMLASTand save
         L     R14,COMWRKEN            Length 1 workspace entry
         LA    R7,0(R7,R14)            Add length of 1 line
         LR    R5,R7                   R5 = R7
         AIF   (NOT &OS390).NOLE2
         STCM  R5,8,DELMVC             Store hi order
         TM    DELMVC,X'FF'            > 16 MB?
         BZ    DEL25CL                 No: use MVCL instead of MVCLE
         XC    DBW,DBW                 Clear 2nd operand and pad
         MVCLE R4,R6,DBW               Copy records (> 16MB)
         BC    1,*-4                   Complete MVCLE
         B     DEL26                   Branch over MVCLE
.NOLE2   ANOP
DEL25CL  MVCL  R4,R6                   Copy records
DEL26    DS    0H
         L     R4,COMMLAST             Last data record
         L     R1,COMWRKEN             Length of workspace entry
         LA    R4,0(R1,R4)             Point after last data record
         LR    R5,R3                   Length deleted lines
         LR    R6,R4                   2nd/3rd operand is 1st operand
         XR    R7,R7                   Zero 2nd length + zero pad
         AIF   (NOT &OS390).NOLE3
         STCM  R5,8,DELMVC             Store hi order
*
*        If the length of the to be deleted lines is 16 MB or more,
*        The MVCLE is used instead of the MVCL
*
         TM    DELMVC,X'FF'            > 16 MB?
         BZ    DEL26CL                 No: use MVCL instead of MVCLE
         XC    DBW,DBW                 Clear 2nd operand and pad
         MVCLE R4,R6,DBW               Copy records (> 16MB)
         BC    1,*-4                   Complete MVCLE
         B     DEL26A                  Branch over MVCLE
.NOLE3   ANOP
DEL26CL  MVCL  R4,R6                   Copy records
DEL26A   DS    0H
*        XC    REP5,REP5               Clear reply buffer
         CLC   COMMFSCR,COMMLAST       End of workspace?
         BNH   DEL29                   No: calculate new COMMFSCR  @rp5
         CLC   COMWSTRT,COMMLAST       Workspace empty ?
         BNH   DEL27                   No: display screen
*
*        At this point all the records in the workspace are deleted.
*        Add 1 blank line to preserve the 'Workspace Empty' condition.
*
         L     R4,COMWSTRT             Point to 1st record in workspace
         USING WORKSPCE,R4             Adress workspace entry      @rp2
         L     R1,COMMRECL             Record length of data set
         BCTR  R1,0                    Minus 1 for EX
         BCTR  R1,0                    Minus 2 for EX
         MVI   WORKDATA,C' '           Blank first pos. data portion
         EX    R1,DELEX1               And blank the rest
         XC    WORKFLGS,WORKFLGS       Clear flags                 @rp2
         OI    WORKFLGS,$INSERTD       Mark line insersted         @rp2
         MVC   COMMLAST,COMWSTRT       Set a empty line in workspc @rp2
         L     R15,=V(NUMBER)          Renumber the ...            @rp2
         CALL  (15)                                 workspace      @rp2
         B     DEL96                   Return                      @rp2
DELEX1   MVC   WORKDATA+1(0),WORKDATA  << executed >>              @rp2
         DROP  R4                                                  @rp2
DEL27    MVC   COMMFSCR,COMWSTRT       Show first line
         B     DEL96                   Display screen
DEL29    DS    0H                      Compute first line on scr.  @rp5
         CLC   COMMFSCR,SAVE1ST        First rec on scr < save1st? @rp5
         BL    DEL96                   Do not alter COMMFSCR       @rp5
         MVC   COMMFSCR,SAVE1ST        New first line on screen    @rp5
         B     DEL96                   Branch                      @rp5
DEL69    DS    0H
         MVC   MSG5,DEL1TXT            Msg: Delete failed
         B     DEL97
DEL85    DS    0H
         MVC   MSG5,DELPTXT            Msg: Line-x not found
         STC   R14,MSG5+14             Set line number in message
         B     DEL97
DEL96    DS    0H
         L     R15,=V(SETCHNG)         Set chg flag
         CALL  (15)                    and execute
         XR    R15,R15                 Clear register 15
         B     DEL99                   Delete successful
DEL97    DS    0H
         MVC   REP5,BUFFER             Repeat command
         LA    R15,4                   Error
DEL99    DS    0H
         LM    R2,R14,SAVEDEL          Load callers registers
         BR    R14                     Return
C9999D   DC    C'99999999'
DEL1TXT  DC    CL25'----------- Delete failed'
DELPTXT  DC    CL25'-------- Line-X not found'     14
         LTORG ,
         TITLE 'Set EDIT boundaries'
*---------------------------------------------------------------------*
*                                                                     *
*        B N D S   -  Set EDIT BOUNDARIES to columns n-m              *
*                     If column 'm' contains '999' the end BNDS will  *
*                     be set on the record length of the input data.  *
*              INPUT. BNDSNUM,  which will contain the columns or     *
*                     binary zeroes if default boundaries are requested
*             OUTPUT. BNDS field in screen                            *
*                     COMBNDS field in RPFCOMM, and                   *
*                     COMBNDSL field in RPFCOMM,                      *
*                     or an error message                             *
*                                                                     *
*------------------------------------------ (C)-2025 Skybird Systems -*
         DROP  ,
BNDS     CSECT
         USING COMMAREA,R11            RPFCOMM area
         USING WORKAREA,R13            Our dynamic workarea
         STM   R2,R14,SAVEBNDS         Save registers 2-14
         LR    R12,R15                 Setup base for BNDS routine
         USING BNDS,R12                Make BNDS addressable
         XC    REP5,REP5               Clear reply/command area
         LA    R1,BNDSNUM              Point to boundary numbers
         CLI   0(R1),X'40'             Do we have operands in command?
         BE    BNDS11                  No: set default boundary
         CLI   0(R1),X'00'             Do we have operands in command?
         BE    BNDS11                  No: set default boundary
         L     R15,=V(LINE)          Fill in LN1FLD, LN2FLD and LN3FLD
         CALL  (15)                    Scan for line numbers
         B     BNDS01(R15)             Branchlist
BNDS01   B     BNDS03                  Rc = 0, no errors
         B     BNDS08                  Rc = 4, invalid line(s)
BNDS03   DS    0H
         CLC   LN1FLD(5),=C'00000000'  Leading zero?
         BNE   BNDS08
         CLC   LN2FLD(5),=C'00000000'  Leading zero?
         BNE   BNDS08                  Error in Boundaries
         CLC   LN1FLD,LN2FLD           LN1 .gt. LN2 ?
         BH    BNDS08                  Yes: invalid range
         CLC   LN1FLD,=C'00000001'     .LT. ZERO ?
         BL    BNDS08
         L     R1,COMMRECL             Pickup record length
         CVD   R1,DBW                  Make decimal
         UNPK  CLEN,DBW                Make zoned
         OI    CLEN+7,X'F0'            and remove sign
         CLC   LN1FLD,CLEN             .GT. LRECL of data?
         BH    BNDS08
         CLC   LN2FLD+5(3),=C'999'     End boundary = 999?
         BNE   BNDS05                  No: set normal boundaries
         L     R1,COMMRECL             End
         CVD   R1,DBW                     BNDS
         UNPK  LN2FLD,DBW                      = end
         OI    LN2FLD+7,X'F0'                       of record
         B     BNDS07                  Set boundaries
BNDS05   DS    0H
         CLC   LN2FLD,=C'00000001'     .LT. zero?
         BL    BNDS08
         CLC   LN2FLD,CLEN             .GT. LRECL of data?
         BH    BNDS08
BNDS07   DS    0H
         MVC   BNDS5+6(3),LN1FLD+5     BNDS into screen
         MVC   BNDS5+10(3),LN2FLD+5    BNDS into screen
         PACK  DBW,LN1FLD+5(3)         Convert to decimal
         CVB   R3,DBW                  Convert to binary
         BCTR  R3,0                    Minus 1
         PACK  DBW,LN2FLD+5(3)         Convert operand 2 to decimal
         CVB   R4,DBW                  Convert operand 2 to binary
         ST    R3,COMBNDS              Store offset
         SR    R4,R3                   Calculate length
         ST    R4,COMBNDSL             Save BNDS length
         B     BNDS99
BNDS08   MVC   MSG5,ERR8TXT            Msg: Invalid boundaries
         B     BNDS99                  Exit
*
*        Build the default BOUNDARIES
*
*        If the data is COBOL aligned, the default BNDS = 07-72.
*
*        NONUM data gets a boundary with a start of DATOFFS (offset
*        in the record)
*        The end of the boundary is DATOFFS+DATALEN (offset in the
*        record + length of data portion in the screen). In other
*        words: the BNDS ranges covers the visible part of the data
*        in the screen.
*
*        Numbered Fixed data gets a boundary with a start of 1, and
*        and end boundary is DATOFFS+DATALEN - 8 if the data
*        is position at the end of the record. Otherwise the end
*        boundary is DATOFFS+DATALEN.
*
*        Numbered variable data gets a boundary with a start of 9 if
*        the data offset in the record = 0, else the start is 1.
*        The end boundary is DATOFFS+DATALEN.
*
*        DATOFFS is set by the LEFT and RIGHT primary commands.
*
BNDS11   DS    0H
         TM    COMMFLG1,$COMCOB        COBOL alignment?
         BNO   BNDS12                  No: set standard boundaries
         LA    R2,6                    Start BNDS (Cobol)
         ST    R2,COMBNDS              Set in COMBNDS in RPFCOMM
         LA    R15,66                  Length of BNDS (80-7-8)
         ST    R15,COMBNDSL            Save BNDS length
         LA    R15,6(,R15)             Repair for BNDS end in screen
         B     BNDS19                  End of boundary for COBOL
BNDS12   DS    0H                      Bnds for std data sets
         TM    COMMFLG4,$COMVB         Do we have variable records?
         BO    BNDS17                  Yes: process BNDS of VB data
         L     R2,DATOFFS              Default start BNDS = data offset
         ST    R2,COMBNDS              Save start BNDS
         L     R15,DATALEN             Length of data portion in screen
         CLC   =CL3'ON',COMMNUM        Does data contain line numbers?
         BNE   BNDS13                  No: do not subtract line number
         L     R1,DATOFFS              Offset to data in record
         A     R1,DATALEN              + length data portion
         C     R1,COMMRECL             Are we at the end of the record?
         BNE   BNDS13                  No: do not subtract Length line#
         S     R15,=F'8'               Minus length of line #
BNDS13   DS    0H                      Bnds for std data sets
         ST    R15,COMBNDSL            Default Length is LRECL
         B     BNDS19                  End of boundary for Fixed data
BNDS17   DS    0H
         L     R2,DATOFFS              Default start BNDS = data offset
         ST    R2,COMBNDS              Save start BNDS
         L     R15,DATALEN             Length of data portion in screen
         ST    R15,COMBNDSL            Default Length is LRECL
         CLC   =CL3'ON',COMMNUM        Does data contain line numbers?
         BNE   BNDS19                  No: branch
         CLC   DATOFFS,=F'0'           Are we at the beginning?
         BNE   BNDS19                  No: branch
         LA    R2,8(,R2)               BNDS start is after line number
         ST    R2,COMBNDS              Default BNDS start = offset 8
         S     R15,=F'8'               Minus length of line #
         ST    R15,COMBNDSL            BNDS length = LRECL - 8
*        LA    R15,8(,R15)             Repair for BNDS end in screen
*        B     BNDS19                  End of boundary for VAR data
BNDS19   DS    0H
         LA    R2,1(,R2)               + 1
         CVD   R2,DBW                  Make decimal
         UNPK  BNDS5+6(3),DBW+6(2)     Make zoned
         OI    BNDS5+8,X'F0'           Remove sign
         LA    R15,0(R2,R15)           End BNDS +1
         BCTR  R15,0                   Minus 1
         CVD   R15,DBW                 Make decimal
         UNPK  BNDS5+10(3),DBW+6(2)    Make zoned
         OI    BNDS5+12,X'F0'          Remove sign
BNDS99   LM    R2,R14,SAVEBNDS         Restore register 14
         BR    R14                     Return
ERR8TXT  DC    CL25'------ Invalid boundaries'
         LTORG ,
         TITLE 'Copy overlay routine (C --> OO - OO)'
*---------------------------------------------------------------------*
*                                                                     *
*        O V L Y - Copy LN1 over LN2 thru LN3                         *
*                  The contents of LN1 will be copied with overlay    *
*                  in the lines LN2 thru LN3. Only the blanks in the  *
*                  receiving lines will be replaced and only within   *
*                  the edit boundaries.                               *
*                                                                     *
*        How to Call:                                                 *
*        LA    R1,BUFFER                                              *
*        L     R15,=V(OVLY)                                           *
*        CALL  (15)                                                   *
*                                                                     *
*                  INPUT:  Command buffer - address is in register 1  *
*                                                                     *
*        Return codes:  00 - Copy overlay successful                  *
*                       04 - Errors detected, register 1 contains     *
*                            the address of an error message          *
*                                                                     *
*------------------------------------------ (C)-2025 Skybird Systems -*
         DROP  ,
OVLY     CSECT
         USING COMMAREA,R11            RPFCOMM area
         USING WORKAREA,R13            Our dynamic workarea
         STM   R2,R14,SAVEOVLY         Save callers registers
         LR    R12,R15                 Setup base
         USING OVLY,R12
         LA    R1,5(,R1)               Point after 'OVLY ' (operands)
         L     R15,=V(LINE)            Routine address
         CALL  (15)                    Scan for line numbers
         B     OVLY01(R15)             Branchlist
OVLY01   B     OVLY03                  Rc = 0, no errors
         B     OVLY97                  Rc = 4, invalid line(s)
OVLY03   DS    0H                      (message set in LINE routine)
         CLI   LN1FLD,C'*'             '*' - current line?
         BNE   OVLY05                  No: continue
         L     R3,COMMFSCR             Point to current line
         USING WORKSPCE,R3             Make workspace entry addressable
         MVC   LN1FLD+2(6),WORKSLIN    Line number into LN1FLD
         MVC   LN1FLD(2),=C'00'        Insert leading zeroes
         DROP  R3
OVLY05   DS    0H
         CLC   LN3FLD,=C'00000000'     Line-3 (overlay end) zero?
         BNE   OVLY06                  No: carry
         MVC   LN3FLD,LN2FLD           Copy line-3 to line-2
OVLY06   DS    0H
         LA    R1,LN1FLD+2             PARM for SRCHLINE routine
         L     R15,EPSRCH              Entry point SRCHLINE
         BALR  R14,R15                 Execute
         IC    R14,=C'1'               Line number into register
         LTR   R15,R15                 Line found?
         BNZ   OVLY85                  No: give error message
         LR    R3,R1                   Address of found line in reg.
         LA    R1,LN2FLD+2             PARM for SRCHLINE
         L     R15,EPSRCH              Load entry point SRCHLINE
         BALR  R14,R15                 Execute
         IC    R14,=C'2'               Line number into register
         LTR   R15,R15                 Line found?
         BNZ   OVLY85                  No: give error message
         LR    R4,R1                   Address of found line in reg.
         LA    R1,LN3FLD+2             Parm for SRCHLINE
         L     R15,EPSRCH              Load entry point SRCHLINE
         BALR  R14,R15                 Execute
         IC    R14,=C'3'               Line number into register
         LTR   R15,R15                 Line found?
         BNZ   OVLY85                  No: give error message
         LR    R7,R1                   Address of found line in reg.
         CLR   R4,R7                   Compare LN2 - LN3 (OO - OO)
         BNH   OVLY07                  Not low: carry
         XR    R4,R7                   Swap LN2
         XR    R7,R4                           and
         XR    R4,R7                              LN3
OVLY07   DS    0H
         CLR   R3,R4                   LN1 (Copy) < LN2 (Ovly start)
         BL    OVLY09                  Yes: carry on
         CLR   R3,R7                   LN1 (Copy) > LN3 (Ovly end)
         BNH   OVLY95                  No: invalid range
OVLY09   DS    0H
*
*        All operands examined, execute the overlay
*        Register 3, points to LN1, the contents within the edit BNDS
*        will be overlayed in the lines address with register 4
*        and register 6.
*
         LA    R3,8(,R3)               Point to data portion LN1
         LA    R4,8(,R4)               Point to data portion LN2
         LA    R7,8(,R7)               Point to data portion LN3
         L     R1,COMBNDS              Start of boundaries
         LA    R3,0(R1,R3)             + start
         LA    R4,0(R1,R4)                    of
         LA    R7,1(R1,R7)                      boundaries
         L     R6,COMWRKEN             Length of workspace entry
OVLY11   DS    0H
         L     R1,COMBNDSL             Length of data to overlay
         LR    R5,R4                   Copy register 4 (-- LN2)
         LR    R2,R3                   Copy register 3 (LN1)
         NI    SW,255-$OVLCH           Set overlay swith initial
OVLY13   DS    0H
         CLI   0(R5),C' '              Blank in receiving line?
         BNE   OVLY15                  No: do not overlay
         CLI   0(R2),C' '              Blank in sending line?
         BE    OVLY15                  Yes: no overlay blank with blank
         MVC   0(1,R5),0(R2)           Move character from input line
         OI    SW,$OVLCH               Mark overlay done
OVLY15   DS    0H
         LA    R2,1(,R2)               Next character input line
         LA    R5,1(,R5)               Next character output line
         BCT   R1,OVLY13               Loop until all chars done
         TM    SW,$OVLCH               Line changed?
         BNO   OVLY19                  No: carry
         L     R15,=V(SETCHNG)         Mark data changed in workspace
         CALL  (15)
         CLC   =CL3'ON',COMMNUM        Numbered data?
         BNE   OVLY19                  No: carry on
         TM    COMMFLG4,$COMVB         Variable numbered data (c 1-8)?
         BNO   OVLY17                  Yes: test others
         LR    R14,R4                  Point to output line
         SL    R14,COMBNDS             Point to start of data portion
         MVC   6(2,R14),COMMEMM        Move ISPF mm to cols 7 and 8
         B     OVLY19                  Next record if any
OVLY17   DS    0H
         TM    COMMFLG1,$COMCOB        Cobol numbers (col 1-6)?
         BO    OVLY19                  Yes: leave last 2 cols unchanged
         LR    R14,R4                  Point to output line
         SL    R14,COMBNDS             Point to start of data portion
         L     R15,COMMRECL            Length of data portion
         LA    R14,0(R14,R15)          Point to end of data portion
         BCTR  R14,0                   Discount
         BCTR  R14,0                           with 2
         MVC   0(2,R14),COMMEMM        Move ISPF mm to last 2 columns
OVLY19   DS    0H
         BXLE  R4,R6,OVLY11            Loop until all lines done
         XR    R15,R15                 Clear register 15 (return code)
         B     OVLY99
OVLY85   MVC   MSG5,OVL1TXT            Msg: Line-x not found
         STC   R14,MSG5+14             Line number into message
         B     OVLY97
OVLY95   MVC   MSG5,OVL2TXT            Msg: Invalid range
OVLY97   DS    0H
         LA    R15,4                   RC = 4, error
OVLY99   DS    0H
         LM    R2,R14,SAVEOVLY         Load callers registers
         BR    R14                     Return to caller
OVL1TXT  DC    CL25'-------- Line-x not found'  +14
OVL2TXT  DC    CL25'------ Invalid copy range'
         LTORG ,
         TITLE 'Examine entered Program Function Key'
         DROP
*---------------------------------------------------------------------*
*                                                                     *
*        P F K - Examine PFK entered.                                 *
*                Check if an 'M' or an 'm' and a number in the        *
*                command buffer is detected along the                 *
*                the UP or DOWN PFkey. Change accordingly to TOP,     *
*                BOTTOM, L -nnnnn or L +nnnnn.                        *
*                If no UP or DOWN  pfkey, move the                    *
*                command in the PFK to the output buffer.             *
*                                                                     *
*        Input:  Register 1, points to command area in screen (REP5)  *
*                COMMSCR, The unformatted buffer after the TGET       *
*                         NOEDIT with the AID byte and the command.   *
*                                                                     *
*        Return codes (in Register 15)                                *
*                00 - No errors                                       *
*                04 - PFK found with CON=Y (not executed but waits    *
*                     for action of the user)                         *
*                08 - PFK not defined                                 *
*                12 - PFK definition invalid (CON is not Y, N or X)   *
*                                                                     *
*------------------------------------------ (C)-2025 Skybird Systems -*
PFK      CSECT
         USING COMMAREA,R11            Addressability of RPFCOMM
         USING WORKAREA,R13            Addressability of Work area
         STM   R2,R14,SAVEPFK          Save callers registers
         LR    R12,R15                 Setup base
         USING PFK,R12
         XR    R15,R15                 Set Rc initially to 0
         LA    R4,COMPFK01             PFK's from RPFCOMM
         LA    R5,24
         LA    R10,BUFFER              Point to command buffer
         LR    R6,R1                   Point to REP5 in SCR5TXT
         L     R3,COMMSCR              Pickup unformatted screen
PFK01    DS    0H
         CLC   0(1,R4),0(R3)           Compare against AID byte
         BE    PFK05                   Yes: PFK found
         LA    R4,26(,R4)              Next PFK in RPFCOMM
         BCT   R5,PFK01
         LA    R15,8                   RC = 8 - PFK not found
         B     PFK99
PFK05    DS    0H
         CLI   1(R4),C'X'              X (Not defined)?
         BNE   PFK07
         LA    R15,8                   Rc = 8, PFK not defined
         B     PFK99
PFK07    DS    0H
         XC    0(48,R6),0(R6)          Clear inout command field REP5
         MVI   0(R10),C' '             Clear output
         MVC   1(47,R10),0(R10)                    command field
         LA    R1,48                   Command buffer is max 48
         LA    R3,6(,R3)               Point after AID, Cursor and SBA
PFK09    DS    0H                      .. of command buffer
         CLI   0(R3),COMMSBA           No command provided?
         BE    PFK31                   Yes: process only PFK
         CLI   0(R3),C' '              Blank in command field?
         BNE   PFK11                   No: look if figure or 'M' in cmd
         LA    R3,1(,R3)               Next byte in command buffer
         BCT   R1,PFK09                Loop
PFK11    DS    0H                                                  @rp8
         CLI   0(R3),X'94'             'm' or 'M' entered (Max)?
         BE    PFK23                   Yes: branch                 @rp8
         CLI   0(R3),C'M'              'm' or 'M' entered (Max)?
         BE    PFK23                   Yes: branch                 @rp8
         CLI   0(R3),C'1'              Figures entered?            @rp8
         BL    PFK31                   Yes: branch                 @rp8
         CLI   0(R3),C'9'              Figures entered?            @rp8
         BH    PFK31                   Yes: branch                 @rp8
         LR    R1,R3                   Save figure in cmd buffer
         LA    R5,4                    Max. 5 figures              @rp8
         LA    R3,1(,R3)               Point to 2nd figure         @rp8
         XR    R14,R14                 Clear counter               @rp8
PFK13    DS    0H                                                  @rp8
*---------------------------------------------------------------------*
*        At this point figures are detected in the command area (0-9)
*        Test if this figures are entered together with the
*        DOWN or UP pfkey. If so, form a L +nnnnn if DOWN or
*        L -nnnnn if UP
*------------------------------------------ (C)-2025 Skybird Systems -*
         CLI   0(R3),C'0'              Another figure ?            @rp8
         BL    PFK15                   No: end of scan             @rp8
         CLI   0(R3),C'9'              Another figure ?            @rp8
         BH    PFK15                   No: end of scan             @rp8
         LA    R3,1(,R3)               Next byte to scan           @rp8
         LA    R14,1(,R14)             Count figure                @rp8
         BCT   R5,PFK13                Loop                        @rp8
PFK15    DS    0H                                                  @rp8
         L     R3,COMMSCR              Pickup unformatted screen   @rp8
         CLC   2(4,R4),=C'DOWN'        Scroll forward?
         BNE   PFK19                   No: try UP
         MVC   0(3,R10),=C'L +'        Make a linecommand
         EX    R14,MVEBFR              Move figures after cmd      @rp8
         B     PFK99                                               @rp8
PFK19    DS    0H                                                  @rp8
         CLC   2(2,R4),=C'UP'          Scroll backward?
         BNE   PFK23                   No: ignore                  @rp8
         MVC   0(3,R10),=C'L -'        Make a linecommand
         EX    R14,MVEBFR              Move figures after cmd      @rp8
         B     PFK99
PFK23    DS    0H                                                  @rp8
         CLC   2(4,R4),=C'DOWN'        Scroll forward?
         BNE   PFK27                   No: try UP
         MVC   0(6,R6),=C'BOTTOM'      Yes: BOTTOM in REP5
         MVC   0(6,R10),=C'BOTTOM'          and in BUFFER
         B     PFK99
PFK27    DS    0H                                                  @rp8
         CLC   2(2,R4),=C'UP'          Scroll UP
         BNE   PFK31                   No: ignore
         MVC   0(3,R6),=C'TOP'         Yes: TOP command in REP5
         MVC   0(3,R10),=C'TOP'                 and in BUFFER
         B     PFK99
PFK31    DS    0H                                                  @rp8
         MVC   0(24,R6),2(R4)          Move PFK command into REP5
         MVC   0(24,R10),2(R4)         Move PFK command into BUFFER
         CLI   1(R4),C'N'
         BE    PFK99                   Good, Rc = 0
         CLI   1(R4),C'Y'
         BNE   PFK33
         LA    R15,4                   Rc = 4, PFK with CON=Y
         B     PFK99
PFK33    DS    0H
         LA    R15,12                  Rc = 12, PFK with invalid CON
         B     PFK99
PFK99    DS    0H
         LM    R2,R14,SAVEPFK          Load callers register
         BR    R14                     Return
MVEBFR   MVC   3(0,R10),0(R1)          << executed >>
         LTORG ,
         DROP
         TITLE 'FIND CURSOR POSITION'
*---------------------------------------------------------------------*
*                                                                     *
*        Find line which contains the cursor position after the       *
*        TGET in the CNVIN routine.                                   *
*        Output: NUMFLD, linenumber of found line.                    *
*                REG 1: Address of ROW number (4 bytes) and COLUMN    *
*                       number (4 bytes).                             *
*                                                                     *
*        Return codes (in register 15):                               *
*        00 - Line found, NUMFLD is populated with the line number    *
*             and register 1 is loaded with the row and column.       *
*        04 - Line not found, because the cursor in not in a data     *
*             line.                                                   *
*                                                                     *
*------------------------------------------ (C)-2025 Skybird Systems -*
CSR      CSECT
         USING COMMAREA,R11            Addressability of RPFCOMM
         USING WORKAREA,R13            Addressability of SCREEN area
         STM   R2,R6,SAVECSR           Save workregisters
         ST    R12,SAVECSR+20          Save    register 12
         ST    R14,SAVECSR+24          Save    register 14
         LR    R12,R15                 Base register
         USING CSR,R12
         LA    R1,CURSOR               Load cursor address from mainlin
         BAL   R5,SBA                  Convert SBA to row/column
         LTR   R15,R15                 Rc= 0?
         BNZ   CSR10                   No: use default
         XR    R2,R2                   Clear sign
         LA    R4,3                    Point to line 3
         L     R3,ROW                  Get row number
         CR    R3,R4                   Before line 3 or 4?
*
*        The data in screen starts in line 3 or 4 depending whether
*        the scale line is present
*
         BL    CSR10                   Yes: take default
         SR    R3,R4                   Offset to line 3 or 4
         L     R6,DATALINE             Length of entry
         MR    R2,R6                   Length 1 line on screen     @rpn
         LA    R2,LNE5                 First line
         ALR   R3,R2                   Add offset
         USING SCRLNE,R3               Address the screen line     @rpn
         CLI   SCRLINE#,C'0'           Numeric ?                   @rpn
         BL    CSR10                   No:  take default           @rpa
         CLI   SCRLINE#,C'9'           Numeric ?                   @rpn
         BH    CSR10                   No:  take default           @rpa
         MVC   NUMFLD(2),=C'00'        Leading zero
         MVC   NUMFLD+2(6),SCRLINE#    Line number into NUMFLD
         XR    R15,R15                 Rc= 0 - line found
         LA    R1,ROW                  A(ROW + COLUMN) in Register 1
         B     CSR99
CSR10    DS    0H
         LA    R15,4                   Rc= 4 - use default
         B     CSR99
CSR99    DS    0H
         LM    R2,R6,SAVECSR           Load workregisters
         L     R12,SAVECSR+20          Restore register 12
         L     R14,SAVECSR+24          Restore register 14
         BR    R14                     Return to caller
*
*        Convert an SBA from the TGET ASIS to a row/column
*        A(SBA) is in register 1 (without order)
*
SBA      DS    0H
         XR    R15,R15                 Clear register
         ICM   R15,3,0(R1)             SBA into register
         TM    0(R1),X'40'             2nd bit on in SBA?
         BNO   SBA25                   No: 14 bit SBA, r15 contains
*                                      already the correct offset
*
*        If bit 1 of the SBA is on (X'40'),
*        we have a 12 bit SBA of an offset of 4095 or below.
*        If bit 1 is off, we have a 14 bit SBA of an offset
*        of 4096 to 16383.
*
SBA02    DS    0H
*
*        Decompose 12 bit SBA - SBA is in register 15
*
         SLDL  R14,24                  Convert
         SLL   R15,2                          address
         SRDL  R14,6                                 to
         SRL   R15,20                                  offset
SBA25    DS    0H
         XR    R14,R14                 Clear even register
         D     R14,COMMCOLS            Divide by screen width
         LA    R14,1(,R14)             Plus 1
         ST    R14,COL                 Column number (bin)
         LA    R15,1(,R15)             Plus 1
         ST    R15,ROW                 Row number (bin)
         XR    R15,R15                 RC= 0
SBA99    DS    0H
         BR    R5
         LTORG ,
         DROP  ,
         TITLE 'Process the line commands'
*---------------------------------------------------------------------*
*                                                                     *
*        Routine: LCOMMAND                                            *
*                                                                     *
*        Process the Line command given in the line number.           *
*                                                                     *
*        The line commands will be examined. If the line command      *
*        is not complete, the line command will be set PENDING.       *
*                                                                     *
*        If the line command is complete, a primary command will      *
*        be made and placed into BUFFER (point to by register 10)     *
*        The commands are not executed, that will be done in VIEW.    *
*                                                                     *
*        Input: R1 with address of 3 fullwords:                       *
*        FW1 contains the address of RPFCOMM and will be loaded in R11*
*        FW2 contains the address of current line number on the       *
*            screen and will be loaded in R3                          *
*        FW3 contains the current record in the EDIT workspace and    *
*            will be loaded in R4 and mapped with DSECT WORKSPCE.     *
*                                                                     *
*------------------------------------------ (C)-2025 Skybird Systems -*
LCOMMAND CSECT                                                     @rpk
         USING WORKAREA,R13            Address of RPFEDIT work area
         STM   R2,R14,SAVELCMD
         LR    R12,R15                 Setup base register
         USING LCOMMAND,R12            Make LCOMMAND addressable
         USING COMMAREA,R11            Address of RPFCOMM area     @rpk
         USING WORKSPCE,R4             Address workspace line
         L     R11,0(,R1)              Address of RPFCOMM
         LM    R3,R4,4(R1)             Linenumber on screen and
*                                      current record in EDIT workspace
         STCM  R3,15,LCMDR3            Save reg.3                  @rpj
         CLI   RESETFLG,X'FF'          Reset in this screen entered?
         BE    LCMDEN99                Yes: branch
         MVI   L$LINE,C' '             Blank line command ...
         MVC   L$LINE+1(L'L$LINE-1),L$LINE      ... before copy
         LA    R8,L$LINE               Point to output linecmd     @rpk
         LR    R2,R3                   Point to input linecmd      @rpj
         LA    R14,6                   Loop counter                @rpj
LCMD2    DS    0H                                                  @rpj
         CLI   0(R2),X'EF'             numeric?                    @rpj
         BH    LCMD4                   Yes: skip                   @rpj
         MVC   0(1,R8),0(R2)           Move to output linecmd      @rpk
         LA    R8,1(,R8)               Next byte in output linecmd @rpk
LCMD4    DS    0H                                                  @rpj
         LA    R2,1(,R2)               Next byte in input linecmd  @rpj
         BCT   R14,LCMD2               Loop until all done         @rpj
         LA    R3,L$LINE               Linecommand in R3           @rpj
         TR    0(6,R3),COMTCAPS        Translate to capitals
         CLI   0(R3),C'A'              Destination "AFTER"
         BE    LDEST                   Process destination
         CLC   0(2,R3),=C'BB'          Destination 'After bottom data'
         BE    LDEST                   Process destination
         CLC   0(2,R3),=C'TT'          Destination 'Before top of data'
         BE    LDEST                   Process destination
         CLI   0(R3),C'C'              COPY line?
         BE    LCOPY                   Yes: process COPY
         CLI   0(R3),C'O'              COPY overlay?
         BE    LOVL                    Yes: process Overlay
         CLI   0(R3),C'D'              DELETE line?
         BE    LDELETE                 Yes: process DELETE
         CLC   0(2,R3),=C'LC'          Translate to ASIS?
         BE    LTRAN                   Yes: process translate line
         CLC   0(2,R3),=C'UC'          Translate to capitals?
         BE    LTRAN                   Process Xlate line
         CLI   0(R3),C'I'              Insert line(s)
         BE    LINSERT                 Process insert line(s)
         CLI   0(R3),C'M'              Move line?
         BE    LMOVE                   Yes: process move
         CLC   0(3,R3),=C'RES'         Reset pending line commands?
         BE    LRESET1                 Yes: process reset
         CLI   0(R3),C'R'              Repeat line
         BE    LREPEAT                 Process repeat
         B     LCMDEND                 No line command present
LDEST    DS    0H
         CLI   DESTFLAG,X'00'          Destination present?
         BNE   LDESTERR                Yes: error
         CLI   OVLFLAG,X'00'           Overlay present?
         BNE   LDESTERR                Yes: mutual excl. with O(verlay)
         CLI   CUTFLAG,X'00'           CUT command pending ?       @rpb
         BNE   LDESTERR                No: error                   @rpb
         CLI   CREFLAG,X'00'           CREATE/REPLACE command pending?
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   REPFLAG,X'00'           Repeat flag on?
         BNE   LCOMMERR                No: conflicting line commands
         MVC   DESTLINE,=C'00000000'   Preset
         MVC   DESTCOMM,WORKSLIN       Linenumber of dest
         CLC   0(2,R3),=C'BB'          BB (After bottom of data)?
         BE    LDEST00                 Yes: branch
         CLC   0(2,R3),=C'TT'          TT (Before top of data)?
         BE    LDEST10                 Yes: branch
         CLI   0(R3),C'A'              A (after)?
         BE    LDEST20                 Yes: branch
LDEST00  DS    0H
         MVC   LCDEST,WORKSLIN         Get line number
         MVC   LCDEST(2),=C'BB'        Save line command in linenumber
         L     R8,COMMLAST             After last line
         MVC   DESTLINE,OFFSETN2(R8)   Get line number
         B     LDEST30
LDEST10  DS    0H
         MVC   LCDEST,WORKSLIN         Get linenumber
         MVC   LCDEST(2),=C'TT'        Save line command
         B     LDEST30
LDEST20  DS    0H
         MVC   LCDEST,WORKSLIN         Get linenumber
         MVC   LCDEST(1),=C'A'         Save line command
         MVC   DESTLINE,WORKSLIN       After this line
LDEST30  DS    0H
         MVI   DESTFLAG,X'FF'          Set DESTFLAG
         MVI   LCFLAG,X'FF'            Set commands pending
         CLI   COPYFLAG,X'FF'          COPY command pending?
         BNE   LDEST40                 No: branch
         B     LCOPY30                 Process
LDEST40  DS    0H
         CLI   MOVEFLAG,X'FF'          MOVE command pending?
         BNE   LDEST50                 NO.                         @rpb
         B     LMOVE30                 PROCESS
LDEST50  DS    0H                                                  @rpb
         CLI   PASTEFLG,X'FF'          PASTE command pending       @rpb
         BNE   LDEST60                 No.
         MVI   BUFFER,C' '             Blank
         MVC   BUFFER+1(L'BUFFER-1),BUFFER   buffer
         MVC   BUFFER(5),=C'PASTE'     Put PASTE cmd in buffer     @rpk
         B     LCMDEND                 End of routine              @rpb
LDEST60  DS    0H
         CLI   APNDFLAG,X'FF'          COPY pending?
         BNE   LCMDEND                 No: Exit
         MVI   BUFFER,C' '             Blank
         MVC   BUFFER+1(L'BUFFER-1),BUFFER   buffer
         MVC   BUFFER(4),=C'COPY'      COPY .... A command
         B     LCMDEND                 End of routine
LDESTERR DS    0H
         CLC   DESTCOMM,WORKSLIN       Same line
         BE    LCMDEND
         B     LCOMMERR
LOVL     DS    0H
         CLI   PASTEFLG,X'00'          PASTE command ?
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   DELFLAG,X'00'           DELETE command?
         BNE   LCOMMERR                Yes: Mutual exclusive with D(EL)
         CLI   DESTFLAG,X'00'          Dest (A) command
         BNE   LCOMMERR              Overlay is mutual excl. with A
         CLI   REPFLAG,X'00'           REPEAT command ?
         BNE   LCOMMERR                Yes: mutual execlusive with R
         CLI   MOVEFLAG,X'00'          MOVE command  ?
         BNE   LCOMMERR                Yes: mutual exclusive with M
         CLI   TRANFLAG,X'00'          UC or LC command pending ?
         BNE   LCOMMERR                Yes: mutual execlusive
         CLI   COPYFLAG,X'00'          C line command pending?
         BE    LOVL10                  No: carry
         CLI   LCCOM1+1,X'F0'          Is 2nd position numeric?
         BL    LCOMMERR                No: conflicting
*
*        OO -- OO  or O line command works only in combination with
*        The C line command and not with CC, CT or CB
*
LOVL10   DS    0H
         MVI   LCFLAG,X'FF'            Set flag
         CLC   CMNDOVL1,WORKSLIN       Already processed ?
         BE    LCMDEND                 Yes: branch
         CLC   CMNDOVL2,WORKSLIN       Already processed ?
         BE    LCMDEND                 Yes: branch
         CLC   0(2,R3),=C'OO'          OO (overlay a range)?
         BE    LOVL20                  Yes: carry
         MVC   LCOVL1,WORKSLIN         Get linenumber
         MVI   LCOVL1,C'O'             Save command
         MVC   CMNDOVL1,WORKSLIN       Save linenumber  1
         MVI   OVLFLAG,X'FF'           Set flag (O command given)
         B     LOVL40
LOVL20   DS    0H
         CLI   OVLFLAG,X'00'           First line?
         BNE   LOVL30                  Yes: carry on
         MVI   OVLFLAG,X'F0'           Set Overlay flag half
         MVC   LCOVL1,WORKSLIN         Save linenumber
         MVC   LCOVL1(2),=C'OO'        Save command
         MVC   CMNDOVL1,WORKSLIN       Save linenumber
         B     LCMDEND
LOVL30   DS    0H
         MVI   OVLFLAG,X'FF'           Set Overlay flag complete
         MVC   LCOVL2,WORKSLIN         Save linenumber
         MVC   LCOVL2(2),=C'OO'        Save command
         MVC   CMNDOVL2,WORKSLIN       Save linenumber
LOVL40   DS    0H
         CLI   COPYFLAG,X'FF'          Copy command present?
         BNE   LCMDEND                 No: carry on
LOVL50   DS    0H
         MVI   BUFFER,C' '             Blank
         MVC   BUFFER+1(L'BUFFER-1),BUFFER   buffer
         MVC   BUFFER(4),=C'OVLY'      Process OVLY primary command
         MVC   BUFFER+5(6),CMNDLIN1    First operand
         MVC   BUFFER+12(6),CMNDOVL1   Second operand
         CLI   CMNDOVL2,0              No third line number?
         BE    LRESET1                 Yes: process command
         MVC   BUFFER+19(6),CMNDOVL2   Third line number
         B     LRESET1                 Clear all pending commands
LCOPY    DS    0H
         CLI   APNDFLAG,X'00'          APPEND/COPY primary command?
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   PASTEFLG,X'00'          PASTE command ?             @rpb
         BNE   LCOMMERR                Yes: mutual excl. with PASTE
         CLI   DELFLAG,X'00'           DELETE command?
         BNE   LCOMMERR                Yes: mutual exclusive with D(EL)
         CLI   REPFLAG,X'00'           REPEAT command ?
         BNE   LCOMMERR                Yes: mutual exclusive with R
         CLI   MOVEFLAG,X'00'          MOVE command  ?
         BNE   LCOMMERR                Yes: mutual exclusive with M
         CLI   TRANFLAG,X'00'          UC or LC command pending ?
         BNE   LCOMMERR                Yes: conflicting commands
         CLC   CMNDLIN1,WORKSLIN       Already processed ?
         BE    LCMDEND                 Yes: branch
         CLC   CMNDLIN2,WORKSLIN       Already processed ?
         BE    LCMDEND                 Yes: branch
         CLI   COPYFLAG,X'FF'          COPY command ?
         BE    LCOMMERR                Yes
         MVI   LCFLAG,X'FF'            Set flag
         CLC   0(2,R3),=C'CC'          Cc ?
         BE    LCOPY09                 Yes
         CLC   0(2,R3),=C'CT'          COPY befor top of data?
         BE    LCOPY07                 Yes: branch
         CLC   0(2,R3),=C'CB'          COPY after bottom of data?
         BE    LCOPY05                 No: branch
*
*        Process the 'C' line command (not the CC CB or CT)
*
         MVC   CMNDLIN1,WORKSLIN       Save linenumber
         MVC   CMNDLIN2,WORKSLIN       Save linenumber
         MVC   LCCOM1,WORKSLIN         Get linenumber
         MVI   LCCOM1,C'C'             Save command
         MVI   COPYFLAG,X'FF'          Set flag
         CLI   OVLFLAG,X'FF'           Overlay flag complete?
         BNE   LCOPY20
         B     LOVL50                  C -> OO -- OO or C -> O complete
*                                      Line command CB
LCOPY05  CLI   OVLFLAG,X'00'           Overlay line command?
         BNE   LCOMMERR                Yes: conflicting commands
         MVC   LCCOM1,WORKSLIN         Get linenumber
         MVC   CMNDLIN1,WORKSLIN       Save linenumber  1
         L     R8,COMMLAST             Pointer last record
         MVC   CMNDLIN2,OFFSETN2(R8)   Save linenumber  2
         MVC   LCCOM2,OFFSETN2(R8)     Get linenumber
         MVC   LCCOM1(2),=C'CC'        Save command
         MVC   LCCOM2(2),=C'CC'        Save command
         B     LCOPY20
LCOPY07  DS    0H                      Line command CT
         CLI   OVLFLAG,X'00'           Overlay line command?
         BNE   LCOMMERR                Yes: conflicting commands
         MVC   LCCOM2,WORKSLIN         Get linenumber
         MVC   CMNDLIN2,WORKSLIN       Save linenumber  2
         L     R8,COMWSTRT             Pointer first  record
         MVC   CMNDLIN1,OFFSETN2(R8)   Save linenumber  1
         MVC   LCCOM1,OFFSETN2(R8)     Get linenumber
         MVC   LCCOM1(2),=C'CC'        Save command
         MVC   LCCOM2(2),=C'CC'        Save command
         B     LCOPY20
LCOPY09  DS    0H                      Line command CC
         CLI   OVLFLAG,X'00'           Overlay line command?
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   COPYFLAG,X'00'          First line?
         BNE   LCOPY10                 Yes
         MVI   COPYFLAG,X'F0'          Set COPY flag
         MVC   LCCOM1,WORKSLIN         Save linenumber
         MVC   LCCOM1(2),=C'CC'        Save command
         MVC   CMNDLIN1,WORKSLIN       Save linenumber
         B     LCMDEND
LCOPY10  DS    0H
         CLI   COPYFLAG,X'F0'          Second line ?
         BNE   LCOMMERR                No:  error
         MVC   LCCOM2,WORKSLIN         Save linenumber
         MVC   LCCOM2(2),=C'CC'        Save command
         MVC   CMNDLIN2,WORKSLIN       Save linenumber
         CLC   CMNDLIN1,CMNDLIN2       Line1 > line2 ?
         BNH   LCOPY20
         XC    CMNDLIN1,CMNDLIN2       Swap
         XC    CMNDLIN2,CMNDLIN1            the
         XC    CMNDLIN1,CMNDLIN2                lines
LCOPY20  DS    0H
         MVI   COPYFLAG,X'FF'          Set flag
         CLI   CUTFLAG,X'FF'           'CUT' command given?        @rpb
         BE    LCOPY30                 Yes: process CUT command    @rpb
         CLI   CREFLAG,X'00'           CREATE/REPLACE command given?
         BNE   LCOPY30                 Yes: process CUT/CREATE/REPLACE
         CLI   DESTFLAG,X'FF'          Destination (A) present?
         BNE   LCMDEND                 No: line command is pending
LCOPY30  DS    0H
         MVI   BUFFER,C' '             Blank
         MVC   BUFFER+1(L'BUFFER-1),BUFFER   buffer
         MVC   BUFFER(2),=C'CO'        CO primary command
         MVC   BUFFER+3(6),CMNDLIN1    First linenumber            @rpk
         MVC   BUFFER+10(6),CMNDLIN2   Second linenumber           @rpk
         CLI   CUTFLAG,X'FF'           'CUT' command pending?      @rpb
         BE    LCOPY32                 Yes: process 'CUT' command
         CLI   CREFLAG,X'F0'           'CREATE' command pending?
         BNE   LCOPY31                 No: process 'CO' command
         MVC   BUFFER(2),=X'FFC3'      Change command verb
         B     LRESET1                 Clear all pending commands
LCOPY31  DS    0H
         CLI   CREFLAG,X'0F'           'REPLACE' command pending?
         BNE   LCOPY34                 No: process 'CO' command
         MVC   BUFFER(2),=X'FFD9'      Change command verb
         B     LRESET1                 Clear all pending commands
LCOPY32  DS    0H                                                  @rpb
         MVC   BUFFER(2),=X'FFE4'      Change command verb
         B     LRESET1                 Clear all pending commands  @rpb
LCOPY34  DS    0H                                                  @rpb
         MVC   BUFFER+17(6),DESTLINE   Destination line number     @rpk
         B     LRESET1
LMOVE    DS    0H
         CLI   APNDFLAG,X'00'          APPEND/COPY primary command?
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   REPFLAG,X'00'           REPEAT command?
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   OVLFLAG,X'00'           OO or O command pending?
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   CREFLAG,X'00'           CREATE/REPLACE command pending?
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   PASTEFLG,X'00'          PASTE command ?             @rpb
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   DELFLAG,X'00'           DELETE command?
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   COPYFLAG,X'00'          COPY command?
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   TRANFLAG,X'00'          UC or LC command?
         BNE   LCOMMERR                Yes: conflicting commands
         CLC   CMNDLIN1,WORKSLIN       Already processed ?
         BE    LCMDEND                 Yes: finished
         CLC   CMNDLIN2,WORKSLIN       Already processed ?
         BE    LCMDEND                 Yes: finished
         CLI   MOVEFLAG,X'FF'          MOVE command?
         BE    LCOMMERR                Yes: error
         MVI   LCFLAG,X'FF'            Set flag
         CLC   0(2,R3),=C'MM'          MM (block of MM-MM)?
         BE    LMOVE09                 Yes
         CLC   0(2,R3),=C'MT'          MOVE from first line?
         BE    LMOVE07                 Yes: branch
         CLC   0(2,R3),=C'MB'          MOVE including last line ?
         BE    LMOVE05                 Yes: carry on
*
*                                      Line command M (not MT,MB or MM)
         MVC   CMNDLIN1,WORKSLIN       Save linenumber
         MVC   CMNDLIN2,WORKSLIN       Save linenumber
         MVC   LCCOM1,WORKSLIN         Get linenumber
         MVC   LCCOM1(1),=C'M'         Save command
         B     LMOVE20
LMOVE05  DS    0H                      Line command MB (move to bottom
         MVC   LCCOM1,WORKSLIN         Get linenumber
         MVC   CMNDLIN1,WORKSLIN       Save linenumber  1
         L     R8,COMMLAST             Pointer last record
         MVC   CMNDLIN2,OFFSETN2(R8)   Save linenumber  2
         MVC   LCCOM2,OFFSETN2(R8)     Get linenumber
         MVC   LCCOM1(2),=C'MM'        Save command
         MVC   LCCOM2(2),=C'MM'        Save command
         B     LMOVE20
LMOVE07  DS    0H                      Line command MT (move from top)
         MVC   LCCOM2,WORKSLIN         Get linenumber
         MVC   CMNDLIN2,WORKSLIN       Save linenumber  2
         L     R8,COMWSTRT             Pointer first record
         MVC   CMNDLIN1,OFFSETN2(R8)   Save linenumber  1
         MVC   LCCOM1,OFFSETN2(R8)     Get  linenumber
         MVC   LCCOM1(2),=C'MM'        Save command
         MVC   LCCOM2(2),=C'MM'        Save command
         B     LMOVE20
LMOVE09  DS    0H                      Line command MM
         CLI   MOVEFLAG,X'00'          First line ?
         BNE   LMOVE10                 Yes:
         MVI   MOVEFLAG,X'F0'          Set flag (first part)
         MVC   LCCOM1,WORKSLIN         Get  linenumber
         MVC   LCCOM1(2),=C'MM'        Save command
         MVC   CMNDLIN1,WORKSLIN       Save linenumber
         B     LCMDEND
LMOVE10  DS    0H
         CLI   MOVEFLAG,X'F0'          Second line?
         BNE   LCOMMERR                No:  error
         MVC   LCCOM2,WORKSLIN         Get linenumber
         MVC   LCCOM2(2),=C'MM'        Save command
         MVC   CMNDLIN2,WORKSLIN       Save linenumber
         CLC   CMNDLIN1,CMNDLIN2       Line1  > line2  ?
         BNH   LMOVE20                 No: branch
         XC    CMNDLIN1,CMNDLIN2       Swap
         XC    CMNDLIN2,CMNDLIN1           the
         XC    CMNDLIN1,CMNDLIN2              lines
LMOVE20  DS    0H
         MVI   MOVEFLAG,X'FF'          Set flag
         CLI   CUTFLAG,X'FF'           'CUT' command given?
         BE    LMOVE30                 Yes: process CUT command
         CLI   DESTFLAG,X'FF'          Destination (A) present?
         BNE   LCMDEND                 No: Line command is pending
LMOVE30  DS    0H
         MVI   BUFFER,C' '             Blank
         MVC   BUFFER+1(L'BUFFER-1),BUFFER   buffer
         MVC   BUFFER(2),=C'MO'        Process Line commands       @rpk
         MVC   BUFFER+3(6),CMNDLIN1    First  linenumber           @rpk
         MVC   BUFFER+10(6),CMNDLIN2   Second linenumber           @rpk
         MVC   BUFFER+17(6),DESTLINE   Destination linenumber      @rpk
         CLI   CUTFLAG,X'FF'           'CUT' command pending?
         BE    LMOVE32                 Yes: process 'CUT' command
         B     LRESET1                 Primary command created
LMOVE32  DS    0H
         MVC   BUFFER(2),=X'FFE4'      Change command verb
         OI    SW,$CUTMOVE             Mark CUT with MM line commands
         B     LRESET1                 Reset pending line commands
LDELETE  DS    0H
         CLI   APNDFLAG,X'00'          APPEND/COPY primary command?
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   REPFLAG,X'00'           REPEAT line command?
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   OVLFLAG,X'00'           Overlay line command?
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   CUTFLAG,X'00'           CUT command pending ?       @rpb
         BNE   LCOMMERR                Yes: conflicting commands   @rpb
         CLI   CREFLAG,X'00'           CREATE/REPLACE command pending?
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   PASTEFLG,X'00'          Paste command ?             @rpb
         BNE   LCOMMERR                Yes: conflicting commands   @rpb
         CLI   DESTFLAG,X'00'          Destination (A)?
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   COPYFLAG,X'00'          COPY pending?
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   MOVEFLAG,X'00'          MOVE pending?
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   TRANFLAG,X'00'          UC or LC command pending?
         BNE   LCOMMERR                Yes: conflicting commands
         CLC   CMNDLIN1,WORKSLIN       Already processed ?
         BE    LCMDEND                 Yes: finished
         CLC   CMNDLIN2,WORKSLIN       Already processed ?
         BE    LCMDEND                 Yes: finished
         CLC   0(2,R3),=C'DD'          DD (Block of DD ---> DD)?
         BE    LDEL09                  Yes
         CLC   0(2,R3),=C'DT'          DELETE form first line (DT)?
         BE    LDEL07                  Yes: process
         CLC   0(2,R3),=C'DB'          DELETE until last line (DB)?
         BE    LDEL05                  No: branch
*
*        Process the 'D' line command (not the DD DB or DT)
*        Place line to delete in the DELETE table (DELTBLE).
*        The DELETE commands will be executed at label VIEW.
*
         CLI   DELFLAG,X'00'           DELETE (DD, DT or DB) pending?
         BNE   LCOMMERR                Conflicting if yes
         LA    R1,DELTBLE              Delete table with D line nbrs
         LA    R14,10                  Max 10 lines in table
LDEL01   CLI   0(R1),0                 Free entry?
         BE    LDEL03                  Yes: use this entry
         LA    R1,6(,R1)               Look for next free entry
         BCT   R14,LDEL01              Loop
         B     LCMDEN99                No room in table, ignore
LDEL03   MVC   0(6,R1),WORKSLIN        Move line to delete in table
         B     LCMDEN99                End of routine
*
LDEL05   DS    0H                      Line command 'DB'
         MVC   CMNDLIN1,WORKSLIN       Save linenumber 1
         L     R8,COMMLAST             Pointer last record
         MVC   CMNDLIN2,OFFSETN2(R8)   Save linenumber 2
         B     LDEL20
LDEL07   DS    0H                      Line command 'DT'
         MVC   CMNDLIN2,WORKSLIN       Save linenumber 2
         L     R8,COMWSTRT             Pointer first record
         MVC   CMNDLIN1,OFFSETN2(R8)   Save linenumber  1
         B     LDEL20
LDEL09   DS    0H                      Line command 'DD'
         MVI   LCFLAG,X'FF'            Set flag
         CLI   DELFLAG,X'00'           First line ?
         BNE   LDEL10                  No: branch
         MVI   DELFLAG,X'F0'           Set flag
         MVC   LCCOM1,WORKSLIN         Save linenumber
         MVC   LCCOM1(2),=C'DD'        Save command
         MVC   CMNDLIN1,WORKSLIN       Save linenumber
         B     LCMDEND
LDEL10   DS    0H
         MVC   CMNDLIN2,WORKSLIN       Save linenumber
         CLC   CMNDLIN1,CMNDLIN2       Line1 > line2 ?
         BNH   LDEL20
         XC    CMNDLIN1,CMNDLIN2       Swap
         XC    CMNDLIN2,CMNDLIN1            the
         XC    CMNDLIN1,CMNDLIN2                lines
LDEL20   DS    0H
         MVI   BUFFER,C' '             Create DEL xxxx yyyy command
         MVC   BUFFER+1(L'BUFFER-1),BUFFER  Blank buffer
         MVC   BUFFER(3),=C'DEL'       Process line commands       @rpk
         MVC   BUFFER+4(6),CMNDLIN1    First  linenumber           @rpk
         MVC   BUFFER+11(6),CMNDLIN2   Second linenumber           @rpk
         B     LRESET1
LTRAN    DS    0H
         CLI   APNDFLAG,X'00'          APPEND/COPY primary command?
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   REPFLAG,X'00'           Repeat command ?
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   DESTFLAG,X'00'          Destination (A)?
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   OVLFLAG,X'00'           OO or O command pending?
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   CUTFLAG,X'00'           CUT command pending ?       @rpb
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   CREFLAG,X'00'           CREATE/REPLACE command pending?
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   PASTEFLG,X'00'          PASTE command ?             @rpb
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   COPYFLAG,X'00'          COPY pending?
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   MOVEFLAG,X'00'          MOVE pending?
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   DELFLAG,X'00'           DELETE command pending?
         BNE   LCOMMERR                Yes: conflicting commands
         CLC   CMNDLIN1,WORKSLIN       Already processed?
         BE    LCMDEND                 Yes: finished
         CLC   CMNDLIN2,WORKSLIN       Already processed?
         BE    LCMDEND                 Yes: finished
         CLC   1(2,R3),=C'CC'          'UCC' or 'LCC'?
         BE    LTRAN09                 Yes: branch
         CLC   1(2,R3),=C'CT'          Translate from first line?
         BE    LTRAN07                 Yes: branch
         CLC   1(2,R3),=C'CB'          Translate until last line?
         BE    LTRAN05                 No: branch
*
*                                      LC/UC (not xCB xCT or xCC)
         CLI   TRANFLAG,X'00'          Xlate (UC or LC) cmd pending?
         BNE   LCOMMERR                Yes: conflicting commands
         MVC   CMNDLIN1,WORKSLIN       Save linenumber 1
         MVC   CMNDLIN2,WORKSLIN       Save linenumber 2
         B     LTRAN20
LTRAN05  DS    0H                      Line command LCB or UCB
         MVC   CMNDLIN1,WORKSLIN       Save linenumber 1
         L     R8,COMMLAST             Pointer last record
         MVC   CMNDLIN2,OFFSETN2(R8)   Save linenumber 2
         B     LTRAN20
LTRAN07  DS    0H                      Line command LCT or UCT
         MVC   CMNDLIN2,WORKSLIN       Save linenumber 2
         L     R8,COMWSTRT             Pointer first record
         MVC   CMNDLIN1,OFFSETN2(R8)   Save linenumber  1
         B     LTRAN20
LTRAN09  DS    0H                      Line command LCC or UCC
         MVI   LCFLAG,X'FF'            Set flag
         CLI   TRANFLAG,X'00'          First line ?
         BNE   LTRAN10                 No: branch
         MVI   TRANFLAG,X'F0'          Set flag
         MVC   LCCOM1,WORKSLIN         Save linenumber
         MVC   LCCOM1(1),0(R3)         Save
         MVC   LCCOM1+1(2),=C'CC'           command
         MVC   CMNDLIN1,WORKSLIN       Save linenumber
         B     LCMDEND
LTRAN10  DS    0H
         MVC   CMNDLIN2,WORKSLIN       Save linenumber
         CLC   CMNDLIN1,CMNDLIN2       Line1 > line2 ?
         BNH   LTRAN20
         XC    CMNDLIN1,CMNDLIN2       Swap
         XC    CMNDLIN2,CMNDLIN1            the
         XC    CMNDLIN1,CMNDLIN2                lines
LTRAN20  DS    0H
         MVI   BUFFER,C' '             Blank
         MVC   BUFFER+1(L'BUFFER-1),BUFFER   buffer
         MVC   BUFFER(1),0(R3)         Process line commands       @rpk
         MVC   BUFFER+1(1),=C'C'       'LC' or 'UC command         @rpk
         MVC   BUFFER+3(6),CMNDLIN1    First linenumber            @rpk
         MVC   BUFFER+10(6),CMNDLIN2   Second linenumber           @rpk
         B     LRESET1
LINSERT  DS    0H
         CLI   APNDFLAG,X'00'          APPEND/COPY primary command?
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   REPFLAG,X'00'           REPEAT command?
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   OVLFLAG,X'00'           OO or O command pending?
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   CUTFLAG,X'00'           CUT command pending ?       @rpb
         BNE   LCOMMERR                Yes: conflicting commands   @rpb
         CLI   CREFLAG,X'00'           CREATE/REPLACE command pending?
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   PASTEFLG,X'00'          PASTE command ?             @rpb
         BNE   LCOMMERR                Yes: conflicting commands   @rpb
         CLI   COPYFLAG,X'00'          COPY pending?
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   MOVEFLAG,X'00'          MOVE pending?
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   DELFLAG,X'00'           DELETE pending?
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   DESTFLAG,X'00'          Destination (A) pending?
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   TRANFLAG,X'00'          LC or UC command pending?
         BNE   LCOMMERR                Yes: conflicting commands
         MVI   BUFFER,C' '             Blank
         MVC   BUFFER+1(L'BUFFER-1),BUFFER   buffer
         MVI   BUFFER,C'I'             Process line commands       @rpk
         MVC   BUFFER+2(6),WORKSLIN    Insert line number          @rpk
         ICM   R3,15,LCMDR3            Restore Reg.3               @rpj
         BCTR  R3,0                    Pointer to cursor address
         BCTR  R3,0                    of line number
         LA    R1,CURSOR               Point to cursor address     @rpk
         TM    0(R1),X'40'             14 bit SBA address?
         BNZ   LINS01                  No: process 12 bit address
         LH    R1,0(,R1)               Pickup SBA offset of cursor
         LH    R14,0(,R3)              Pickup SBA offset of line
         SR    R1,R14                  Offset in line number (I hope)
         BNP   LCMDEND                 If negative insert 1 line
         B     LINS02                  Branch
LINS01   DS    0H
         CLC   0(1,R1),0(R3)           Same line ?                 @rpk
         BNE   LCMDEND                 No: insert 1 line
         MVC   WORKBYTE,1(R1)          Get   column                @rpk
         NI    WORKBYTE,X'3F'          Last 6 bits
         XR    R1,R1                   Reg1 := 0
         IC    R1,WORKBYTE             Get
         MVC   WORKBYTE,1(R3)          Get start field
         NI    WORKBYTE,X'3F'          Last 6 bits
         XR    R2,R2                   Reg2 := 0
         IC    R2,WORKBYTE             Get
         SR    R1,R2                   Length in bytes
LINS02   DS    0H
         C     R1,=F'6'                Max. is 6
         BH    LCMDEND                 Too long
         BCTR  R1,0                    - 1
         LTR   R1,R1                   Only an  'I' entered?
         BZ    LCMDEND                 Yes: finished, execute
         LA    R3,2(,R3)               Skip line/column
         LA    R2,BUFFER+8             Pointer in command buffer   @rpk
LINSERT1 DS    0H
         CLI   0(R3),C'I'              'I' command found?          @rpm
         BE    LINSER1A                Yes: branch                 @rpm
         CLI   0(R3),X'89'             'i' command found?
         BE    LINSER1A                Yes: branch
         LA    R3,1(,R3)               The I cmd is there but not  @rpm
*                                      in column 1 of linenumber   @rpm
         BCTR  R1,0                    Decrease with 1             @rpm
         LTR   R1,R1                   Only an I entered?          @rpm
         BZ    LCMDEND                 Yes: finished               @rpm
         B     LINSERT1                in column 1 entered         @rpm
LINSER1A DS    0H                                                  @rpm
         LA    R2,1(,R2)               Increase pointer in buffer
         LA    R3,1(,R3)               Increase pointer in number
         CLI   0(R3),C' '              End of command?
         BE    LCMDEND                 Yes: end of routine
         MVC   0(1,R2),0(R3)           Move character
         BCT   R1,LINSER1A             Next character
         B     LCMDEND
LREPEAT  DS    0H
         CLI   APNDFLAG,X'00'          APPEND/COPY primary command?
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   OVLFLAG,X'00'           OO - OO (or O) command pending?
         BNE   LCOMMERR                Yes: mutual exclusive
         CLI   CUTFLAG,X'00'           CUT command pending ?       @rpb
         BNE   LCOMMERR                YES.                        @rpb
         CLI   CREFLAG,X'00'           CREATE/REPLACE command pending?
         BNE   LCOMMERR                Yes: conflicting commands
         CLI   PASTEFLG,X'00'          Paste command ?             @rpb
         BNE   LCOMMERR                YES                         @rpb
         CLI   COPYFLAG,X'00'          Copy pending?
         BNE   LCOMMERR                Yes: error
         CLI   MOVEFLAG,X'00'          Move pending?
         BNE   LCOMMERR                Yes: error
         CLI   DELFLAG,X'00'           Delete pending?
         BNE   LCOMMERR                Yes: error
         CLI   DESTFLAG,X'00'          Destination pending?
         BNE   LCOMMERR                Yes: error
         MVI   LCFLAG,X'FF'            Set line command flag
         CLC   0(2,R3),=C'RR'          RR --> RR block command?
         BE    LREPEAT2                Yes: branch
         CLI   REPFLAG,X'F0'           Repeat block flag on ?
         BE    LCOMMERR                Yes: error
         MVI   BUFFER,C' '             Blank
         MVC   BUFFER+1(L'BUFFER-1),BUFFER   buffer
         MVI   BUFFER,C'R'             Create 'R' primary command  @rpk
         MVC   BUFFER+2(6),WORKSLIN                                @rpk
         ICM   R3,15,LCMDR3            Restore Reg.3               @rpj
         BCTR  R3,0                    Pointer to cursor address
         BCTR  R3,0
         LA    R1,CURSOR               Point to cursor address     @rpk
         TM    0(R1),X'40'             14 bit address?
         BNZ   LREP01                  No: process 12 bit address
         LH    R1,0(,R1)               Pickup SBA offset of cursor
         LH    R14,0(,R3)              Pickup SBA offset of line
         SR    R1,R14                  Offset in line number (I hope)
         BNP   LRESET1                 If negative Repeat 1 line
         B     LREP02                  Branch
LREP01   DS    0H
         CLC   0(1,R1),0(R3)           Same line ?                 @rpk
         BNE   LRESET1                 No: repeat 1 line
         MVC   WORKBYTE,1(R1)          Get column                  @rpk
         NI    WORKBYTE,X'3F'          Last 6 bits
         XR    R1,R1                   Reg1 := 0
         IC    R1,WORKBYTE
         MVC   WORKBYTE,1(R3)          Get start of field
         NI    WORKBYTE,X'3F'          Last 6 bits
         XR    R2,R2                   Reg2 := 0
         IC    R2,WORKBYTE             Get
         SR    R1,R2                   Length in bytes
LREP02   DS    0H
         C     R1,=F'6'                Max. is 6
         BH    LRESET1                 Too long
         BCTR  R1,0                    - 1
         LTR   R1,R1                   Alone an 'R' entered ?
         BZ    LRESET1                 Yes: finished
         LA    R3,2(,R3)               Skip line/column
         LA    R2,BUFFER+8             Pointer in command buffer   @rpk
LREPEAT1 DS    0H
         CLI   0(R3),C'R'              'R' command found?          @rpm
         BE    LREPEA1A                Yes: branch                 @rpm
         CLI   0(R3),X'99'             'r' command found?          @rpm
         BE    LREPEA1A                Yes: branch                 @rpm
         LA    R3,1(,R3)               The R cmd is there but not  @rpm
*                                      in column 1 of linenumber   @rpm
         BCTR  R1,0                    Decrease with 1             @rpm
         LTR   R1,R1                   Only an R entered?          @rpm
         BZ    LRESET1                 Yes: finished               @rpm
         B     LREPEAT1                in column 1 entered         @rpm
LREPEA1A DS    0H                                                  @rpm
         LA    R2,1(,R2)               Increase pointer in BUFFER
         LA    R3,1(,R3)               Skip 'R'
         CLI   0(3),C' '               End of Command?
         BE    LRESET1                 Yes: finished
         MVC   0(1,R2),0(R3)           Move character
         BCT   R1,LREPEA1A             Next Character
         B     LRESET1
LREPEAT2 DS    0H
         CLC   CMNDLIN1,WORKSLIN       Already processed ?
         BE    LCMDEND                 Yes, still pending
         CLI   REPFLAG,X'00'           First line ?
         BNE   LREPEAT3                Yes:
         MVI   REPFLAG,X'F0'           Set flag
         MVC   LCCOM1,WORKSLIN         Get linenumber
         MVC   LCCOM1(2),=C'RR'        Save command
         MVC   CMNDLIN1,WORKSLIN       Save linenumber
         B     LCMDEND                 'RR' pending
LREPEAT3 DS    0H
         CLI   REPFLAG,X'F0'           Second line  ?
         BNE   LCOMMERR                No:  error
         MVC   CMNDLIN2,WORKSLIN       Save linenumber
         CLC   CMNDLIN1,CMNDLIN2       Line1  > line2  ?
         BNH   LREPEAT4                No: branch
         XC    CMNDLIN1,CMNDLIN2       Swap
         XC    CMNDLIN2,CMNDLIN1             the
         XC    CMNDLIN1,CMNDLIN2                lines
LREPEAT4 DS    0H
         MVI   BUFFER,C' '             Blank
         MVC   BUFFER+1(L'BUFFER-1),BUFFER   buffer
         MVC   BUFFER(2),=C'CO'        CO primary command          @rpk
         MVC   BUFFER+3(6),CMNDLIN1    First  linenumber           @rpk
         MVC   BUFFER+10(6),CMNDLIN2   Second linenumber           @rpk
         MVC   BUFFER+17(6),CMNDLIN2   Copy after 2nd line #       @rpk
         B     LRESET1
LCOMMERR DS    0H
         MVC   MSG5,LCMD#ERR           Msg: Conflicting commands   @rpk
LRESET1  DS    0H
*
*        RESET the pending line command with the following reasons:
*        1. Line command is complete, primary command made
*        2. Error in line command (mostly 'Conflicting')
*        3. Line command RES(ET) given.
*
         MVI   RESETFLG,X'FF'          Set resetfag
         XC    LFLAGS,LFLAGS           Reset the other linecmd flags
         XC    LLINES,LLINES           And reset the line numbers
LCMDEND  DS    0H
         CLI   LCFLAG,X'00'            Commands pending?
         BE    LCMDEN99                No: branch
         TRT   BUFFER,TRTNUM           Only numerics entered?
         BZ    LCMDEN01                No: end routine
         MVI   LCMDBUF,C' '            Blank
         MVC   LCMDBUF+1(L'LCMDBUF-1),LCMDBUF  copy of buffer
         MVC   LCMDBUF(L'BUFFER),BUFFER Copy command buffer
         TRT   LCMDBUF,COMSKPSP        Search for first non-blank
         BZ    LCMDEN01                All spaces, nothing to test
         OC    0(8,R1),=CL8' '         Xlate to upper (TRT sets R1)
*---------------------------------------------------------------------*
*                                                                     *
*        Some primary commands are allowed along with line commands   *
*        and some commands not: This will be tested in the section    *
*        below:                                                       *
*                                                                     *
*------------------------------------------ (C)-2025 Skybird Systems -*
         CLI   0(R1),C'M'              'M' (scroll max)?
         BE    LCMDEN01                Yes: allowed
         CLI   0(R1),C'L'              'L' (Line)
         BE    LCMDEN01                Yes: allowed
         CLI   0(R1),C'T'              'T' (Top)?
         BE    LCMDEN01                Yes: allowed
         CLI   0(R1),C'B'              'B' (Bottom)?
         BE    LCMDEN01                Yes: allowed
         CLC   =C'F ',0(R1)            'F' command?
         BE    LCMDEN01                Yes: allowed
         CLC   =C'FIND',0(R1)          'FIND' command?
         BE    LCMDEN01                Yes: allowed
         CLC   =C'RES',0(R1)           RES(ET) entered?
         BE    LCMDEN01                Yes: good
         CLC   =C'UP',0(R1)            UP entered?
         BE    LCMDEN01                Yes: good
         CLC   =C'DOWN',0(R1)          DOWN entered?
         BE    LCMDEN01                Yes: good
         CLC   =C'COPY',0(R1)          'COPY' entered?
         BE    LCMDEN01                Yes: good
         CLC   =C'CUT',0(R1)           'CUT' entered ?
         BE    LCMDEN01                Yes: good
         CLC   =C'PASTE',0(R1)         'PASTE' entered?
         BE    LCMDEN01                Ok
         CLC   =C'CRE',0(R1)           'CREATE' entered?
         BE    LCMDEN01                Ok
         CLC   =C'REP',0(R1)           'REPLACE' entered?
         BE    LCMDEN01                Ok
         MVI   BUFFER,C' '             Blank
         MVC   BUFFER+1(L'BUFFER-1),BUFFER   buffer
         MVC   MSG5,LCMD#ERR           Conflicting commands
         B     LRESET1
LCMDEN01 DS    0H
         MVI   PENDMSG,C' '            Blank
         MVC   PENDMSG+1(L'PENDMSG-1),PENDMSG  the pending message
         LA    R2,PENDMSG              Pointer in message
         CLI   DESTFLAG,X'FF'          Destination (A) present?
         BNE   LCMDEN03                No: branch
         MVC   0(6,R2),LCDEST          Command itself
         LA    R2,7(,R2)               Increase pointer
LCMDEN03 DS    0H
         CLI   OVLFLAG,X'00'           Overlay (OO) present
         BE    LCMDEN07                No: branch
         TM    OVLFLAG,X'F0'           First part present?
         BNO   LCMDEN05                No: carry
         CLI   CMNDOVL1,0              Is there a line number?
         BE    LCMDEN05                No: do not display
         MVC   0(6,R2),LCOVL1          Command itself
         LA    R2,7(,R2)               Increase pointer
LCMDEN05 DS    0H
         TM    OVLFLAG,X'0F'           Second part present?
         BNO   LCMDEN07                No: carry
         CLI   CMNDOVL2,0              Is there a line number?
         BE    LCMDEN07                No: do not display
         MVC   0(6,R2),LCOVL2          Command itself
         LA    R2,7(,R2)               Increase pointer
LCMDEN07 DS    0H
         CLI   LCCOM1,0                Command 1 present?
         BE    LCMDEN15                No: branch
         MVC   0(6,R2),LCCOM1          Command itself
         LA    R2,7(,R2)               Increase pointer
         CLI   LCCOM2,0                Command 2 present?
         BE    LCMDEN15                No
         MVC   0(6,R2),LCCOM2          Command itself
         LA    R2,7(,R2)               Increase pointer
LCMDEN15 DS    0H
         CLI   CUTFLAG,X'FF'           CUT command pending?
         BNE   LCMDEN17                No
         MVC   0(3,R2),=C'CUT'         Command itself
         LA    R2,4(,R2)               Increase pointer
         B     LCMDEN97                Branch
LCMDEN17 DS    0H
         CLI   CREFLAG,X'00'           CREATE/REPLACE command pending?
         BE    LCMDEN19                No
         MVC   0(7,R2),=C'CRE/REP'     Command itself
         LA    R2,8(,R2)               Increase pointer
         B     LCMDEN97                Branch
LCMDEN19 DS    0H
         CLI   APNDFLAG,X'FF'          APPEND/COPY pending?
         BNE   LCMDEN21                No: branch
         MVC   0(4,R2),=C'COPY'        Command itself
         LA    R2,5(,R2)               Increase pointer
         B     LCMDEN97                Branch
LCMDEN21 DS    0H                                                  @rpb
         CLI   PASTEFLG,X'FF'          PASTE command pending?      @rpb
         BNE   LCMDEN97                No                          @rpb
         MVC   0(5,R2),=C'PASTE'       Paste command itself        @rpb
         LA    R2,6(,R2)               Increase pointer            @rpb
LCMDEN97 DS    0H
         MVC   0(7,R2),=C'pending'     Text in message
LCMDEN99 DS    0H
         LM    R2,R14,SAVELCMD         Load callers registers
         BR    R14                     Return
         DROP  R4                      Kill addr. of workspace entry
LCMD#ERR DC    CL25'---- Conflicting commands'
*
TRTNUM   DC    256AL1(1)               Test on numerics or blanks
         ORG   TRTNUM+C' '
         DC    AL1(0)                  The blank
         ORG   TRTNUM+C'0'
         DC    10AL1(0)                0 -> 9
         ORG   ,
         LTORG ,                                                   @rpk
         DROP  ,
         TITLE 'SUBROUTINE OF ''SORT'' COMMAND'
*---------------------------------------------------------------------*
*                                                                     *
*        S O R T                       Sort fields are set with the   *
*                                      'BNDS' command                 *
* The bubble sort technique is used                                   *
*                                                                     *
* Register usage:   R2: Work register                                 *
*                   R3: Work register                                 *
*                   R4: Entry in the workspace starting with COMWSTRT *
*                   R5: = R4+length of entry (Length = WRKSPCLEN)     *
*                   R6: Length of sort field minus 1 (COMBNDSL-1)     *
*                   R7: Points to last swapped record                 *
*                   R8: Offset of Sort Field wihtin workspace entry   *
*                       (COMBNDS)                                     *
*                   R10: First record in workspace                    *
*                                                                     *
*------------------------------------------ (C)-2025 Skybird systems -*
SORT     CSECT                         Sort workspace
         USING COMMAREA,R11            Get addressability RPFCOMM
         USING WORKAREA,R13            Get addressability WORKAREA
         STM   R2,R14,SAVESORT         Save callers registers
         LR    R12,R15                 Setup base register
         USING SORT,R12
         L     R1,COMWRKEN             Pick workspace entry length
         L     R7,COMMLAST             Last read record in workspace
         L     R6,COMBNDSL             Length of BNDS
         BCTR  R6,0                    Minus 1 for EX
         L     R8,COMBNDS              Load offset of sort field
         L     R10,COMWSTRT            First record in workspace
SORT01   DS    0H                      Start sprt
         ST    R7,SWAPLAST             Last record swapped
         LR    R4,R10                  1st record in workspace
         LR    R5,R4                   Second record
         LA    R5,0(R1,R5)                          of workspace
SORT03   DS    0H                      Yes: sort workspace
         CL    R4,SWAPLAST             COMMLASTreached?
         BNL   SORT07                  Yes: loop complete
         LA    R2,8(4,R8)              Add BNDS offset (Sort fields)
         LA    R3,8(5,R8)              Add BNDS offset
         EX    R6,SORTCLC1             Compare
         BNH   SORT05                  High: swap these records
         L     R2,COMMRECL             Length of record
         BCTR  R2,0                    Minus 1 for EX instruction
         EX    R2,SORTEX1              Swap
         MVC   RECORDF(8),0(R4)            the
         EX    R2,SORTEX2              Swap     records
         MVC   0(8,R4),0(R5)               the
         EX    R2,SORTEX3              Swap     records
         MVC   0(8,R5),RECORDF
         LR    R7,R4                   Last record swapped in R7
SORT05   DS    0H                      Load next entry
         LA    R4,0(R1,R4)             Next record
         LA    R5,0(R1,R5)             Next record
         B     SORT03                  Compare next record
SORTEX1  MVC   RECORDF+8(0),8(R4)      << executed >>
SORTEX2  MVC   8(0,R4),8(R5)           << executed >>
SORTEX3  MVC   8(0,R5),RECORDF+8       << executed >>
SORT07   DS    0H                      All records done
         CL    R7,SWAPLAST             Are these swaps executed?
         BL    SORT01                  If yes, them sort again
*                                      Else end of sort
SORT99   LM    R2,R14,SAVESORT         Restore callers registers
         XR    R15,R15                 Return code always 0
         BR    R14                     Return to caller
SORTCLC1 CLC   0(0,R2),0(R3)           << executed >>
         LTORG ,
         DROP
*---------------------------------------------------------------------*
*                                                                     *
*        S H I F T - Subroutine, chop off trailing spaces and replace *
*                    them with leading characters from FILLCHAR.      *
*                                                                     *
*                    INPUT:  NUMFLD, field to be shifted, max 8 char, *
*                            Reg 1,  Address of the fill character    *
*                    OUTPUT: NUMFLD, Trailing spaces replaced with    *
*                                    Leading FILLCHAR                 *
*                            Reg.15, Rc= 0000 - No errors             *
*                                    Rc= 0004 - All spaces            *
*                                                                     *
*------------------------------------------ (C)-2025 Skybird Systems -*
SHIFT    CSECT
         USING WORKAREA,R13            Address our workarea
         USING SHIFT,R15               Address SHIFT routine
         LA    R0,8                    Maximum 8 characters
SHIFT01  CLI   NUMFLD+7,X'40'          Last character is a space?
         BNE   SHIFT09                 No: exit
         MVC   SHFLD+1(7),NUMFLD       Move first 7 chars into SHFLD+1
         MVC   SHFLD(1),0(R1)          Insert leading FILLCHAR
         MVC   NUMFLD(L'SHFLD),SHFLD   Restore NUMFLD
         BCT   R0,SHIFT01              Shift max 8 times
         LA    R1,4                    Rc = 4 - all spaces
         B     SHIFT99                 Return
SHIFT09  XR    R1,R1                   RC= 0000
SHIFT99  LR    R15,R1                  Return code in register 15
         BR    R14                     Return
         LTORG ,
         DROP
         TITLE 'SCAN SUBROUTINE'
*---------------------------------------------------------------------*
*                                                                     *
*        S C A N - Subroutine, scans area for ' ' or ',' and places   *
*                              preceding characters into NUMFLD.      *
*                                                                     *
*                  INPUT:  Reg.1,  points to first character to scan  *
*                  OUTPUT: NUMFLD, characters preceding ' ' or ','    *
*                          Reg.1,  points to last character scanned   *
*                          Reg.15, return code 0 - characters found   *
*                                              8 - no characters found*
*                                                                     *
*------------------------------------------ (C)-2025 Skybird systems -*
SCAN     CSECT
         USING SCAN,R15                Make this routine addressable
         USING WORKAREA,R13            Address our workarea
         STM   R5,R6,SCANSAVE          Save work registers
         LR    R5,R1                   Pickup parameter (1st char)
         LA    R6,8                    Rc = 8, initial: no chars found
         LA    R0,9                    Max 9 characters
         LA    R1,NUMFLD               Point to NUMFLD
         MVI   0(R1),C' '              Clear NUMFLD
         MVC   1(7,R1),0(R1)           Clear NUMFLD
SCAN01   CLI   0(R5),X'40'             Space?
         BE    SCAN03                  Yes: end of scan
         CLI   0(R5),X'6B'             Comma?
         BE    SCAN03                  Yes: end of scan
         CLI   0(R5),X'00'             NULL ?
         BE    SCAN03                  Yes: end of scan
         MVC   0(1,R1),0(R5)           Move 1 character into NUMFLD
         LA    R5,1(,R5)               Next character to scan
         LA    R1,1(,R1)               Next character in NUMFLD
         BCT   R0,SCAN01               Scan max 9 times
         B     SCAN99                  Exit: no characters found
SCAN03   LA    R6,0                    Rc = 0: scan successful
         LR    R1,R5                   Return address last character
*                                      scanned in register 1
SCAN99   LR    R15,R6                  Pickup callers save area
         LM    R5,R6,SCANSAVE          Restore workregisters
         BR    R14                     Return to caller
         LTORG ,
         DROP
         TITLE 'NUMTST ROUTINE'
*---------------------------------------------------------------------*
*                                                                     *
*        N U M T S T - Subroutine, numeric test of a 8 char field.    *
*                                                                     *
*                    Input:  NUMFLD, field contains chars to test     *
*                    Output: NUMFLD, remains unchanged                *
*                            Reg.15, return code 0000 - numeric       *
*                                                0008 - not numeric   *
*                                                                     *
*------------------------------------------ (C)-2025 Skybird systems -*
NUMTST   CSECT
         USING NUMTST,R15
         USING WORKAREA,R13
         TRT   NUMFLD,NUMTSTTB         Numeric?
         BZ    NUMTST9                 Yes: return
         LA    R1,8                    Rc = 8 - not numeric
         B     NUMTST99                Return
NUMTST9  XR    R1,R1                   Rc = 0, Numeric
NUMTST99 LR    R15,R1                  Load return code
         BR    R14                     Return
NUMTSTTB DC     240X'FF',10X'00',6X'FF'
         LTORG ,
         DROP
         TITLE 'RENUMBER WORKSPACE ROUTINE'
*---------------------------------------------------------------------*
*                                                                     *
*        N U M B E R - Renumber workspace.                            *
*                                                                     *
*                      Input:  workspace.                             *
*                      Output: renumbered workspace.                  *
*                                                                     *
*        Note:  If std-numbered or COBOL-numbered, the screen numbers *
*               in columns 1-6 will always start with 1 and an        *
*               increment of 1.                                       *
*                                                                     *
*               If std-numbered, data will be numbered starting       *
*               with 100 and an increment of 100. The last 2 positions*
*               contains the ISPF modication number (MM).             *
*                                                                     *
*               If COBOL-numbered, data numbers will start            *
*               with 1 and a increment of 1.                          *
*                                                                     *
*               If NONUM data, the screen numbers start with 1 and    *
*               the increment is 1 too and the data will not be       *
*               numbered.                                             *
*                                                                     *
*------------------------------------------ (C)-2025 Skybird systems -*
NUMBER   CSECT
         USING WORKAREA,R13            Addressability of SCREEN
         STM   R2,R14,SAVENUM          Save registers
         LR    R12,R15                 Setup base
         USING NUMBER,R12              Make NUMBER addressable
         USING COMMAREA,R11            Adressability RPFCOMM
         USING WORKSPCE,R3             Address workspc entry in RPFCOMM
         ZAP   LINECNT,=P'0'           Init counter for data
         L     R6,COMWRKEN             Length of workspace entry
         ZAP   INCR,=P'1'              Nonum: increment =1 and
         L     R3,COMWSTRT             Point to first rec. in wrkspc
NUMBER05 DS    0H
         AP    LINECNT,INCR            Increment line number in data
         UNPK  NUM1ST,LINECNT          Unpack linenumber for data
         OI    NUM1ST+5,X'F0'          And clear sign
         MVC   WORKSLIN,NUM1ST         Line number on screen in workspc
         CLC   =CL3'ON',COMMNUM        Do we have line numbers?
         BNE   NUMBER11
         TM    COMMFLG4,$COMVB         Variable records?
         BNO   NUMBER06                No: test other formats
         MVC   8(6,R3),NUM1ST          Move line number in
         LA    R14,8(,R3)              Point to linenumber in col 1-8
         B     NUMBER08                and process next record in ws
NUMBER06 DS    0H                      Numbered > 100 lines
         TM    COMMFLG1,$COMCOB        Is it COBOL ?
         BNO   NUMBER07                No: move linennumers last 8 cols
         MVC   8(6,R3),NUM1ST          Move linenumbers in col 1-6
         B     NUMBER11                Yes: next line to renumber
NUMBER07 DS    0H                      Numbered > 100 lines
         L     R14,COMMRECL            LRECL of data set or member
         S     R14,=F'8'               Point to
         LA    R14,8(R3,R14)           last 8 positions in data portion
         MVC   0(6,R14),NUM1ST         Move line number in data
NUMBER08 CLI   6(R14),C'0'             Col 79 numeric?
         BL    NUMBER09                No: EBCDIC ISPF/RPF mm
         CLI   6(R14),C'9'             Col 79 numeric?
         BH    NUMBER09                No: EBCDIC ISPF/RPF mm
         CLI   7(R14),C'0'             Col 80 numeric?
         BL    NUMBER09                No: EBCDIC ISPF/RPF mm
         CLI   7(R14),C'9'             Col 80 numeric?
         BNH   NUMBER11                Yes: good
NUMBER09 DS    0H
         MVC   6(2,R14),COMMEMM        Move ISPF/RPF mm in last 2 pos.
NUMBER11 LA    R3,0(R3,R6)             Next entry in workspace
         CL    R3,COMMLAST
         BNH   NUMBER05
NUMBER99 DS    0H
         LM    R2,R14,SAVENUM          Load callers registers
         BR    R14                     Return
         LTORG ,
         DROP
         TITLE 'Scan the primary commands'
*---------------------------------------------------------------------*
*                                                                     *
*        This routine will investigate the entered primary command.   *
*                                                                     *
*        Before scanning the command table, the primary command       *
*        will be parsed. All the blanks before the command verb will  *
*        be removed and the blanks between the verb and the operands  *
*        will be reduced to 1. After parsing only the command verb    *
*        will be translated to upper case.                            *
*                                                                     *
*        If the command is found, reg 1 will be set to an address     *
*        of the routine, which will execute the found primary command.*
*        If the command is not found, reg 15 will be set to 4.        *
*                                                                     *
*        The command will be set in a retrieve table. The last        *
*        given command will be the first entry. No duplicates will    *
*        be stored in this table.                                     *
*        The RETRIEVE table is a 4804 bytes table. The first word     *
*        contains the number of valid entries (max. 100), followed    *
*        with max. 100 primary commands with a length of 48 each.     *
*                                                                     *
*        If the command RETRIEVE is given, the first command will be  *
*        returned. Any subsequent RETRIEVE's will return the next     *
*        command. If a command is retrieved the address will be       *
*        returned in register 1.                                      *
*                                                                     *
*        Input:  Register 1 with an adress of 2 fullwords.            *
*                Fullword 1 contains the address of BUFFER.           *
*                Fullword 2 contains the address of RPFCOMM.          *
*                                                                     *
*        Output: BUFFER with the parsed primary command.              *
*                                                                     *
*                If the primary command is RETRIEVE, the answer in    *
*                register 1 is the address of the retrieved command.  *
*                                                                     *
*                In the other cases, register 1 will be loaded with   *
*                the adress of the routine, that will execute the     *
*                primary command.                                     *
*                                                                     *
*        Return codes:                                                *
*        0000 - Command found, register 1 contains the routine addr.  *
*        0004 - Command not found                                     *
*        0008 - Command successfully retrieved, address in register 1 *
*        0012 - Nothing to RETRIEVE                                   *
*                                                                     *
*------------------------------------------ (C)-2025 Skybird systems -*
CMDSCAN  CSECT
         USING COMMAREA,R11            Addressability of RPFCOMM
         USING WORKAREA,R13            Addressability of SCREEN area
         STM   R2,R14,SAVECMDS         Save callers registers
         LR    R12,R15                 Base register
         USING CMDSCAN,R12
         L     R11,0(,R1)              RPFCOMM and
         L     R10,4(,R1)              BUFFER
*
*        Parse the primary command from here to label ENDSCAN
*
         MVI   SC@BUFF,C' '            Blank the translate ...
         MVC   SC@BUFF+1(95),SC@BUFF             buffer
         MVC   SC@BUFF,0(R10)          Copy command buffer
         TRT   SC@BUFF,COMSKPSP        Search for first non-blank
         BZ    ENDSCAN                 All spaces, nothing to parse
         MVC   0(L'BUFFER,R10),0(R1)   Shift command to start of BUFFER
*                                      preceding spaces are gone now
         MVC   SC@BUFF,0(R10)          Copy command buffer again
         TRT   SC@BUFF,COMSKPNS        Find first space after verb
         LA    R2,SC@BUFF              Start address copy buffer
         SLR   R1,R2                   Length of verb
         C     R1,=F'8'                Length > 8?
         BH    ENDSCAN                 Invalid VERB
         BCTR  R1,0                    For execute
         LR    R3,R1                   Save register 1
         MVI   VERB,C' '               Blank
         MVC   VERB+1(7),VERB               VERB first
         EX    R3,MVEVERB              Save command verb
         EX    R3,TRVERBU              And translate to upper case
         EX    R3,BLKVERB              Blank command verb in SC@BUFF
         EX    R3,MVEBFRV              Move verb into command buffer
         TRT   SC@BUFF,COMSKPSP        Search for operand
         BZ    ENDSCAN                 All spaces
         LR    R4,R10                  A(BUFFER) into Register 4
         LA    R4,1(R3,R4)             Add length of command verb
         MVI   0(R4),C' '              One blank after the VERB
         LA    R4,1(,R4)               Point after VERB
         LA    R5,L'BUFFER             Length of buffer
         LA    R3,2(,R3)               Restore length verb and add 1
*                                      for a blank after the verb
         SLR   R5,R3                   Minus length verb + 1 space
         BCTR  R5,0                    Minus 1 for execute
         EX    R5,MVEBFRO              Move operands in BUFFER
ENDSCAN  DS    0H
         CLI   0(R10),X'FF'            Generated command from LCOMMAND?
         BE    CMDSC48                 Yes: do not examine retrieve tbl
         L     R4,CRETRIEV
         ICM   R5,15,8(R4)             Number of entries on offset 8
*
*        The retrieve table consist of :
*        Bytes 0-7:  Acronym @PROFRTRV
*        Bytes 8-11: Number commands stored
*        Bytes 12-4811: Max 100 commands.
*
         CL    R5,=F'101'              Max. 100 entries?
         BL    *+10                    Yes: OK, carry
         XC    8(4,R4),0(R4)           Invalidate complete table
*+10
         CLC   =C'RETRIEVE',0(R10)     Retrieve command given
         BNE   CMDSC10
CMDSC02  DS    0H
         L     R4,CRETRIEV             Pickup retrieve table
         L     R5,8(,R4)               Number of commands stored
         LA    R4,12(,R4)              Point to first entry
         CLC   LASTRTRV,=F'0'          No last command retrieved?
         BE    CMDSC03                 Yes: start from beginning
         L     R4,LASTRTRV             Point to last retrieved cmd
         ICM   R5,B'1111',LASTRT#      Remaining number of cmds to scan
         BNZ   CMDSC04                 No: pickup
         XC    LASTRTRV(8),LASTRTRV    Wrap around in retrieve table
         B     CMDSC02                 Look from beginning
CMDSC03  DS    0H
         LTR   R5,R5                   No commands in table?
         BNZ   CMDSC04                 No: continue
         LA    R15,12                  Yes: nothing to retrieve
         B     CMDSC99                 Return
CMDSC04  DS    0H
         LR    R1,R4                   Load answer in register 1
         LA    R4,48(,R4)              Next entry in buffer
         BCTR  R5,0                    Decrease # remaining entries
         STM   R4,R5,LASTRTRV          Save the pointer + counter
         LA    R15,8                   Rc = 8, command retrieved
         B     CMDSC99                 Return.
CMDSC10  DS    0H
         XC    LASTRTRV(8),LASTRTRV    Reset offset last retrieved cmd
         L     R4,CRETRIEV             Point to retrieve table
         ICM   R5,B'1111',8(R4)        First word: # stored commands
         BNZ   CMDSC12                 No: look if cmd in table
         LA    R5,1                    This is first cmd
         ST    R5,8(,R4)               Set counter in table
         MVC   12(48,R4),0(R10)        and move this cmd
         B     CMDSC48                 Investigate command
*
*        Look if primary command is in the RETRIEVE table.
*        Register 10 points to the primary command.
*
CMDSC12  DS    0H
         LA    R4,12(,R4)              Point to 1st command in table
         LR    R6,R4                   Copy into Reg.6
CMDSC14  DS    0H
         CLC   0(48,R6),0(R10)         Command found in table ?
         BE    CMDSC20                 Yes: command will be 1st entry
         LA    R6,48(,R6)              Point to next entry in table
         BCT   R5,CMDSC14              Loop
*---------------------------------------------------------------------*
*        Command not found in the RETRIEVE tabe. So, add this command
*        in the table if number of commands in the RETRIEVE table
*        is less than 100.
*        The last entered command will be the first entry.
*---------------------------------------------------------------------*
         L     R5,=A(4704)             Length of table - 2 entries
         LA    R4,0(R5,R4)             Point to 2nd last entry
         LA    R6,48(,R4)              Point to last entry
         LA    R7,48                   Length of entry
         LA    R5,99                   Max number cmds - 1
CMDSC16  DS    0H
         MVC   0(48,R6),0(R4)          Shift command
         SLR   R6,R7                   To previous entry
         SLR   R4,R7                   To previous entry
         BCT   R5,CMDSC16              Loop until all commands shifted
         L     R4,CRETRIEV             Point back to table
         MVC   12(48,R4),0(R10)        This cmd is now first entry
         L     R5,8(,R4)               # commands in table
         C     R5,=F'100'              Already 100 commands ?
         BNL   CMDSC48                 Yes: do not increase
         LA    R5,1(,R5)               Increase # commands
         ST    R5,8(,R4)               and save
         B     CMDSC48                 Examine command
CMDSC20  DS    0H
*---------------------------------------------------------------------*
*
*        Command found in retrieve table, make this found command
*        the first entry in the table.
*        and shift the rest of the commands to the found entry.
*        At this place R6 points to the found command and R4
*        points to the first entry in the retrieve table
*
*------------------------------------------ (C)-2025 Skybird Systems -*
         CR    R4,R6                   Already the first command ?
         BE    CMDSC48                 Yes: do nothing go investigate
         LA    R7,48                   Entry length
         LR    R5,R6                   Duplicate R6
         SLR   R5,R7                   Point to command before fnd cmd
CMDSC22  DS    0H
         CR    R5,R4                   Beginning of table reached
         BL    CMDSC24                 Yes: all commands shifted
         MVC   0(48,R6),0(R5)          Shift commands 1 entry down
         SLR   R5,R7                   until all commands from
         SLR   R6,R7                   found command until top
         B     CMDSC22                 are done.
CMDSC24  DS    0H
         MVC   0(48,R4),0(R10)         Found command is 1st entry now
*---------------------------------------------------------------------*
*        Examine and process command
*---------------------------------------------------------------------*
CMDSC48  DS    0H
         LA    R3,CMDTBLE              Load the primary command table
         LA    R4,CMDS#                Number of commands in table
CMDSC50  L     R5,0(,R3)               Actual Length of the command
         BCTR  R5,0                    Minus 1 for EX
         EX    R5,CMDCOMP              Compare command in BUFFER
*                                      against the entry in CMDTBLE
         BNE   CMDSC52                 No: Next entry in table
         L     R1,12(,R3)              Routine address command in R1
         XR    R15,R15                 Rc = 0 - command found
         B     CMDSC99                 Return
CMDSC52  LA    R3,16(,R3)              Next entry in command table
         BCT   R4,CMDSC50              Loop until all done or cmd found
         LA    R15,4                   Nothing found: Invalid command
CMDSC99  CLC   =C'F   ',0(R10)         Is this a repeat F command?
         BE    CMDSC99A                Yes: leave flag untouched
         CLC   =C'FIND   ',0(R10)      Is this a repeat FIND command?
         BE    CMDSC99A                Yes: leave flag untouched
         NI    SW,255-$BOTDATA         Reset Bottom of data flag, if
*                                      other command given than F(IND)
CMDSC99A LM    R2,R14,SAVECMDS         Reload callers registers
         BR    R14                     Return
CMDCOMP  CLC   4(0,R3),0(R10)          << executed >>
MVEVERB  MVC   VERB(0),SC@BUFF         << executed >>
TRVERBU  TR    VERB(0),COMTCAPS        << executed >>
BLKVERB  MVC   SC@BUFF(0),=C'        ' << executed >>
MVEBFRV  MVC   0(0,R10),VERB           << executed >>
MVEBFRO  MVC   0(0,R4),0(R1)           << executed >>
*
*---------------------------------------------------------------------*
*                                                                     *
*        This table is built as follows:                              *
*        Each entry contains:                                         *
*        1.    The actual length of the command                       *
*        2.    The command (8 bytes with trailing blanks)             *
*        3.    The address of the routine, that executes the command  *
*                                                                     *
*------------------------------------------ (C)-2025 Skybird systems -*
CMDTBLE  DS    0F
         DC    A(4),CL8'$DOC',A(VIEWDOC)
         DC    A(6),CL8'APPEND',A(VIEWAPND)
         DC    A(8),CL8'AUTOSAVE',A(VIEWAUTO)
         DC    A(2),CL8'B',A(VIEWBOT)
         DC    A(4),CL8'BNDS',A(VIEWBNDS)
         DC    A(6),CL8'BOTTOM',A(VIEWBOT)
         DC    A(2),CL8'C',A(VIEWCHNG)
         DC    A(3),CL8'CAN',A(VIEWCAN)
         DC    A(6),CL8'CANCEL',A(VIEWCAN)
         DC    A(4),CL8'CAPS',A(VIEWCAPS)
         DC    A(4),CL8'COLS',A(VIEWCOLS)
         DC    A(3),CL8'CO',A(VIEWCO)
         DC    A(5),CL8'COBOL',A(VIEWCOB)
         DC    A(4),CL8'COPY',A(VIEWAPND)
         DC    A(3),CL8'CREATE',A(VIEWCRE)
         DC    A(3),CL8'CUT',A(VIEWCUT)                            @rpb
         DC    A(3),CL8'DEL',A(VIEWDEL)
         DC    A(4),CL8'DOWN',A(VIEWFORW)
         DC    A(3),CL8'END',A(VIEWEND)
         DC    A(2),CL8'F',A(VIEWFIN2)                             @rpd
         DC    A(4),CL8'FILL',A(VIEWFILL)
         DC    A(4),CL8'FIND',A(VIEWFIND)                          @rpd
         DC    A(3),CL8'HAR',A(VIEWHAR)
         DC    A(4),CL8'HELP',A(VIEWHELP)
         DC    A(2),CL8'I',A(VIEWINP)
         DC    A(3),CL8'JCL',A(VIEWJCL)
         DC    A(2),CL8'L',A(VIEWLINE)
         DC    A(2),CL8'LC',A(VIEWLC)
         DC    A(4),CL8'LEFT',A(VIEWLEFT)
         DC    A(3),CL8'MO',A(VIEWMO)
         DC    A(3),CL8'NUM',A(VIEWNUM)
         DC    A(3),CL8'NUMBER',A(VIEWNUM)
         DC    A(5),CL8'NULLS',A(VIEWNULL)
         DC    A(3),CL8'OUT',A(VIEWOUT)
         DC    A(4),CL8'OVLY',A(VIEWOVL)
         DC    A(5),CL8'PASTE',A(VIEWPST)                          @rpb
         DC    A(3),CL8'PFK',A(VIEWPFK)
         DC    A(5),CL8'PRINT',A(VIEWHAR)
         DC    A(4),CL8'PROF',A(VIEWPROF)
         DC    A(2),CL8'R',A(VIEWINP)
         DC    A(4),CL8'REN',A(VIEWREN)
         DC    A(5),CL8'RENUM',A(VIEWREN)
         DC    A(8),CL8'RENUMBER',A(VIEWREN)
         DC    A(3),CL8'REPLACE',A(VIEWCRE)
         DC    A(3),CL8'RES',A(VIEWRES)
         DC    A(5),CL8'RESET',A(VIEWRES)
         DC    A(6),CL8'RETURN',A(VIEWRETU)
         DC    A(5),CL8'RIGHT',A(VIEWRIGH)
         DC    A(4),CL8'SAVE',A(VIEWSAVE)
         DC    A(4),CL8'SORT',A(VIEWSRT)
         DC    A(3),CL8'SUB',A(VIEWSUB)
         DC    A(2),CL8'T',A(VIEWTOP)
         DC    A(3),CL8'TOP',A(VIEWTOP)
         DC    A(3),CL8'TSO',A(VIEWTSO)
         DC    A(2),CL8'UC',A(VIEWUC)
         DC    A(4),CL8'UNN',A(VIEWUNN)
         DC    A(5),CL8'UNNUM',A(VIEWUNN)
         DC    A(3),CL8'UP',A(VIEWBACK)
         DC    A(1),CL8'=',A(VIEW#)                                @RP1
         DC    A(1),CL8' ',A(VIEW)
         DC    A(2),X'FFE4',CL6' ',A(VIEWCUT4) Execute CUT command
         DC    A(2),X'FFC3',CL6' ',A(VIEWCRE9) Execute CREATE command
         DC    A(2),X'FFD9',CL6' ',A(VIEWCRE9) Execute REPLACE command
         DC    A(1),X'0040404040404040',A(VIEW)
         DC    A(1),CL8'?',A(VIEW)
CMDS#    EQU   (*-CMDTBLE)/16
*
         LTORG ,
         TITLE 'SEARCH ROUTINE TO FIND LINENUMBERS'
*---------------------------------------------------------------------*
*                                                                     *
*        Routine:      SRCHLINE.                                      *
*        Function:     Search a linenumber in the workspace.          *
*                      The line numbers are usual the operands in     *
*                      the primary commands.                          *
*        Input:        Register 1: contains the address of a 6 byte   *
*                      EBCDIC line number                             *
*        Output:       Register 1: address of the found line in the   *
*                                  workspace                          *
*        Note:         Do not use WORKAREA and an own save area is    *
*                      created, because SRCHLINE is called from       *
*                      RPFCHNG, RPFFIND and RPFFILL                   *
*        Return codes:                                                *
*                      00 Successful, answer in register 1            *
*                      04 Line number not found                       *
*                                                                     *
*------------------------------------------ (C)-2025 Skybird systems -*
         DROP
SRCHLINE CSECT                         Search for line numbers
         SAVE  (14,12)                 Save callers registers
         LR    R12,R15                 Setup base register
         USING SRCHLINE,R12
         LR    R8,R1                   Save A(line number)
         GETMAIN R,LV=72               Obtain savearea
         ST    R1,8(,R13)              Forward pointer
         ST    R13,4(,R1)              Backward pointer
         LR    R13,R1                  Use this save area
         USING COMMAREA,R11            Addressability RPFCOMM
         L     R4,COMWSTRT             First record in workspace
         L     R6,COMWRKEN             Length of workspace entry
         L     R7,COMMLAST             Last record in workspace
         LA    R7,1(,R7)               Point to last byte
SRCH02   DS    0H
         CLC   0(6,R8),WORKSLIN-WORKSPCE(R4) Compare line numbers
         BE    SRCH96                  Equal: line found
         BXLE  R4,R6,SRCH02            Loop until line fnd or all done
         LA    R15,4                   Rc= 4, line not found
         B     SRCH99                  Return
SRCH96   DS    0H
         XR    R15,R15                 Rc= 0, line found
SRCH99   DS    0H
         LR    R3,R13
         LR    R2,R15                  Save return code
         L     R13,4(,R13)             Load callers save area
         FREEMAIN R,LV=72,A=(3)        Free save area
         LR    R1,R4                   A(found line)
         LR    R15,R2                  Return code
         L     R14,12(,R13)            Restore register 14
         LM    R2,R12,28(R13)          Restore r2-12
*                                      ** Do not restore register 1 **
         BR    R14                     Return
*
         LTORG ,
         TITLE 'Process CUT and PASTE primary commands'
*---------------------------------------------------------------------*
*                                                                     *
*        ROUTINE:      RPFCTPST.                                      *
*        FUNCTION:     Process the CUT and PASTE commands             *
*                      If the CUT command is given, write the lines   *
*                      which numbers are in BUFFER to the CLIPBRD     *
*                      file                                           *
*                      The address of the BUFFER is in reg.1 in case  *
*                      of a CUT command. The BUFFER contains a CO  @rph
*                      cmd, otherwise Reg.1 contains an address of @rph
*                      a 6 byte EBCDIC line number.                @rph
*                      After successful CUT the number of records are *
*                      in reg.1 and in the first record on the        *
*                      clipboard file (RPFCTPST)                      *
*                                                                     *
*                      In case of the PASTE command the clipboard     *
*                      file will be read and the records will be      *
*                      inserted after the line number pointed to by   *
*                      reg.1.                                         *
*                      Register 10 contains the workspace entry length*
*                                                                     *
*        Returncodes   0000 -  Cut/Paste successful                   *
*                      0004 -  some error, error msg top right corner *
*                                                                     *
*------------------------------------------ (C)-2025 Skybird Systems -*
         DROP
RPFCTPST CSECT
         USING COMMAREA,R11            Addressability RPFCOMM
         USING WORKAREA,R13            Addressability Screen area
         STM   R2,R14,SAVECTPS         Save callers registers
         LR    R12,R15                 Setup base
         USING RPFCTPST,R12
         MVC   CLIPBRD(DCB1L),DCB1     Move DCB to dynamic area
         L     R10,COMWRKEN            Pickup length of workspce entry
         LR    R3,R1                   Save parameter
         CLC   0(2,R3),=X'FFE4'        'Cut' command ?
         BNE   CTPST900                NO: process PASTE cmd
         TM    COMMFLG1,$COMNTMP       RPFCTPST allocated?
         BO    CTPST994                No: error
         L     R4,COMWSTRT             Point to first record
         USING WORKSPCE,R4             Adress dsect
         XR    R5,R5                   Clear record counter
         XC    CLIPBRD+DCBMACR-IHADCB(2),CLIPBRD+DCBMACR-IHADCB
         OI    CLIPBRD+DCBMACR2-IHADCB,DCBMRPUT+DCBMRMVP Macrf=(PM)
         MVI   COMOPN,X'80'
         OPEN  (CLIPBRD,(OUTPUT)),MF=(E,COMOPN)
         STCM  R5,15,RECORDF           Save counter
         BAL   R2,PUTCLIP              Write the record
CTPST006 DS    0H
         CLC   3(6,R3),WORKSLIN        First line reached?
         BE    CTPST010                Yes: write lines on clipbrd
         LA    R4,0(R4,R10)            Point to next record
         B     CTPST006                Record should always be present
CTPST010 DS    0H
         CLC   10(6,R3),WORKSLIN       Line-2 reached ?
         BL    CTPST020                Yes: branch
         MVI   RECORDF+8,C' '          Blank
         MVC   RECORDF+9(254),RECORDF+8     record
         MVC   RECORDF(8),WORKSLIN     Move Line# + flags workspace ent
         L     R14,COMMRECL            Record length of data
         BCTR  R14,0                   Minus 1 for EX
         EX    R14,CTPSTEX1            Move data portion of workspace
         BAL   R2,PUTCLIP              Write the record
         B     CTPST014                Branch over EX instruction
CTPSTEX1 MVC   RECORDF+8(0),WORKDATA   << executed >>
CTPST014 DS    0H                      All records written
         LA    R4,0(R4,R10)            Point to next record
         LA    R5,1(,R5)               Count record
         CL    R4,COMMLAST             Past last record ?
         BH    CTPST020                Yes: all done
         B     CTPST010                And branch
CTPST020 DS    0H                      All records written
         MVI   COMCLS,X'80'
         CLOSE CLIPBRD,MF=(E,COMCLS)   Close clipboard file
         XC    CLIPBRD+DCBMACR-IHADCB(2),CLIPBRD+DCBMACR-IHADCB
         OI    CLIPBRD+DCBMACR1-IHADCB,DCBMRGET+DCBMRLCG Macrf=(GL, ..
         OI    CLIPBRD+DCBMACR2-IHADCB,DCBMRPUT+DCBMRLCP       (... PL)
         MVI   COMOPN,X'80'
         OPEN  (CLIPBRD,(UPDAT)),MF=(E,COMOPN)
         RPFSA24                       Goto amode 24             @rpa01
         GET   CLIPBRD                 Update first record with ...
         ST    R5,0(,R1)               Number of cut records
         PUTX  CLIPBRD                 And write back
         RPFSA31                       Restore addressing mode   @rpa01
CTPST024 DS    0H                      All records written
         MVI   COMCLS,X'80'
         CLOSE CLIPBRD,MF=(E,COMCLS)   Close clipboard file
         LA    R2,CLIPBRD              DCB address
         FREEPOOL (2)                  Get rid of the buffers
         XC    0(L'BUFFER,R3),0(R3)    Clear command buffer
         MVC   MSG5,MSG4TXT            Move message in screen
         MVC   MSG5+7(6),=X'602020202120' Pattern
         CVD   R5,DBW                  # records cut
         ED    MSG5+7(6),DBW+5         Edit result
         LR    R1,R5                   Number of records in reg.1
         XR    R15,R15                 RC = 0000
         OI    COMMFLG4,$COMCUT        CUT given, set flg in RPFCOMM
         B     CTPST999                Return
*---------------------------------------------------------------------*
*                                                                     *
*        P A S T E     COMMAND                                        *
*              Shift data first and add contents of clipboard file    *
*              after the line pointed to by reg.1 (copied in reg.3)   *
*        R10 contains the length of an EDIT workspace entry           *
*        R3  contains the address of the BUFFER (command buffer)      *
*        R8  contains the number of pasted bytes (R10 * number of     *
*            pasted records)                                          *
*                                                                     *
*------------------------------------------ (C)-2025 Skybird Systems -*
CTPST900 DS    0H                      PASTE command
         TM    COMMFLG4,$COMCUT        a CUT command before paste?
         BNO   CTPST990                No: error
         XC    CLIPBRD+DCBMACR-IHADCB(2),CLIPBRD+DCBMACR-IHADCB
         OI    CLIPBRD+DCBMACR1-IHADCB,DCBMRGET+DCBMRMVG Macrf=(GM)
         MVI   COMOPN,X'80'
         OPEN  CLIPBRD,MF=(E,COMOPN)
         BAL   R2,GETCLIP              Read a record
         ICM   R1,15,RECORDF           Pickup # records in 1st rec
         ST    R1,#RECS                Save number of records
         M     R0,COMWRKEN             * length workspace entry
         LR    R8,R1                   Copy in register 8
         L     R4,COMMLAST             point to last record
         LA    R4,0(R4,R8)             Add number of bytes inserted
         CL    R4,COMWRKND             Larger than workspace?
         BH    CTPST992                Yes: error
         L     R4,COMWSTRT             Point to first record
         CLC   0(6,R3),=C'000000'      Paste before first line?
         BE    CTPST920                Yes: branch
         L     R4,COMMLAST             Point to last record
         CLC   WORKSLIN,0(R3)          Pasted after last record?
         BE    CTPST940                Yes: data need not to be shifted
         L     R4,COMWSTRT             First record in workspace
CTPST904 DS    0H
         CLC   WORKSLIN,0(R3)          Does linenumbers match?
         BE    CTPST918                Yes: Branch
         LA    R4,0(R4,R10)            Next line in workspace
         B     CTPST904                Loop until found
CTPST918 DS    0H
         LA    R4,0(R4,R10)            Next line in workspace
CTPST920 DS    0H
         L     R6,COMMLAST             Last record pointer
         LA    R7,0(R6,R8)             Add lines to paste
CTPST922 DS    0H
         CR    R6,R4                   Beyond rec. to be pasted after?
         BL    CTPST942                Branch
         MVC   0(8,R7),0(R6)           Shift records
         L     R14,COMMRECL            LRECL input/WORKDATA
         BCTR  R14,0                   Minus 1 for EX
         EX    R14,CTPSTEX2            Shift data portion
         SL    R7,COMWRKEN
         SL    R6,COMWRKEN
         B     CTPST922                Branch
CTPSTEX2 MVC   8(0,R7),8(R6)           << executed >>
CTPST940 DS    0H
         LA    R4,0(R4,R10)            Next line in workspace
CTPST942 DS    0H
         L     R6,COMMLAST             Last record pointer
         LA    R6,0(R6,R8)             Add # bytes to insert (#records)
         ST    R6,COMMLAST             And save in new last record
CTPST944 DS    0H
         BAL   R2,GETCLIP              Read a record
         MVC   WORKSLIN(8),RECORDF     Move to workspace LINE# + flags
         L     R14,COMMRECL            LRECL input/WORKDATA
         BCTR  R14,0                   Minus 1 for EX
         EX    R14,CTPSTEX3            Move data portion in workspace
         CLC   =CL3'ON',COMMNUM        Line numbers?
         BNE   CTPST946                No: skip
         TM    COMMFLG4,$COMVB         Variable numbered records?
         BNO   CTPST945                No: test others
         MVC   WORKDATA+6(2),COMMEMM   ISPF mm stats in col 7-8
         B     CTPST946                Next record
CTPST945 DS    0H
         TM    COMMFLG1,$COMCOB        Cobol aligned (nbrs in col 1-6)
         BO    CTPST946                Yes: do not change col 79-80
         BCTR  R14,0                   Point to LRECL-2
         LA    R14,0(R4,R14)           Point to last 2 bytes record
         MVC   8(2,R14),COMMEMM        Move ISPF/RPF mm to last 2 cols
CTPST946 DS    0H
         LA    R4,0(R4,R10)            Next line in workspace
         B     CTPST944                Read next record
CTPSTEX3 MVC   WORKDATA(0),RECORDF+8   << executed >>
CTPST950 DS    0H                      Eodad CLIPBRD
         MVI   COMCLS,X'80'
         CLOSE CLIPBRD,MF=(E,COMCLS)   Close clipboard file
         LA    R2,CLIPBRD              DCB address
         FREEPOOL (2)                  Get rid of the buffers
         L     R15,=V(NUMBER)          Renumber workspace
         CALL  (15)                    Execute this routine
         L     R15,=V(SETCHNG)         Mark data changed in workspace
         CALL  (15)
         L     R5,#RECS                Number of pasted records
         MVC   MSG5,MSG5TXT            Move message
         MVC   MSG5+4(6),=X'602020202120' Pattern
         CVD   R5,DBW                  # records cut
         ED    MSG5+4(6),DBW+5         Edit result
         XR    R15,R15                 RC = 0000
         B     CTPST999                Return
CTPST990 DS    0H
         MVC   MSG5,ERAATXT            Msg: Use CUT before PASTE
         LA    R15,4                   Return code
         B     CTPST999                Return
CTPST992 DS    0H
         MVC   MSG5,ERABTXT            Msg: PASTE buffer too large
         MVI   COMCLS,X'80'
         CLOSE CLIPBRD,MF=(E,COMCLS)   Close clipboard file
         LA    R2,CLIPBRD              DCB address
         FREEPOOL (2)                  Get rid of the buffers
         LA    R15,4                   Return code
         B     CTPST999                Return
CTPST994 DS    0H
         MVC   MSG5,ERACTXT            Msg: No clipboard file
         LA    R15,4                   Return code
CTPST999 DS    0H
         LM    R2,R14,SAVECTPS         Load callers registers
         BR    R14                     Return
GETCLIP  DS    0H                      -- BAL R2,GETCLIP --
         RPFSA24                       Switch to amode 24
         GET   CLIPBRD,RECORDF         Read first record
         B     GETCLIP9
GETCLIP3 DS    0H                      End of file CLIPBRD-
         LA    R2,CTPST950             Branch address if EOF
GETCLIP9 RPFSA31                       Restore addressing mode
         BR    R2
PUTCLIP  DS    0H                      BAL R2,PUTCLIP
         RPFSA24                       Switch to amode 24
         PUT   CLIPBRD,RECORDF         And write
         RPFSA31                       Restore addressing mode
         BR    R2                      Return
DCB1     DCB   DDNAME=RPFCTPST,MACRF=(GM,PM),LRECL=263,RECFM=FB,       X
               BLKSIZE=5260,EODAD=GETCLIP3,DSORG=PS
DCB1L    EQU   *-DCB1
ERAATXT  DC    CL25'---- Use CUT before PASTE'
ERABTXT  DC    CL25'-- PASTE buffer too large'
ERACTXT  DC    CL25'------- No clipboard file'
MSG4TXT  DC    CL25'-------xxxxxx records cut'  +7
MSG5TXT  DC    CL25'----xxxxxx records pasted'  +4
         LTORG ,
SETCHNG  CSECT
*---------------------------------------------------------------------*
*                                                                     *
*        Set the $COMCHGD flag in COMMFLG4 flag of RPFCOMM            *
*        if not already set.                                          *
*        If the flag is set initially, increase the ISPF stats        *
*        vv.mm in RPFCOMM (COMMVM field) and set the modified         *
*        vv.mm in the header of the EDIT screen.                      *
*                                                                     *
*------------------------------------------ (C)-2025 Skybird Systems -*
         DROP
         USING COMMAREA,R11            Address RPFCOMM Dsect
         USING WORKAREA,R13            Address Dynamic workarea
         STM   R1,R14,SAVESETC         Save registers
         LR    R12,R15                 Setup base
         USING SETCHNG,R12
         ICM   R2,15,CHGCTR            Change counter
         BNZ   SETC001                 >0: skip NUMBER
         L     R15,=V(NUMBER)          (Re)number routine
         CALL  (15)                    Execute
SETC001  DS    0H
         CLC   =C'DEL',BUFFER          Primary command DEL?
         BE    SETC002                 Yes: do not increase counter
         LA    R2,1(,R2)               Increase
         ST    R2,CHGCTR               And set
SETC002  DS    0H
         TM    COMMFLG4,$COMCHGD       Flag already set?
         BNZ   SETC009                 Yes: do nothing
         OI    COMMFLG4,$COMCHGD       Set flag
         TM    SW,$NOUPDVM             ISPF vvmm already increased?
         BNZ   SETC009                 Yes: don't do this again
         CLI   COMMBR,C' '             No member supplied?
         BE    SETC009                 Yes: exit
         XR    R3,R3                   Clear
         XR    R4,R4                        registers
         ICM   R2,15,ADDRVM            Address vv.mm in header
         BZ    SETC009
         IC    R3,COMMVM               ISPF vv
         IC    R4,COMMVM+1             ISPF mm
         LTR   R3,R3                   Present?
         BNZ   SETC003                 Yes: carry
         LA    R3,1                    Set vv initially to 01
         B     SETC005                 And do not increase mm
SETC003  DS    0H
         LA    R4,1(,R4)               Increase mm with 1
         CLM   R4,1,=X'64'             > 99?
         BL    SETC005                 No: carry
         LA    R3,1(,R3)               Increase ISPF/RPF vv
         XR    R4,R4                   And set ISPF/RPF mm to 0
SETC005  DS    0H
         CVD   R3,DBW                  Make Packed decimal
         OI    DBW+7,X'0F'             Clear sign
         UNPK  0(2,R2),DBW             Unpack ISPF vv
         CVD   R4,DBW                  Make Packed decimal
         OI    DBW+7,X'0F'             Clear sign
         UNPK  3(2,R2),DBW             Unpack the result
         MVI   2(R2),C'.'              Period between vv and mm
         BCTR  R2,0                    Point 1 byte before 'vv.mm'
         MVI   0(R2),C' '              and blank that byte
         STC   R3,COMMVM               Save in VV and ..
         STC   R4,COMMVM+1             .. MM in RPFCOMM
SETC009  DS    0H
         LM    R1,R14,SAVESETC         Restore registers
         BR    R14                     Return
         LTORG ,
         TITLE '1 line on the screen'
SCRLNE   DSECT ,                                                   @rpn
SCRLSBA1 DS    CL3                     SBA of linenumber           @rpn
SCRLATR1 DS    CL2                     SF + attribute line number  @rpn
SCRLCLR1 DS    CL3                     SA + REVERSE or HDEFAULT
SCRLINE# DS    CL6                     Linenumber                  @rpn
SCRLCLR2 DS    CL3                     SA + HDEFAULT
SCRLATR2 DS    CL2                     SF + attribute data line    @rpn
SCRLDATA EQU   *                       Data line (max. length = 192)
*                       depending on the screen width or record length
SCRLATR3 DS    CL2                     SF + attribute byte X'F0'
SCRLL    EQU   *-SCRLNE                Length = DATALINE
         TITLE 'Working storage'
*------- S T A R T   O F   W O R K A R E A ---------------------------*
WORKAREA DSECT
SAVEMAIN DS    18F                     Save area MAIN routine
DBW      DS    D                       Used in RCTOSBA
SBAR0R1  DS    D                       Used in RCTOSBA
SAVEDEL  DS    13F                     Save area DEL  routine
         ORG   SAVEDEL                 Reset location counter and
SAVEBNDS DS    13F                     use the same savearea for BNDS
         ORG   SAVEDEL                 Reset location counter and
SAVEINP  DS    13F                     use the same savearea for INPUT
         ORG   SAVEDEL                 Reset location counter and
SAVEPFK  DS    13F                     Use the same savearea for PFK
         ORG   SAVEDEL                 Reset location counter and
SAVEOVLY DS    13F                     use the same savearea for OVLY
         ORG   SAVEDEL                 Reset location counter and
SAVECPY  DS    13F                     use the same savearea for COPY
SAVELINE DS    13F                     Save area LINE routine
SAVEMVE  DS    13F                     Save area MOVE routine
SAVENUM  DS    13F                     Save area NUMBER routine
SAVESORT DS    13F                     Save area SORT routine
SAVELCMD DS    13F                     Save area LCOMMAND routine
SAVECMDS DS    13F                     Save area CMDSCAN routine
SAVECTPS DS    13F                     Save area RPFCTPST routine
SAVESETC DS    14F                     Save area SETCHNG routine
SAVECSR  DS    7F                      Save area CSR routine
SAVEWREG DS    4F                      Save area work registers
PARMFLD  DS    3F                      3 parameters for DSNPARS
#RECS    DS    F                       Record counter RPFCTPST routine
MOVE1SCR DS    F                       Address 1st record on screen
R14CNVIN DS    F                       Save register 14 CNVIN routine
R14CNVO  DS    F                       Save register 14 CNVOUT
R14LINK  DS    F                       Save register 14 LINKMOD rout.
R14LOAD  DS    F                       Save register 14 LOAD
R14SETC  DS    F                       Save register 14 SETCOL
SAVE1ST  DS    F                       Work field DEL routine
TOTSIZE  DS    F                       Total size of this area
BUFFEND  DS    F                       End of TGET buffer used in CNVIN
TPUTLEN  DS    F                       Length of TPUT in CNVOUT routine
DATALINE DS    F                       Length of entry on screen (LNE5)
PARMLST1 DS    F                       Contains always RPFCOMM \____/
PARMLST2 DS    F                       2nd parameter           |____|
PARMLST3 DS    F                       3rd parameter           /    \
CHGCTR   DS    F                       Keep track number of changes
SWAPLAST DS    F                       Workfield SORT routine
*
CBPRM1   DS    F                       Pointer to buffer length
CBPRM2   DS    F                       Pointer to screen size/width
CBPRM3   DS    F                       Pointer to buffer(upd. in place)
LN3270   DS    F                       Length of uncompressed stream
*                                      After executing RPFC3270 this
*                                      length is the length of the
*                                      compressed data stream
DATOFFS  DS    F                       Offset in data portion of
*                                      the workspace, this field will
*                                      be set if a LEFT, RIGHT or COBOL
*                                      ON/OFF is given. If the complete
*                                      record fits on the screen,
*                                      DATOFFS = zero (no offset)
*------- ----- ----------------------- Work fields routine CSR
ROW      DS    F                       Row number (BIN)    \___ LA __/
COL      DS    F                       Column number (BIN) /    R1   \
*------- ----- ----------------------- SBA'S
DELSAVE  DS    3F                      Save field DEL routine
SCANSAVE DS    2F                      Save 2 registers SCAN routine
CLIPBRD  DS    CL(DCB1L)               DCB used in RPFCTPST
ENQLST   DS    XL16
LNKLST   LINK  EPLOC=*,SF=L            LINK SF=L
*------- ----- ----------------------- Workfields NUMBER routine
LINECNT  DS    PL6
INCR     DS    PL2                     Increment for line # in data
NUM1ST   DS    CL6                     Line number in data
CLEN     DS    CL8                     Used in BNDS routine
*
R3C91617 DS    H   r3,c9 or r3,c16/17 \__________ do not _____________/
R4C91617 DS    H   r4,c9 or r4,c16/17             insert
R5C91617 DS    H   r5,c9 or r5,c16/17
R6C91617 DS    H   r6,c9 or r6,c16/17  _______________________________
R7C91617 DS    H   r7,c9 or r7,c16/17 /                               \
COLUMN   DS    F                       Contains 9, 16 or 17
*
INSLINE  DS    F                       Line to insert after
SAVELIN# DS    CL8                     To save and restore line #
SBACMD   DS    CL2                     SBA command line (r2,c9)
SBABNDS  DS    CL2                     SBA BNDS value (r2,width-16)
SBASCRL  DS    CL2      (r2,width-3)   SBA of Scroll value on screen
SAVEMBR  DS    CL8
BNDSNUM  DS    CL18                    Work field for BNDS
SCROLNUM DC    CL4'26  '               Work field for SCROLL
         DS    C                       \________ unpk -1 ________/
SCRPAGE  DS    CL4                     /   format 'cc  '         \
*
         DS    C                       \________ unpk -1 ________/
SCRHALF  DS    CL4                     /   format 'cc  '         \
DATALEN  DS    F                       Length of data portion in scr
COPMEM   DS    CL8
COPYDSN  DS    CL46
COPYVOL  DS    CL6
COPYVM   DS    CL2                     Save ISPF/RPF vv:mm before COPY
DELFLD   DS    CL8                     Work field DEL routine
EPLOC    DS    CL8                     Module to link to in LINKMOD
SHFLD    DS    CL8                     Work field SHIFT routine
COLOR    DS    CL3                     Default color line number
#LINES   DS    H                       Number of lines on the screen
SCRLEN   DS    H                       Number of lines * COMWRKEN
         CNOP  2,4
NUMFLD   DS    CL8                     Work field NUMTST/SHIFT
PGM      DS    CL8                     Program name from CDE
LN1FLD   DS    CL8                     Line-1 CO/MO/INPUT    \__ 1 ___/
LN2FLD   DS    CL8                     Line-2 CO/MO/INPUT    /__ LA___\
LN3FLD   DS    CL8                     Line-3 CO/MO/INPUT    \        /
BUFFER   DS    CL48
CPYMVC   DS    C                       Used in COPY routine
DELMVC   DS    C                       Used in DEL routine
AUTO     DS    C                       Internal AUTOSAVE indicator
SW       DC    X'00'
$XLATED  EQU   X'01'                   Unprintables detected
$NOUPDVM EQU   X'02'                   Don't increase ISPF vvmm anymore
$ASIS    EQU   X'04'                   Mixed case data
$BOTDATA EQU   X'08'                   Find 'bottom of data reached'
$NULLS   EQU   X'10'                   Trailing blanks repl. by x'00'
$WIDE    EQU   X'20'                   Large screen
$CUTMOVE EQU   X'40'                  Primary command CUT with MM range
$OVLCH   EQU   X'80'                   Overlay (C - OO - OO) done
AIDBYTE  DS    CL1                     AID byte
CURSOR   DS    CL2                     Cursor address
TSTCHAR  DS    C
*
RECORDF  DS    0CL263                  Maximum size of COMWRKEN
*                                      used in SORT and RPFCTPST
TSTLINE  DS    CL255                   and in CNVIN
         DS    CL8
*------- ----- ----------------------- Workfields CMDSCAN routine
LASTRTRV DS    F         \__1 STM__/   Address last retr. cmd in table
LASTRT#  DS    F         /         \   # remaining commands to scan
VERB     DS    CL8                     Primary command verb
SC@BUFF  DS    CL48                    \_____ copy of _____/
         DS    CL48                    /  command buffer   \
SAVECMD  DS    CL48
*------- ----- ----------------------- Workfields LCOMMAND routine
DELTBLE  DS    CL120                   Max 20 line numbers to delete
*                                      caused by D line commands.
RESETFLG DC    X'00'                   Reset flag
WORKBYTE DC    X'00'
PENDMSG  DS    CL25                    Msg: '..... pending'
*
LFLAGS   DS    0CL12                   Flags
LCFLAG   DC    X'00'                   Line command flag
DESTFLAG DC    X'00'                   Destination (A) flag
COPYFLAG DC    X'00'                   COPY flag (C, CT, CB, CC)
MOVEFLAG DC    X'00'                   MOVE flag (M, MT, MB, MM)
DELFLAG  DC    X'00'                   DELETE flag (D, DT, DB, DD)
REPFLAG  DC    X'00'                   Repeat flag (R, RR)
TRANFLAG DC    X'00'                   UC/LC flag (xCC,xCB,xCT)
CUTFLAG  DC    X'00'                   'CUT' command pending       @rpb
PASTEFLG DC    X'00'                   'PASTE' command pending     @rpb
CREFLAG  DC    X'00'                   X'F0'=CREATE, X'0F'=REPLACE ...
*                                      command pending
OVLFLAG  DC    X'00'                   OO or O pending
APNDFLAG DC    X'00'                   APPEND/COPY pending
*
LLINES   DS    0CL66
DESTLINE DC    CL6' '     +0           Linenumber  of  destination
CMNDLIN1 DC    CL6' '     +6           First  linenumber
CMNDLIN2 DC    CL6' '     +12          Second linenumber
CMNDOVL1 DC    CL6' '     +18          First  linenumber OO (overlay)
CMNDOVL2 DC    CL6' '     +24          Second linenumber OO (overlay)
DESTCOMM DC    CL6' '     +30          Linenumber  of  dest-command
LCDEST   DC    CL6' '     +36          Dest text
LCCOM1   DC    CL6' '     +42          Command 1 text
LCCOM2   DC    CL6' '     +48          Command 2 text
LCOVL1   DC    CL6' '     +54          Overlay 1 (OO) text
LCOVL2   DC    CL6' '     +60          Overlay 2 (OO) text
*
L$LINE   DS    CL6                     Current line number         @rpj
LCMDR3   DS    CL4                     Save field R3               @rpj
LCMDBUF  DS    CL56
*------- ----- ----------------------- End of workfields LCOMMAND
*
LCLINES  DC    4XL6'00'                2 entries with line number and
*                                      line number with line command.
ADDRVM   DS    A                       A(ISPF vv.mm in header)
SCR5SBAL DC    H'0'                    SBA of line number to highlight
*                                      if no command has been given
PROFLINE DS    0CL59
PROFTNUM DC    CL10'Numbered: '
PROFNUM  DC    CL3'OFF'
         DC    C' '
PROFTCOB DC    CL7'Cobol: '
PROFCOB  DC    CL3'OFF'
         DC    C' '
PROFTCAP DC    CL6'Caps: '
PROFCAPS DC    CL3'OFF'
         DC    C' '
PROFTNUL DC    CL7'Nulls: '
PROFNULL DC    CL3'OFF'
         DC    C' '
PROFTAUT DC    CL10'Autosave: '
PROFAUTO DC    CL3'OFF'
         DS    0F
*---------------------------------------------------------------------*
*                                                                     *
*        Below You will find a SBA table. Each entry contains of      *
*        2 SBA's. The first SBA is Rxx,C02 and the second SBA is      *
*        Rxx,C09. The first row is row 3 if no scale line is used or  *
*        row 4 if a scale line is requested by the COLS command       *
*                                                                     *
*        These SBA's are the start SBA of linenumber and the SBA of   *
*        data immediate after the linenumber,                         *
*        after the TGET of the unedited buffer.                       *
*        The appropiate SBA (Row x, Col 9), will immediately appear   *
*        after the linenumber, if the MDT is on.                      *
*        If the SBA is not after the linenumber, the line is not      *
*        changed, because the MDT is off.                             *
*        Example: The SBA of (e.g.) row 4,c2 is 11C761 on a 80 column *
*        screen or X'11C64C' on a 132 column screen. This SBA will    *
*        appear in the unedited buffer (TGET ASIS), because the MDT   *
*        of the linenumber is always on. If 11C7E8 (in this example   *
*        row 4, column 9) appears after the line number, the          *
*        corresponding line has been changed.                         *
*                                                                     *
*------------------------------------------ (C)-2025 Skybird Systems -*
SCRSBA   DS    97XL6                   r3,c2/r3,c9 - r99,c2/r99,c9
*
*        The fields below are copied from SCRBTXT and SCRETXT in
*        CSECT SCREEN. The layout of SCR2TXT should be exact the
*        same as SCRBTXT, and the layout of SCR5TXT should
*        be exact the same as SCRETXT
*
SCREEN   DS    0CL(SCREENL)
SCR2TXTF DC    X'27'                 | Escape character TPUT FULLSCR  |
SCR2TXT  DC    X'F1C2'               | Write no-erase, keyboard unlck |
         DC    X'1100001DF8'         |                                |
SBA2#0   DC    X'110000'             | r1, c56+                       |
MSG2     DC    CL25' '               |                                |
SCR2R2C1 DC    X'110000',X'1DF8',C'Cmd =>',X'1D4013'                  |
REP2     DC    CL048' ',X'1DF0'      |                                |
SCR2LEN  EQU   *-SCR2TXT             |                                |
SCR2LENF EQU   *-SCR2TXTF            |                                |
*                                    |                                |
SCR5TXTF DC    X'27'                 | Escape character TPUT FULLSCR  |
SCR5TXT  DC    X'00C2'               | Cmd = EW or EWA, WCC = no      |
*                                    | reset MDT and keyboard unlock  |
SCR5ADDR DC    XL4'11000013'         | Address of cursor              |
R1C1     DC    XL5'1100001DF8'       | Reset address                  |
SCR5STA  DC    CL06' ',C' '          |                                |
SCR5HDR  DS    CL49                  |                                |
SCR5EHDR DS    CL26'---------------------'                            |
SCR5EXT  DC    CL100' '              |                                |
*                                    |                                |
SBA5#0   DC    XL3'110000'           | r01,c (width screen - 24)      |
MSG5     DC    CL25' '               |                                |
SCR5R2C1 DC    XL5'1100001DF8'       | r2,c1                          |
         DC    CL6'Cmd =>'           |                                |
         DC    XL2'1DC1'             |                                |
         DC    AL3(USCORE)           |                                |
REP5     DC    CL48' '               |                                |
         DC    AL3(HDEFAULT)         |                                |
         DC    XL2'1DF0'             |                                |
*                                    |                                |
         DC    CL21' '               |                                |
SBA5SCP  DC    XL3'110000'           |                                |
BNDS5    DC    CL4'BNDS'             |                                |
         DC    XL2'1DC8'             |                                |
         DC    CL7'XXX,XXX'          |                                |
         DC    XL2'1DF0'             |                                |
SCROLL5  DC    CL4'SCRL'             |                                |
         DC    XL2'1DC8'             |                                |
         DC    CL4'XXXX'             |                                |
         DC    XL2'1DF0'             |                                |
SCR5LEN  EQU   *-SCR5TXT             |                                |
WORKL    EQU   *-WORKAREA            |                                |
LNE5     EQU   *                            Handle up to 99 lines
*        DS    CL((200+21)*(99-2))     depending on the screen width
*------- E N D   O F   W O R K A R E A  ------------------------------*
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9                       3rd base register mainline
R10      EQU   10                      2nd base register mainline
R11      EQU   11                      Address of RPFCOMM
R12      EQU   12                      Base register mainline + subrout
R13      EQU   13                      Save area + working storage
R14      EQU   14
R15      EQU   15
         TITLE 'RPFCOMM DSECT'
COMMAREA RPFCOMM
OFFSETN1 EQU   (NEXTENT-8)
OFFSETN2 EQU   WORKSLIN-WORKSPCE
         PRINT NOGEN
         DCBD  DSORG=PS,DEVD=DA
         AIF   (&SVS).SVS2
         IKJTCB DSECT=YES,LIST=NO
         IHAPSA DSECT=YES              PSA
         IHARB
         IHACDE                        Our CDE
.SVS2    ANOP
         END
